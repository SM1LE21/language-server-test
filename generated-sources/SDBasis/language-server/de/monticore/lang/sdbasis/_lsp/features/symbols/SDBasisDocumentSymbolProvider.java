/* generated by template _lsp.features.symbols.DocumentSymbolProvider*/

package de.monticore.lang.sdbasis._lsp.features.symbols;

import de.mclsg.lsp.document_management.*;
import de.mclsg.lsp.features.CommonProvider;
import de.mclsg.lsp.features.DocumentSymbolProvider;
import org.eclipse.lsp4j.*;
import org.eclipse.lsp4j.jsonrpc.messages.Either;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;



public class SDBasisDocumentSymbolProvider extends CommonProvider implements DocumentSymbolProvider {

    public SDBasisDocumentSymbolProvider(DocumentManager documentManager) {
        super(documentManager);
    }

    @Override
    public List<Either<SymbolInformation, DocumentSymbol>> getDocumentSymbols(TextDocumentItem document) {
        List<Either<SymbolInformation, DocumentSymbol>> result;

        Optional<DocumentInformation> documentInformation = documentManager.getDocumentInformation(document);
        result = documentInformation.map(documentInformation1 ->
            documentInformation1.getMatchedNameTokens().stream()
                    .map(symbol -> Either.<SymbolInformation, DocumentSymbol>forLeft(new SymbolInformation(
                            symbol.token.getText(),
                            SymbolKind.Object,
                            new Location(
                                    document.getUri(),
                                    symbol.range
                            )
                    ))).collect(Collectors.toList())).orElse(Collections.emptyList());

        return result;
    }
}
