/* generated by template _lsp.LanguageServer*/

package de.monticore.lang.sdbasis._lsp;

import de.monticore.lang.sdbasis._symboltable.SDBasisGlobalScope;
import de.monticore.lang.sdbasis._lsp.language_access.*;
import de.mclsg.lsp.CommonLanguageServer;
import de.mclsg.lsp.CommonTextDocumentService;
import de.mclsg.lsp.ISymbolUsageResolutionProvider;
import de.mclsg.lsp.document_management.DocumentManager;
import de.mclsg.lsp.extensions.syntax_highlighting.SyntaxHighlightingService;
import org.eclipse.lsp4j.ServerCapabilities;
import org.eclipse.lsp4j.TextDocumentSyncKind;
import org.eclipse.lsp4j.services.WorkspaceService;
import de.monticore.io.paths.MCPath;

public class SDBasisLanguageServer extends CommonLanguageServer {

    protected SDBasisTextDocumentService textDocumentService;
    protected SDBasisWorkspaceService workspaceService;
    protected SDBasisSyntaxHighlightingService syntaxHighlightingService;

    protected SDBasisLanguageAccess languageAccess;
		protected DocumentManager documentManager;
    protected SDBasisScopeManager scopeManager;
    protected ISymbolUsageResolutionProvider symbolUsageResolutionProvider;

    public SDBasisLanguageServer(DocumentManager documentManager, MCPath modelPath, SDBasisScopeManager scopeManager, ISymbolUsageResolutionProvider symbolUsageResolutionProvider) {
        this.documentManager = documentManager;
        this.scopeManager = scopeManager;
        this.symbolUsageResolutionProvider = symbolUsageResolutionProvider;
        scopeManager.initGlobalScope(modelPath);
        languageAccess = initLanguageAccess();
        textDocumentService = initTextDocumentService();
        syntaxHighlightingService = new SDBasisSyntaxHighlightingService(languageAccess);
				indexingManager = initIndexingManager(modelPath);
				workspaceService = initWorkspaceService();
        context = initContext();

        textDocumentService.getCapabilities().setTextDocumentSync(TextDocumentSyncKind.Full);
	}

  protected SDBasisLanguageAccess initLanguageAccess(){
    return new SDBasisLanguageAccess(documentManager, scopeManager);
  }

  protected de.mclsg.lsp.IndexingManager initIndexingManager(MCPath modelPath){
    return new SDBasisIndexingManager(modelPath, documentManager, textDocumentService.getDocumentInformationProvider(), (SDBasisLanguageServer) this);
  }

  protected SDBasisWorkspaceService initWorkspaceService(){
    return new SDBasisWorkspaceService((SDBasisLanguageServer) this, indexingManager);
  }

  protected SDBasisTextDocumentService initTextDocumentService(){
    return new SDBasisTextDocumentService((SDBasisLanguageServer) this, documentManager, this.languageClient, languageAccess, symbolUsageResolutionProvider);
  }

  protected SDBasisLanguageServerContext initContext(){
    return new SDBasisLanguageServerContext((SDBasisLanguageServer)this);
  }

	public void resetContent(MCPath modelPath){
		documentManager.reset();
		scopeManager.resetGlobalScope(modelPath);
		indexingManager = initIndexingManager(modelPath);
		if(automaticallyRunIndexing()){
			indexingManager.indexAllFilesInPath();
			afterIndexingHookpoint();
		}
	}

	@Override
	protected void afterIndexingHookpoint(){
        de.mclsg.lsp.util.AsyncUtil.runAsync(textDocumentService::triggerCoCoChecker);
	}

    @Override
    public ServerCapabilities getCapabilities() {
				ServerCapabilities capabilities = textDocumentService.getCapabilities();
				capabilities.setWorkspace(workspaceService.getCapabilities());
        return capabilities;
    }

    @Override
    public SDBasisTextDocumentService getTextDocumentService() {
        return textDocumentService;
    }

    @Override
    public SDBasisWorkspaceService getWorkspaceService() {
        return workspaceService;
    }

    @Override
    public SDBasisSyntaxHighlightingService getSyntaxHighlightingService() {
        return this.syntaxHighlightingService;
    }

  public SDBasisLanguageAccess getLanguageAccess(){
    return languageAccess;
  }
}
