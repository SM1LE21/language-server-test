/* generated by template _lsp.LanguageServerContext*/

package de.monticore.lang.sdbasis._lsp;

import de.mclsg.lsp.util.LanguageServerContext;
import de.mclsg.lsp.LanguageServerWriteLock;
import de.monticore.lang.sdbasis.SDBasisMill;
import de.monticore.types.mcbasictypes.MCBasicTypesMill;
import de.monticore.mcbasics.MCBasicsMill;
import de.monticore.symbols.basicsymbols.BasicSymbolsMill;
import de.monticore.expressions.expressionsbasis.ExpressionsBasisMill;
import de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill;
import de.monticore.umlstereotype.UMLStereotypeMill;
import de.monticore.literals.mccommonliterals.MCCommonLiteralsMill;

public class SDBasisLanguageServerContext implements LanguageServerContext {
  protected SDBasisLanguageServer languageServer;
  protected LanguageServerWriteLock lock;

  SDBasisMill sdbasisMill;
  SDBasisMill oldSDBasisMill;
  MCBasicTypesMill mcbasictypesMill;
  MCBasicTypesMill oldMCBasicTypesMill;
  MCBasicsMill mcbasicsMill;
  MCBasicsMill oldMCBasicsMill;
  BasicSymbolsMill basicsymbolsMill;
  BasicSymbolsMill oldBasicSymbolsMill;
  ExpressionsBasisMill expressionsbasisMill;
  ExpressionsBasisMill oldExpressionsBasisMill;
  MCLiteralsBasisMill mcliteralsbasisMill;
  MCLiteralsBasisMill oldMCLiteralsBasisMill;
  UMLStereotypeMill umlstereotypeMill;
  UMLStereotypeMill oldUMLStereotypeMill;
  MCCommonLiteralsMill mccommonliteralsMill;
  MCCommonLiteralsMill oldMCCommonLiteralsMill;

  public SDBasisLanguageServerContext(SDBasisLanguageServer languageServer){
    this.languageServer = languageServer;
    initMills();
  }

  protected void initMills(){
    SDBasisMill.init();
    sdbasisMill = SDBasisMill.getMill();
    mcbasictypesMill = MCBasicTypesMill.getMill();
    mcbasicsMill = MCBasicsMill.getMill();
    basicsymbolsMill = BasicSymbolsMill.getMill();
    expressionsbasisMill = ExpressionsBasisMill.getMill();
    mcliteralsbasisMill = MCLiteralsBasisMill.getMill();
    umlstereotypeMill = UMLStereotypeMill.getMill();
    mccommonliteralsMill = MCCommonLiteralsMill.getMill();
  }

  public SDBasisLanguageServer getLanguageServer(){
    return languageServer;
  }

  public LanguageServerContext open(){
    try{
      lock = LanguageServerWriteLock.waitForLock();
    }catch(InterruptedException e){
      throw new RuntimeException(e);
    }
    oldSDBasisMill = SDBasisMill.getMill();
    SDBasisMill.initMe(sdbasisMill);
    oldMCBasicTypesMill = MCBasicTypesMill.getMill();
    MCBasicTypesMill.initMe(mcbasictypesMill);
    oldMCBasicsMill = MCBasicsMill.getMill();
    MCBasicsMill.initMe(mcbasicsMill);
    oldBasicSymbolsMill = BasicSymbolsMill.getMill();
    BasicSymbolsMill.initMe(basicsymbolsMill);
    oldExpressionsBasisMill = ExpressionsBasisMill.getMill();
    ExpressionsBasisMill.initMe(expressionsbasisMill);
    oldMCLiteralsBasisMill = MCLiteralsBasisMill.getMill();
    MCLiteralsBasisMill.initMe(mcliteralsbasisMill);
    oldUMLStereotypeMill = UMLStereotypeMill.getMill();
    UMLStereotypeMill.initMe(umlstereotypeMill);
    oldMCCommonLiteralsMill = MCCommonLiteralsMill.getMill();
    MCCommonLiteralsMill.initMe(mccommonliteralsMill);
    return this;
  }

  public void close(){
    SDBasisMill.initMe(oldSDBasisMill);
    MCBasicTypesMill.initMe(oldMCBasicTypesMill);
    MCBasicsMill.initMe(oldMCBasicsMill);
    BasicSymbolsMill.initMe(oldBasicSymbolsMill);
    ExpressionsBasisMill.initMe(oldExpressionsBasisMill);
    MCLiteralsBasisMill.initMe(oldMCLiteralsBasisMill);
    UMLStereotypeMill.initMe(oldUMLStereotypeMill);
    MCCommonLiteralsMill.initMe(oldMCCommonLiteralsMill);
    try{
      lock.close();
    }catch(InterruptedException e){
      throw new RuntimeException(e);
    }
  }
}
