/* generated by template _lsp.features.formatting.PrettyPrintingFormattingProvider*/

package de.monticore.lang.sdbasis._lsp.features.formatting;

import de.mclsg.PositionUtils;
import de.mclsg.lsp.document_management.DocumentInformation;
import de.mclsg.lsp.document_management.DocumentManager;
import de.mclsg.lsp.features.*;

import java.util.*;
import org.eclipse.lsp4j.*;

import de.monticore.lang.sdbasis._ast.ASTSDArtifact;
import de.monticore.prettyprint.AstPrettyPrinter;

public class SDBasisPrettyPrintingFormattingProvider implements FormattingProvider  {
	protected DocumentManager documentManager;
	protected AstPrettyPrinter<ASTSDArtifact> prettyPrinter;

	public SDBasisPrettyPrintingFormattingProvider(DocumentManager documentManager, AstPrettyPrinter<ASTSDArtifact> prettyPrinter){
		this.documentManager = documentManager;
		this.prettyPrinter = prettyPrinter;
	}

	public List<TextEdit> formatting(TextDocumentItem document, FormattingOptions options){
		Optional<DocumentInformation> diOpt = documentManager.getDocumentInformation(document);
		if(!diOpt.isPresent()){
			return new ArrayList<>();
		}

		DocumentInformation di = diOpt.get();

		Range r = new Range(new Position(0, 0), new Position(Integer.MAX_VALUE, 0));
		if(di.ast.isPresent_SourcePositionStart()){
			r.setStart(PositionUtils.toPosition(di.ast.get_SourcePositionStart()));
		}
		if(di.ast.isPresent_SourcePositionEnd()){
			r.setEnd(PositionUtils.toPosition(di.ast.get_SourcePositionEnd()));
		}

		String content = prettyPrinter.prettyPrint((ASTSDArtifact) di.ast);
		return Collections.singletonList(new TextEdit(r, content));
	}
}
