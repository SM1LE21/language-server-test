/* generated from model SDBasis */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._util;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SDBasisTypeDispatcher  implements de.monticore.lang.sdbasis._visitor.SDBasisHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher mCBasicTypesTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher basicSymbolsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher expressionsBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher uMLStereotypeTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.mcbasics._util.MCBasicsTypeDispatcher mCBasicsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher mCLiteralsBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher mCCommonLiteralsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDArtifact> optASTSDArtifact
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSequenceDiagram> optASTSequenceDiagram
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDBody> optASTSDBody
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier> optASTSDCompleteModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDFreeModifier> optASTSDFreeModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDInitialModifier> optASTSDInitialModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier> optASTSDVisibleModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDObject> optASTSDObject
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDObjectSource> optASTSDObjectSource
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDObjectTarget> optASTSDObjectTarget
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDSendMessage> optASTSDSendMessage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> optASTSDActivityBar
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDModifier> optASTSDModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDElement> optASTSDElement
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDInteraction> optASTSDInteraction
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> optASTSDSource
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> optASTSDTarget
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDAction> optASTSDAction
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.SDBasisLiterals> optSDBasisLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._ast.ASTSDBasisNode> optASTSDBasisNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDArtifact
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSequenceDiagram
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDBody
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDCompleteModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDFreeModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDInitialModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDVisibleModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDObject
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDObjectSource
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDObjectTarget
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDSendMessage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDActivityBar
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDModifier
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDElement
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDInteraction
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDSource
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDTarget
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDAction
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isSDBasisLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDBasisNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope> optISDBasisArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope> optISDBasisGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> optISDBasisScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISDBasisArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISDBasisGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISDBasisScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  SDBasisTypeDispatcher()
 {
  /* generated by template dispatcher.Constructor*/


de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser = de.monticore.lang.sdbasis.SDBasisMill.traverser();
this.setTraverser(traverser);

this.getTraverser().setSDBasisHandler(this);

    this.mCBasicTypesTypeDispatcher = new de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher();
    this.getTraverser().setMCBasicTypesHandler(this.mCBasicTypesTypeDispatcher);
    this.basicSymbolsTypeDispatcher = new de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher();
    this.getTraverser().setBasicSymbolsHandler(this.basicSymbolsTypeDispatcher);
    this.expressionsBasisTypeDispatcher = new de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher();
    this.getTraverser().setExpressionsBasisHandler(this.expressionsBasisTypeDispatcher);
    this.uMLStereotypeTypeDispatcher = new de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher();
    this.getTraverser().setUMLStereotypeHandler(this.uMLStereotypeTypeDispatcher);
    this.mCBasicsTypeDispatcher = new de.monticore.mcbasics._util.MCBasicsTypeDispatcher();
    this.getTraverser().setMCBasicsHandler(this.mCBasicsTypeDispatcher);
    this.mCLiteralsBasisTypeDispatcher = new de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher();
    this.getTraverser().setMCLiteralsBasisHandler(this.mCLiteralsBasisTypeDispatcher);
    this.mCCommonLiteralsTypeDispatcher = new de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher();
    this.getTraverser().setMCCommonLiteralsHandler(this.mCCommonLiteralsTypeDispatcher);

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser ()

 {
    return this.traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser)

 {
    this.traverser = traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void reset ()

 {
    /* generated by template dispatcher.Reset*/


this.traverser.getTraversedElements().clear();

    mCBasicTypesTypeDispatcher.reset();
    basicSymbolsTypeDispatcher.reset();
    expressionsBasisTypeDispatcher.reset();
    uMLStereotypeTypeDispatcher.reset();
    mCBasicsTypeDispatcher.reset();
    mCLiteralsBasisTypeDispatcher.reset();
    mCCommonLiteralsTypeDispatcher.reset();

  isASTSDArtifact = false;
  isASTSequenceDiagram = false;
  isASTSDBody = false;
  isASTSDCompleteModifier = false;
  isASTSDFreeModifier = false;
  isASTSDInitialModifier = false;
  isASTSDVisibleModifier = false;
  isASTSDObject = false;
  isASTSDObjectSource = false;
  isASTSDObjectTarget = false;
  isASTSDSendMessage = false;
  isASTSDActivityBar = false;
  isASTSDModifier = false;
  isASTSDElement = false;
  isASTSDInteraction = false;
  isASTSDSource = false;
  isASTSDTarget = false;
  isASTSDAction = false;
  isSDBasisLiterals = false;
  isASTSDBasisNode = false;
  isISDBasisArtifactScope = false;
  isISDBasisGlobalScope = false;
  isISDBasisScope = false;
    optASTSDArtifact = Optional.empty();
    optASTSequenceDiagram = Optional.empty();
    optASTSDBody = Optional.empty();
    optASTSDCompleteModifier = Optional.empty();
    optASTSDFreeModifier = Optional.empty();
    optASTSDInitialModifier = Optional.empty();
    optASTSDVisibleModifier = Optional.empty();
    optASTSDObject = Optional.empty();
    optASTSDObjectSource = Optional.empty();
    optASTSDObjectTarget = Optional.empty();
    optASTSDSendMessage = Optional.empty();
    optASTSDActivityBar = Optional.empty();
    optASTSDModifier = Optional.empty();
    optASTSDElement = Optional.empty();
    optASTSDInteraction = Optional.empty();
    optASTSDSource = Optional.empty();
    optASTSDTarget = Optional.empty();
    optASTSDAction = Optional.empty();
    optSDBasisLiterals = Optional.empty();
    optASTSDBasisNode = Optional.empty();
    optISDBasisArtifactScope = Optional.empty();
    optISDBasisGlobalScope = Optional.empty();
    optISDBasisScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDArtifact (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDArtifact();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSequenceDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSequenceDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDBody (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDBody();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDCompleteModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDCompleteModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDFreeModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDFreeModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDInitialModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDInitialModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDVisibleModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDVisibleModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObject (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDObject();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObjectSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDObjectSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObjectTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDObjectTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDSendMessage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDSendMessage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDActivityBar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDActivityBar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDElement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDElement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDInteraction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDInteraction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDAction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDAction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isSDBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsSDBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISDBasisArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISDBasisArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISDBasisGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISDBasisGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISDBasisScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISDBasisScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDArtifact asASTSDArtifact (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDArtifact(node)) {
  Log.error("0x54987x27358 Cannot cast node to type ASTSDArtifact.");
}
return this.getOptASTSDArtifact();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSequenceDiagram asASTSequenceDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSequenceDiagram(node)) {
  Log.error("0x54987x22153 Cannot cast node to type ASTSequenceDiagram.");
}
return this.getOptASTSequenceDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBody asASTSDBody (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDBody(node)) {
  Log.error("0x54987x04914 Cannot cast node to type ASTSDBody.");
}
return this.getOptASTSDBody();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier asASTSDCompleteModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDCompleteModifier(node)) {
  Log.error("0x54987x84604 Cannot cast node to type ASTSDCompleteModifier.");
}
return this.getOptASTSDCompleteModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDFreeModifier asASTSDFreeModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDFreeModifier(node)) {
  Log.error("0x54987x66193 Cannot cast node to type ASTSDFreeModifier.");
}
return this.getOptASTSDFreeModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInitialModifier asASTSDInitialModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDInitialModifier(node)) {
  Log.error("0x54987x14865 Cannot cast node to type ASTSDInitialModifier.");
}
return this.getOptASTSDInitialModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier asASTSDVisibleModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDVisibleModifier(node)) {
  Log.error("0x54987x98333 Cannot cast node to type ASTSDVisibleModifier.");
}
return this.getOptASTSDVisibleModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObject asASTSDObject (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObject(node)) {
  Log.error("0x54987x35477 Cannot cast node to type ASTSDObject.");
}
return this.getOptASTSDObject();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectSource asASTSDObjectSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObjectSource(node)) {
  Log.error("0x54987x64762 Cannot cast node to type ASTSDObjectSource.");
}
return this.getOptASTSDObjectSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectTarget asASTSDObjectTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObjectTarget(node)) {
  Log.error("0x54987x64772 Cannot cast node to type ASTSDObjectTarget.");
}
return this.getOptASTSDObjectTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSendMessage asASTSDSendMessage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDSendMessage(node)) {
  Log.error("0x54987x98253 Cannot cast node to type ASTSDSendMessage.");
}
return this.getOptASTSDSendMessage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDActivityBar asASTSDActivityBar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDActivityBar(node)) {
  Log.error("0x54987x08504 Cannot cast node to type ASTSDActivityBar.");
}
return this.getOptASTSDActivityBar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier asASTSDModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDModifier(node)) {
  Log.error("0x54987x12483 Cannot cast node to type ASTSDModifier.");
}
return this.getOptASTSDModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDElement asASTSDElement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDElement(node)) {
  Log.error("0x54987x82256 Cannot cast node to type ASTSDElement.");
}
return this.getOptASTSDElement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInteraction asASTSDInteraction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDInteraction(node)) {
  Log.error("0x54987x52678 Cannot cast node to type ASTSDInteraction.");
}
return this.getOptASTSDInteraction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSource asASTSDSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDSource(node)) {
  Log.error("0x54987x72921 Cannot cast node to type ASTSDSource.");
}
return this.getOptASTSDSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDTarget asASTSDTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDTarget(node)) {
  Log.error("0x54987x72931 Cannot cast node to type ASTSDTarget.");
}
return this.getOptASTSDTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDAction asASTSDAction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDAction(node)) {
  Log.error("0x54987x17950 Cannot cast node to type ASTSDAction.");
}
return this.getOptASTSDAction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.SDBasisLiterals asSDBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isSDBasisLiterals(node)) {
  Log.error("0x54987x43574 Cannot cast node to type SDBasisLiterals.");
}
return this.getOptSDBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBasisNode asASTSDBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDBasisNode(node)) {
  Log.error("0x54987x31084 Cannot cast node to type ASTSDBasisNode.");
}
return this.getOptASTSDBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope asISDBasisArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISDBasisArtifactScope(scope)) {
  Log.error("0x54987x99255 Cannot cast node to type ISDBasisArtifactScope.");
}
return this.getOptISDBasisArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope asISDBasisGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISDBasisGlobalScope(scope)) {
  Log.error("0x54987x91526 Cannot cast node to type ISDBasisGlobalScope.");
}
return this.getOptISDBasisGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisScope asISDBasisScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISDBasisScope(scope)) {
  Log.error("0x54987x61833 Cannot cast node to type ISDBasisScope.");
}
return this.getOptISDBasisScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTTypeVar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTFunction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isBasicSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsBasicSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTBasicSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDiagram (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isTypeVar (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isVariable (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isFunction (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNameExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTNameExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLiteralExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTLiteralExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTArguments (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTArguments();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isExpressionsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsExpressionsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTExpressionsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTExpressionsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStereotype (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTStereotype();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStereoValue (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTStereoValue();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isUMLStereotypeLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsUMLStereotypeLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTUMLStereotypeNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTUMLStereotypeNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName asASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedName(node)) {
  Log.error("0x54987x61622 Cannot cast node to type ASTMCQualifiedName.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration asASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPackageDeclaration(node)) {
  Log.error("0x54987x28421 Cannot cast node to type ASTMCPackageDeclaration.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCImportStatement asASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCImportStatement(node)) {
  Log.error("0x54987x79961 Cannot cast node to type ASTMCImportStatement.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType asASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPrimitiveType(node)) {
  Log.error("0x54987x44112 Cannot cast node to type ASTMCPrimitiveType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType asASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedType(node)) {
  Log.error("0x54987x63525 Cannot cast node to type ASTMCQualifiedType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCReturnType asASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCReturnType(node)) {
  Log.error("0x54987x07941 Cannot cast node to type ASTMCReturnType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCVoidType asASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCVoidType(node)) {
  Log.error("0x54987x87873 Cannot cast node to type ASTMCVoidType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCType asASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCType(node)) {
  Log.error("0x54987x57141 Cannot cast node to type ASTMCType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType asASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCObjectType(node)) {
  Log.error("0x54987x58646 Cannot cast node to type ASTMCObjectType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.MCBasicTypesLiterals asMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicTypesLiterals(node)) {
  Log.error("0x54987x10572 Cannot cast node to type MCBasicTypesLiterals.");
}
return mCBasicTypesTypeDispatcher.getOptMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode asASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicTypesNode(node)) {
  Log.error("0x54987x09246 Cannot cast node to type ASTMCBasicTypesNode.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTDiagram asASTDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDiagram(node)) {
  Log.error("0x54987x88840 Cannot cast node to type ASTDiagram.");
}
return basicSymbolsTypeDispatcher.getOptASTDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTType asASTType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTType(node)) {
  Log.error("0x54987x15925 Cannot cast node to type ASTType.");
}
return basicSymbolsTypeDispatcher.getOptASTType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTTypeVar asASTTypeVar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTTypeVar(node)) {
  Log.error("0x54987x99086 Cannot cast node to type ASTTypeVar.");
}
return basicSymbolsTypeDispatcher.getOptASTTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTVariable asASTVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTVariable(node)) {
  Log.error("0x54987x45399 Cannot cast node to type ASTVariable.");
}
return basicSymbolsTypeDispatcher.getOptASTVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTFunction asASTFunction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTFunction(node)) {
  Log.error("0x54987x96621 Cannot cast node to type ASTFunction.");
}
return basicSymbolsTypeDispatcher.getOptASTFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.BasicSymbolsLiterals asBasicSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isBasicSymbolsLiterals(node)) {
  Log.error("0x54987x35304 Cannot cast node to type BasicSymbolsLiterals.");
}
return basicSymbolsTypeDispatcher.getOptBasicSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode asASTBasicSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicSymbolsNode(node)) {
  Log.error("0x54987x24234 Cannot cast node to type ASTBasicSymbolsNode.");
}
return basicSymbolsTypeDispatcher.getOptASTBasicSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol asDiagram (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDiagram(symbol)) {
  Log.error("0x54987x34388 Cannot cast node to type Diagram.");
}
return basicSymbolsTypeDispatcher.getOptDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.TypeSymbol asType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isType(symbol)) {
  Log.error("0x54987x32193 Cannot cast node to type Type.");
}
return basicSymbolsTypeDispatcher.getOptType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol asTypeVar (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isTypeVar(symbol)) {
  Log.error("0x54987x55366 Cannot cast node to type TypeVar.");
}
return basicSymbolsTypeDispatcher.getOptTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.VariableSymbol asVariable (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isVariable(symbol)) {
  Log.error("0x54987x93155 Cannot cast node to type Variable.");
}
return basicSymbolsTypeDispatcher.getOptVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol asFunction (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isFunction(symbol)) {
  Log.error("0x54987x51135 Cannot cast node to type Function.");
}
return basicSymbolsTypeDispatcher.getOptFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTNameExpression asASTNameExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNameExpression(node)) {
  Log.error("0x54987x80670 Cannot cast node to type ASTNameExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTNameExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpression asASTLiteralExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLiteralExpression(node)) {
  Log.error("0x54987x06708 Cannot cast node to type ASTLiteralExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTLiteralExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTArguments asASTArguments (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTArguments(node)) {
  Log.error("0x54987x98907 Cannot cast node to type ASTArguments.");
}
return expressionsBasisTypeDispatcher.getOptASTArguments();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTExpression asASTExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTExpression(node)) {
  Log.error("0x54987x02029 Cannot cast node to type ASTExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ExpressionsBasisLiterals asExpressionsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isExpressionsBasisLiterals(node)) {
  Log.error("0x54987x97330 Cannot cast node to type ExpressionsBasisLiterals.");
}
return expressionsBasisTypeDispatcher.getOptExpressionsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode asASTExpressionsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTExpressionsBasisNode(node)) {
  Log.error("0x54987x89472 Cannot cast node to type ASTExpressionsBasisNode.");
}
return expressionsBasisTypeDispatcher.getOptASTExpressionsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTStereotype asASTStereotype (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStereotype(node)) {
  Log.error("0x54987x33357 Cannot cast node to type ASTStereotype.");
}
return uMLStereotypeTypeDispatcher.getOptASTStereotype();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTStereoValue asASTStereoValue (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStereoValue(node)) {
  Log.error("0x54987x30050 Cannot cast node to type ASTStereoValue.");
}
return uMLStereotypeTypeDispatcher.getOptASTStereoValue();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.UMLStereotypeLiterals asUMLStereotypeLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isUMLStereotypeLiterals(node)) {
  Log.error("0x54987x38493 Cannot cast node to type UMLStereotypeLiterals.");
}
return uMLStereotypeTypeDispatcher.getOptUMLStereotypeLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTUMLStereotypeNode asASTUMLStereotypeNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTUMLStereotypeNode(node)) {
  Log.error("0x54987x41363 Cannot cast node to type ASTUMLStereotypeNode.");
}
return uMLStereotypeTypeDispatcher.getOptASTUMLStereotypeNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.MCBasicsLiterals asMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicsLiterals(node)) {
  Log.error("0x54987x67718 Cannot cast node to type MCBasicsLiterals.");
}
return mCBasicsTypeDispatcher.getOptMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.ASTMCBasicsNode asASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicsNode(node)) {
  Log.error("0x54987x30392 Cannot cast node to type ASTMCBasicsNode.");
}
return mCBasicsTypeDispatcher.getOptASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTLiteral asASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLiteral(node)) {
  Log.error("0x54987x60628 Cannot cast node to type ASTLiteral.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.MCLiteralsBasisLiterals asMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCLiteralsBasisLiterals(node)) {
  Log.error("0x54987x87969 Cannot cast node to type MCLiteralsBasisLiterals.");
}
return mCLiteralsBasisTypeDispatcher.getOptMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode asASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCLiteralsBasisNode(node)) {
  Log.error("0x54987x44523 Cannot cast node to type ASTMCLiteralsBasisNode.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNullLiteral asASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNullLiteral(node)) {
  Log.error("0x54987x38669 Cannot cast node to type ASTNullLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral asASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanLiteral(node)) {
  Log.error("0x54987x26206 Cannot cast node to type ASTBooleanLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTCharLiteral asASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTCharLiteral(node)) {
  Log.error("0x54987x32734 Cannot cast node to type ASTCharLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral asASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStringLiteral(node)) {
  Log.error("0x54987x32899 Cannot cast node to type ASTStringLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNatLiteral asASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNatLiteral(node)) {
  Log.error("0x54987x40087 Cannot cast node to type ASTNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral asASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNatLiteral(node)) {
  Log.error("0x54987x19429 Cannot cast node to type ASTSignedNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral asASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicLongLiteral(node)) {
  Log.error("0x54987x45824 Cannot cast node to type ASTBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral asASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicLongLiteral(node)) {
  Log.error("0x54987x23996 Cannot cast node to type ASTSignedBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral asASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicFloatLiteral(node)) {
  Log.error("0x54987x19418 Cannot cast node to type ASTBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral asASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicFloatLiteral(node)) {
  Log.error("0x54987x38506 Cannot cast node to type ASTSignedBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral asASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicDoubleLiteral(node)) {
  Log.error("0x54987x51819 Cannot cast node to type ASTBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral asASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicDoubleLiteral(node)) {
  Log.error("0x54987x34937 Cannot cast node to type ASTSignedBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral asASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedLiteral(node)) {
  Log.error("0x54987x91496 Cannot cast node to type ASTSignedLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral asASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNumericLiteral(node)) {
  Log.error("0x54987x59741 Cannot cast node to type ASTNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral asASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNumericLiteral(node)) {
  Log.error("0x54987x49831 Cannot cast node to type ASTSignedNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.MCCommonLiteralsLiterals asMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCCommonLiteralsLiterals(node)) {
  Log.error("0x54987x26544 Cannot cast node to type MCCommonLiteralsLiterals.");
}
return mCCommonLiteralsTypeDispatcher.getOptMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode asASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCCommonLiteralsNode(node)) {
  Log.error("0x54987x98142 Cannot cast node to type ASTMCCommonLiteralsNode.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesArtifactScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsArtifactScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisArtifactScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeArtifactScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsArtifactScope) node);
this.setIsISDBasisArtifactScope(true);
this.setOptISDBasisArtifactScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesGlobalScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsGlobalScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisGlobalScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeGlobalScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope) node);
this.setIsISDBasisGlobalScope(true);
this.setOptISDBasisGlobalScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
this.setIsISDBasisScope(true);
this.setOptISDBasisScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDArtifact(true);
this.setOptASTSDArtifact(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.symbols.basicsymbols._ast.ASTDiagram) node);
this.setIsASTSequenceDiagram(true);
this.setOptASTSequenceDiagram(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDBody(true);
this.setOptASTSDBody(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDModifier) node);
this.setIsASTSDCompleteModifier(true);
this.setOptASTSDCompleteModifier(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDModifier) node);
this.setIsASTSDFreeModifier(true);
this.setOptASTSDFreeModifier(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDModifier) node);
this.setIsASTSDInitialModifier(true);
this.setOptASTSDInitialModifier(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDModifier) node);
this.setIsASTSDVisibleModifier(true);
this.setOptASTSDVisibleModifier(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.symbols.basicsymbols._ast.ASTVariable) node);
this.setIsASTSDObject(true);
this.setOptASTSDObject(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDSource) node);
this.setIsASTSDObjectSource(true);
this.setOptASTSDObjectSource(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDTarget) node);
this.setIsASTSDObjectTarget(true);
this.setOptASTSDObjectTarget(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDInteraction) node);
this.setIsASTSDSendMessage(true);
this.setOptASTSDSendMessage(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDActivityBar(true);
this.setOptASTSDActivityBar(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDModifier node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDModifier(true);
this.setOptASTSDModifier(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDElement node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDElement(true);
this.setOptASTSDElement(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInteraction node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDElement) node);
this.setIsASTSDInteraction(true);
this.setOptASTSDInteraction(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSource node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDSource(true);
this.setOptASTSDSource(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDTarget node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDTarget(true);
this.setOptASTSDTarget(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDAction node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDAction(true);
this.setOptASTSDAction(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.SDBasisLiterals node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsSDBasisLiterals(true);
this.setOptSDBasisLiterals(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDBasisNode(true);
this.setOptASTSDBasisNode(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDArtifact ()

 {
    /* generated by template methods.Get*/

return this.isASTSDArtifact;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDArtifact (boolean isASTSDArtifact)

 {
    /* generated by template methods.Set*/

this.isASTSDArtifact = isASTSDArtifact;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSequenceDiagram ()

 {
    /* generated by template methods.Get*/

return this.isASTSequenceDiagram;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSequenceDiagram (boolean isASTSequenceDiagram)

 {
    /* generated by template methods.Set*/

this.isASTSequenceDiagram = isASTSequenceDiagram;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDBody ()

 {
    /* generated by template methods.Get*/

return this.isASTSDBody;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDBody (boolean isASTSDBody)

 {
    /* generated by template methods.Set*/

this.isASTSDBody = isASTSDBody;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDCompleteModifier ()

 {
    /* generated by template methods.Get*/

return this.isASTSDCompleteModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDCompleteModifier (boolean isASTSDCompleteModifier)

 {
    /* generated by template methods.Set*/

this.isASTSDCompleteModifier = isASTSDCompleteModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDFreeModifier ()

 {
    /* generated by template methods.Get*/

return this.isASTSDFreeModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDFreeModifier (boolean isASTSDFreeModifier)

 {
    /* generated by template methods.Set*/

this.isASTSDFreeModifier = isASTSDFreeModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDInitialModifier ()

 {
    /* generated by template methods.Get*/

return this.isASTSDInitialModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDInitialModifier (boolean isASTSDInitialModifier)

 {
    /* generated by template methods.Set*/

this.isASTSDInitialModifier = isASTSDInitialModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDVisibleModifier ()

 {
    /* generated by template methods.Get*/

return this.isASTSDVisibleModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDVisibleModifier (boolean isASTSDVisibleModifier)

 {
    /* generated by template methods.Set*/

this.isASTSDVisibleModifier = isASTSDVisibleModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDObject ()

 {
    /* generated by template methods.Get*/

return this.isASTSDObject;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDObject (boolean isASTSDObject)

 {
    /* generated by template methods.Set*/

this.isASTSDObject = isASTSDObject;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDObjectSource ()

 {
    /* generated by template methods.Get*/

return this.isASTSDObjectSource;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDObjectSource (boolean isASTSDObjectSource)

 {
    /* generated by template methods.Set*/

this.isASTSDObjectSource = isASTSDObjectSource;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDObjectTarget ()

 {
    /* generated by template methods.Get*/

return this.isASTSDObjectTarget;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDObjectTarget (boolean isASTSDObjectTarget)

 {
    /* generated by template methods.Set*/

this.isASTSDObjectTarget = isASTSDObjectTarget;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDSendMessage ()

 {
    /* generated by template methods.Get*/

return this.isASTSDSendMessage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDSendMessage (boolean isASTSDSendMessage)

 {
    /* generated by template methods.Set*/

this.isASTSDSendMessage = isASTSDSendMessage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDActivityBar ()

 {
    /* generated by template methods.Get*/

return this.isASTSDActivityBar;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDActivityBar (boolean isASTSDActivityBar)

 {
    /* generated by template methods.Set*/

this.isASTSDActivityBar = isASTSDActivityBar;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDModifier ()

 {
    /* generated by template methods.Get*/

return this.isASTSDModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDModifier (boolean isASTSDModifier)

 {
    /* generated by template methods.Set*/

this.isASTSDModifier = isASTSDModifier;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDElement ()

 {
    /* generated by template methods.Get*/

return this.isASTSDElement;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDElement (boolean isASTSDElement)

 {
    /* generated by template methods.Set*/

this.isASTSDElement = isASTSDElement;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDInteraction ()

 {
    /* generated by template methods.Get*/

return this.isASTSDInteraction;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDInteraction (boolean isASTSDInteraction)

 {
    /* generated by template methods.Set*/

this.isASTSDInteraction = isASTSDInteraction;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDSource ()

 {
    /* generated by template methods.Get*/

return this.isASTSDSource;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDSource (boolean isASTSDSource)

 {
    /* generated by template methods.Set*/

this.isASTSDSource = isASTSDSource;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDTarget ()

 {
    /* generated by template methods.Get*/

return this.isASTSDTarget;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDTarget (boolean isASTSDTarget)

 {
    /* generated by template methods.Set*/

this.isASTSDTarget = isASTSDTarget;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDAction ()

 {
    /* generated by template methods.Get*/

return this.isASTSDAction;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDAction (boolean isASTSDAction)

 {
    /* generated by template methods.Set*/

this.isASTSDAction = isASTSDAction;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsSDBasisLiterals ()

 {
    /* generated by template methods.Get*/

return this.isSDBasisLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsSDBasisLiterals (boolean isSDBasisLiterals)

 {
    /* generated by template methods.Set*/

this.isSDBasisLiterals = isSDBasisLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDBasisNode ()

 {
    /* generated by template methods.Get*/

return this.isASTSDBasisNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDBasisNode (boolean isASTSDBasisNode)

 {
    /* generated by template methods.Set*/

this.isASTSDBasisNode = isASTSDBasisNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISDBasisArtifactScope ()

 {
    /* generated by template methods.Get*/

return this.isISDBasisArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISDBasisArtifactScope (boolean isISDBasisArtifactScope)

 {
    /* generated by template methods.Set*/

this.isISDBasisArtifactScope = isISDBasisArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISDBasisGlobalScope ()

 {
    /* generated by template methods.Get*/

return this.isISDBasisGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISDBasisGlobalScope (boolean isISDBasisGlobalScope)

 {
    /* generated by template methods.Set*/

this.isISDBasisGlobalScope = isISDBasisGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISDBasisScope ()

 {
    /* generated by template methods.Get*/

return this.isISDBasisScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISDBasisScope (boolean isISDBasisScope)

 {
    /* generated by template methods.Set*/

this.isISDBasisScope = isISDBasisScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDArtifact getOptASTSDArtifact ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDArtifact()) {
        return this.optASTSDArtifact.get();
    }
    Log.error("0xA7003x52268 get for OptASTSDArtifact can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDArtifact ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDArtifact.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDArtifact (de.monticore.lang.sdbasis._ast.ASTSDArtifact optASTSDArtifact)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDArtifact = Optional.ofNullable(optASTSDArtifact);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDArtifactAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDArtifact = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSequenceDiagram getOptASTSequenceDiagram ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSequenceDiagram()) {
        return this.optASTSequenceDiagram.get();
    }
    Log.error("0xA7003x13574 get for OptASTSequenceDiagram can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSequenceDiagram ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSequenceDiagram.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSequenceDiagram (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram optASTSequenceDiagram)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSequenceDiagram = Optional.ofNullable(optASTSequenceDiagram);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSequenceDiagramAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSequenceDiagram = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBody getOptASTSDBody ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDBody()) {
        return this.optASTSDBody.get();
    }
    Log.error("0xA7003x39956 get for OptASTSDBody can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDBody ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDBody.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDBody (de.monticore.lang.sdbasis._ast.ASTSDBody optASTSDBody)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDBody = Optional.ofNullable(optASTSDBody);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDBodyAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDBody = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier getOptASTSDCompleteModifier ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDCompleteModifier()) {
        return this.optASTSDCompleteModifier.get();
    }
    Log.error("0xA7003x08500 get for OptASTSDCompleteModifier can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDCompleteModifier ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDCompleteModifier.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDCompleteModifier (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier optASTSDCompleteModifier)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDCompleteModifier = Optional.ofNullable(optASTSDCompleteModifier);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDCompleteModifierAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDCompleteModifier = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDFreeModifier getOptASTSDFreeModifier ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDFreeModifier()) {
        return this.optASTSDFreeModifier.get();
    }
    Log.error("0xA7003x94764 get for OptASTSDFreeModifier can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDFreeModifier ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDFreeModifier.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDFreeModifier (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier optASTSDFreeModifier)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDFreeModifier = Optional.ofNullable(optASTSDFreeModifier);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDFreeModifierAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDFreeModifier = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInitialModifier getOptASTSDInitialModifier ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDInitialModifier()) {
        return this.optASTSDInitialModifier.get();
    }
    Log.error("0xA7003x54326 get for OptASTSDInitialModifier can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDInitialModifier ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDInitialModifier.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDInitialModifier (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier optASTSDInitialModifier)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDInitialModifier = Optional.ofNullable(optASTSDInitialModifier);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDInitialModifierAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDInitialModifier = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier getOptASTSDVisibleModifier ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDVisibleModifier()) {
        return this.optASTSDVisibleModifier.get();
    }
    Log.error("0xA7003x60942 get for OptASTSDVisibleModifier can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDVisibleModifier ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDVisibleModifier.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDVisibleModifier (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier optASTSDVisibleModifier)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDVisibleModifier = Optional.ofNullable(optASTSDVisibleModifier);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDVisibleModifierAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDVisibleModifier = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObject getOptASTSDObject ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDObject()) {
        return this.optASTSDObject.get();
    }
    Log.error("0xA7003x55636 get for OptASTSDObject can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDObject ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDObject.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObject (de.monticore.lang.sdbasis._ast.ASTSDObject optASTSDObject)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDObject = Optional.ofNullable(optASTSDObject);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObjectAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDObject = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectSource getOptASTSDObjectSource ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDObjectSource()) {
        return this.optASTSDObjectSource.get();
    }
    Log.error("0xA7003x29484 get for OptASTSDObjectSource can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDObjectSource ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDObjectSource.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObjectSource (de.monticore.lang.sdbasis._ast.ASTSDObjectSource optASTSDObjectSource)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDObjectSource = Optional.ofNullable(optASTSDObjectSource);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObjectSourceAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDObjectSource = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectTarget getOptASTSDObjectTarget ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDObjectTarget()) {
        return this.optASTSDObjectTarget.get();
    }
    Log.error("0xA7003x95884 get for OptASTSDObjectTarget can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDObjectTarget ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDObjectTarget.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObjectTarget (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget optASTSDObjectTarget)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDObjectTarget = Optional.ofNullable(optASTSDObjectTarget);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDObjectTargetAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDObjectTarget = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSendMessage getOptASTSDSendMessage ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDSendMessage()) {
        return this.optASTSDSendMessage.get();
    }
    Log.error("0xA7003x34686 get for OptASTSDSendMessage can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDSendMessage ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDSendMessage.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDSendMessage (de.monticore.lang.sdbasis._ast.ASTSDSendMessage optASTSDSendMessage)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDSendMessage = Optional.ofNullable(optASTSDSendMessage);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDSendMessageAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDSendMessage = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDActivityBar getOptASTSDActivityBar ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDActivityBar()) {
        return this.optASTSDActivityBar.get();
    }
    Log.error("0xA7003x47592 get for OptASTSDActivityBar can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDActivityBar ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDActivityBar.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDActivityBar (de.monticore.lang.sdbasis._ast.ASTSDActivityBar optASTSDActivityBar)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDActivityBar = Optional.ofNullable(optASTSDActivityBar);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDActivityBarAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDActivityBar = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier getOptASTSDModifier ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDModifier()) {
        return this.optASTSDModifier.get();
    }
    Log.error("0xA7003x90580 get for OptASTSDModifier can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDModifier ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDModifier.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDModifier (de.monticore.lang.sdbasis._ast.ASTSDModifier optASTSDModifier)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDModifier = Optional.ofNullable(optASTSDModifier);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDModifierAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDModifier = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDElement getOptASTSDElement ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDElement()) {
        return this.optASTSDElement.get();
    }
    Log.error("0xA7003x40648 get for OptASTSDElement can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDElement ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDElement.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDElement (de.monticore.lang.sdbasis._ast.ASTSDElement optASTSDElement)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDElement = Optional.ofNullable(optASTSDElement);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDElementAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDElement = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInteraction getOptASTSDInteraction ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDInteraction()) {
        return this.optASTSDInteraction.get();
    }
    Log.error("0xA7003x32572 get for OptASTSDInteraction can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDInteraction ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDInteraction.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDInteraction (de.monticore.lang.sdbasis._ast.ASTSDInteraction optASTSDInteraction)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDInteraction = Optional.ofNullable(optASTSDInteraction);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDInteractionAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDInteraction = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSource getOptASTSDSource ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDSource()) {
        return this.optASTSDSource.get();
    }
    Log.error("0xA7003x79596 get for OptASTSDSource can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDSource ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDSource.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDSource (de.monticore.lang.sdbasis._ast.ASTSDSource optASTSDSource)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDSource = Optional.ofNullable(optASTSDSource);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDSourceAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDSource = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDTarget getOptASTSDTarget ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDTarget()) {
        return this.optASTSDTarget.get();
    }
    Log.error("0xA7003x00148 get for OptASTSDTarget can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDTarget ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDTarget.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDTarget (de.monticore.lang.sdbasis._ast.ASTSDTarget optASTSDTarget)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDTarget = Optional.ofNullable(optASTSDTarget);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDTargetAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDTarget = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDAction getOptASTSDAction ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDAction()) {
        return this.optASTSDAction.get();
    }
    Log.error("0xA7003x66100 get for OptASTSDAction can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDAction ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDAction.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDAction (de.monticore.lang.sdbasis._ast.ASTSDAction optASTSDAction)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDAction = Optional.ofNullable(optASTSDAction);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDActionAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDAction = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.SDBasisLiterals getOptSDBasisLiterals ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptSDBasisLiterals()) {
        return this.optSDBasisLiterals.get();
    }
    Log.error("0xA7003x85588 get for OptSDBasisLiterals can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptSDBasisLiterals ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optSDBasisLiterals.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptSDBasisLiterals (de.monticore.lang.sdbasis._ast.SDBasisLiterals optSDBasisLiterals)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optSDBasisLiterals = Optional.ofNullable(optSDBasisLiterals);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptSDBasisLiteralsAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optSDBasisLiterals = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBasisNode getOptASTSDBasisNode ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDBasisNode()) {
        return this.optASTSDBasisNode.get();
    }
    Log.error("0xA7003x76960 get for OptASTSDBasisNode can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDBasisNode ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDBasisNode.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDBasisNode (de.monticore.lang.sdbasis._ast.ASTSDBasisNode optASTSDBasisNode)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDBasisNode = Optional.ofNullable(optASTSDBasisNode);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDBasisNodeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDBasisNode = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope getOptISDBasisArtifactScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISDBasisArtifactScope()) {
        return this.optISDBasisArtifactScope.get();
    }
    Log.error("0xA7003x31464 get for OptISDBasisArtifactScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISDBasisArtifactScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISDBasisArtifactScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisArtifactScope (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope optISDBasisArtifactScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISDBasisArtifactScope = Optional.ofNullable(optISDBasisArtifactScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisArtifactScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISDBasisArtifactScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope getOptISDBasisGlobalScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISDBasisGlobalScope()) {
        return this.optISDBasisGlobalScope.get();
    }
    Log.error("0xA7003x59672 get for OptISDBasisGlobalScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISDBasisGlobalScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISDBasisGlobalScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisGlobalScope (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope optISDBasisGlobalScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISDBasisGlobalScope = Optional.ofNullable(optISDBasisGlobalScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisGlobalScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISDBasisGlobalScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisScope getOptISDBasisScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISDBasisScope()) {
        return this.optISDBasisScope.get();
    }
    Log.error("0xA7003x28360 get for OptISDBasisScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISDBasisScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISDBasisScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisScope (de.monticore.lang.sdbasis._symboltable.ISDBasisScope optISDBasisScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISDBasisScope = Optional.ofNullable(optISDBasisScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISDBasisScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISDBasisScope = Optional.empty();

}


}


