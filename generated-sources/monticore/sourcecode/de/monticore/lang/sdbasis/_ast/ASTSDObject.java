/* generated from model SDBasis */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._ast;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;

import de.monticore.ast.ASTCNode;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;


/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class ASTSDObject extends ASTCNode  implements de.monticore.symbols.basicsymbols._ast.ASTVariable,de.monticore.lang.sdbasis._ast.ASTSDBasisNode {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.umlstereotype._ast.ASTStereotype> stereotype
  = Optional.empty()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> mCObjectType
  = Optional.empty()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  String name
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> symbol
  = Optional.empty()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope
  
;


    /* generated by template cd2java.Constructor*/
 protected  ASTSDObject()
 {
  /* generated by template cd2java.EmptyBody*/
// empty body

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o)

 {
         return deepEquals(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithOrder*/

      ASTSDObject comp;
    if ((o instanceof ASTSDObject)) {
      comp = (ASTSDObject) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing stereotype   
    if ( this.stereotype.isPresent() != comp.stereotype.isPresent() ||
      (this.stereotype.isPresent() && !this.stereotype.get().deepEquals(comp.stereotype.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing sDModifiers
    if (this.sDModifiers.size() != comp.sDModifiers.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it1 = this.sDModifiers.iterator();
        Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it2 = comp.sDModifiers.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it1 = this.sDModifiers.iterator();
        while (it1.hasNext()) {
          de.monticore.lang.sdbasis._ast.ASTSDModifier oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it2 = comp.sDModifiers.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing mCObjectType   
    if ( this.mCObjectType.isPresent() != comp.mCObjectType.isPresent() ||
      (this.mCObjectType.isPresent() && !this.mCObjectType.get().deepEquals(comp.mCObjectType.get(), forceSameOrder)) ) {
      return false;
    }
    return true;     


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o)

 {
         return deepEqualsWithComments(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithComments*/

      ASTSDObject comp;
    if ((o instanceof ASTSDObject)) {
      comp = (ASTSDObject) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing stereotype
    if ( this.stereotype.isPresent() != comp.stereotype.isPresent() ||
      (this.stereotype.isPresent() && !this.stereotype.get().deepEqualsWithComments(comp.stereotype.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing sDModifiers
    if (this.sDModifiers.size() != comp.sDModifiers.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it1 = this.sDModifiers.iterator();
        Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it2 = comp.sDModifiers.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it1 = this.sDModifiers.iterator();
        while (it1.hasNext()) {
          de.monticore.lang.sdbasis._ast.ASTSDModifier oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> it2 = comp.sDModifiers.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing mCObjectType
    if ( this.mCObjectType.isPresent() != comp.mCObjectType.isPresent() ||
      (this.mCObjectType.isPresent() && !this.mCObjectType.get().deepEqualsWithComments(comp.mCObjectType.get(), forceSameOrder)) ) {
      return false;
    }
    return true;     

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalAttributes (Object o)

 {
    /* generated by template data.EqualAttributes*/

      ASTSDObject comp;
    if ((o instanceof ASTSDObject)) {
      comp = (ASTSDObject) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsWithComments (Object o)

 {
    /* generated by template data.EqualsWithComments*/

      ASTSDObject comp;
    if ((o instanceof ASTSDObject)) {
      comp = (ASTSDObject) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTSDObject deepClone ()

 {
        return deepClone(_construct());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTSDObject deepClone (ASTSDObject result)

 {
    /* generated by template data.DeepCloneWithParameters*/


  result.set_SourcePositionStart(get_SourcePositionStart().clone());
  result.set_SourcePositionEnd(get_SourcePositionEnd().clone());
  for (de.monticore.ast.Comment x : get_PreCommentList()) {
    result.get_PreCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }
  for (de.monticore.ast.Comment x : get_PostCommentList()) {
    result.get_PostCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }

    if (isPresentStereotype()){
      result.setStereotype(getStereotype().deepClone());
    } else {
      result.setStereotypeAbsent();
    }
      getSDModifierList().forEach(s -> result.sDModifiers.add(s.deepClone()));
    if (isPresentMCObjectType()){
      result.setMCObjectType(getMCObjectType().deepClone());
    } else {
      result.setMCObjectTypeAbsent();
    }
      result.setName(getName());
    
    return result;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTStereotype getStereotype ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentStereotype()) {
        return this.stereotype.get();
    }
    Log.error("0xA7003x96152 get for Stereotype can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentStereotype ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.stereotype.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsSDModifier (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllSDModifiers (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptySDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iteratorSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier[] toArraySDModifiers (de.monticore.lang.sdbasis._ast.ASTSDModifier[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArraySDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> spliteratorSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> streamSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> parallelStreamSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier getSDModifier (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfSDModifier (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfSDModifier (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsSDModifiers (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.lang.sdbasis._ast.ASTSDModifier> subListSDModifiers (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.lang.sdbasis._ast.ASTSDModifier> getSDModifierList ()

 {
    /* generated by template methods.Get*/

return this.sDModifiers;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentMCObjectType()) {
        return this.mCObjectType.get();
    }
    Log.error("0xA7003x95218 get for MCObjectType can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentMCObjectType ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.mCObjectType.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String getName ()

 {
    /* generated by template methods.Get*/

return this.name;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setStereotype (de.monticore.umlstereotype._ast.ASTStereotype stereotype)

 {
    /* generated by template methods.opt.Set4Opt*/

this.stereotype = Optional.ofNullable(stereotype);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setStereotypeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.stereotype = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearSDModifiers ()

 {
    /* generated by template methods.MethodDelegate*/

this.getSDModifierList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addSDModifier (de.monticore.lang.sdbasis._ast.ASTSDModifier element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllSDModifiers (Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeSDModifier (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllSDModifiers (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllSDModifiers (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfSDModifier (Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachSDModifiers (Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getSDModifierList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addSDModifier (int index,de.monticore.lang.sdbasis._ast.ASTSDModifier element)

 {
    /* generated by template methods.MethodDelegate*/

this.getSDModifierList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllSDModifiers (int index,Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier removeSDModifier (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier setSDModifier (int index,de.monticore.lang.sdbasis._ast.ASTSDModifier element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getSDModifierList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllSDModifiers (UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDModifier> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getSDModifierList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortSDModifiers (Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getSDModifierList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSDModifierList (List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers)

 {
    /* generated by template methods.Set*/

this.sDModifiers = sDModifiers;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCObjectType (de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType)

 {
    /* generated by template methods.opt.Set4Opt*/

this.mCObjectType = Optional.ofNullable(mCObjectType);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCObjectTypeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.mCObjectType = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setName (String name)

 {
    /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor)

 {
    /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x71957 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x78027 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x45001 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x25468 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.umlstereotype._visitor.UMLStereotypeTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x51796 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x16372 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x94088 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
    /* generated by template data.AcceptSuper*/

  if (visitor instanceof de.monticore.lang.sdbasis._visitor.SDBasisTraverser) {
    accept((de.monticore.lang.sdbasis._visitor.SDBasisTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0x70000x83876 AST node type ASTSDObject expected a visitor of type de.monticore.lang.sdbasis._visitor.SDBasisTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on Symbols containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  ASTSDObject _construct ()

 {
    return de.monticore.lang.sdbasis.SDBasisMill.sDObjectBuilder().uncheckedBuild();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getSymbol ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentSymbol()) {
        return this.symbol.get();
    }
    Log.error("0xA7003x86918 get for Symbol can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentSymbol ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.symbol.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSymbol (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)

 {
    /* generated by template methods.opt.Set4Opt*/

this.symbol = Optional.ofNullable(symbol);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSymbolAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.symbol = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope ()

 {
    /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope)

 {
    /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.umlstereotype._symboltable.IUMLStereotypeScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof de.monticore.lang.sdbasis._symboltable.ISDBasisScope){
    this.enclosingScope = (de.monticore.lang.sdbasis._symboltable.ISDBasisScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x06574 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type de.monticore.lang.sdbasis._symboltable.ISDBasisScope. Please call the Method setEnclosingScope with a parameter form type de.monticore.lang.sdbasis._symboltable.ISDBasisScope");
  }
}


}


