/* generated from model SDBasis */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._symboltable;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SDBasisSymbols2Json  implements de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symboltable.serialization.IDeSer<de.monticore.lang.sdbasis._symboltable.ISDBasisScope, de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope, SDBasisSymbols2Json> scopeDeSer
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  SDBasisSymbols2Json realThis
  = (SDBasisSymbols2Json) this
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symboltable.serialization.JsonPrinter printer
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  SDBasisSymbols2Json()
 {
  this(de.monticore.lang.sdbasis.SDBasisMill.traverser(), new de.monticore.symboltable.serialization.JsonPrinter());
traverser.add4SDBasis(this);
traverser.add4MCBasicTypes(new de.monticore.types.mcbasictypes._symboltable.MCBasicTypesSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4BasicSymbols(new de.monticore.symbols.basicsymbols._symboltable.BasicSymbolsSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4ExpressionsBasis(new de.monticore.expressions.expressionsbasis._symboltable.ExpressionsBasisSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4UMLStereotype(new de.monticore.umlstereotype._symboltable.UMLStereotypeSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4MCBasics(new de.monticore.mcbasics._symboltable.MCBasicsSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4MCLiteralsBasis(new de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisSymbols2Json(getTraverser(), getJsonPrinter()));
traverser.add4MCCommonLiterals(new de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsSymbols2Json(getTraverser(), getJsonPrinter()));

}

    /* generated by template cd2java.Constructor*/
 public  SDBasisSymbols2Json(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser,de.monticore.symboltable.serialization.JsonPrinter printer)
 {
  this.printer = printer;
this.traverser = traverser;
init();
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  SDBasisSymbols2Json getRealThis ()

 {
    /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setRealThis (SDBasisSymbols2Json realThis)

 {
    /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symboltable.serialization.JsonPrinter getJsonPrinter ()

 {
    return this.printer;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setJsonPrinter (de.monticore.symboltable.serialization.JsonPrinter printer)

 {
    this.printer=printer;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String serialize (de.monticore.lang.sdbasis._symboltable.ISDBasisScope toSerialize)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Serialize4Symbols2Json*/
this.getJsonPrinter().clearBuffer();
toSerialize.accept(this.getTraverser());
String serialized = this.getJsonPrinter().getContent();
return serialized;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String serialize (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope toSerialize)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Serialize4Symbols2Json*/
this.getJsonPrinter().clearBuffer();
toSerialize.accept(this.getTraverser());
String serialized = this.getJsonPrinter().getContent();
return serialized;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope deserialize (String serialized)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Deserialize*/

de.monticore.symboltable.serialization.json.JsonObject scope =
  de.monticore.symboltable.serialization.JsonParser.parseJsonObject(serialized);
return scopeDeSer.deserializeArtifactScope(scope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void init ()

 {
    /* generated by template _symboltable.serialization.symbols2Json.Init*/

  de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope gs = de.monticore.lang.sdbasis.SDBasisMill.globalScope();
  scopeDeSer = gs.getDeSer();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String getSerializedString ()

 {
    return getJsonPrinter().getContent();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load (java.net.URL url)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(url);

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load (java.io.Reader reader)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(reader);

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load (String model)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Load2*/

//1. load content of file at given location as String
String serialized = de.monticore.io.FileReaderWriter.readFromFile(java.nio.file.Paths.get(model));

//2. deserialize String to an artifact scope and add to enclosing scope
return this.deserialize(serialized);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String store (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope scope,String fileName)

 {
    /* generated by template _symboltable.serialization.symbols2Json.Store*/

  getJsonPrinter().clearBuffer();
  scope.accept(getTraverser());
  String serialized = getJsonPrinter().getContent();
  de.monticore.io.FileReaderWriter.storeInFile(java.nio.file.Paths.get(fileName), serialized);
  return serialized;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _symboltable.serialization.symbols2Json.VisitScope4STP*/


for (de.monticore.symboltable.IScope scope : node.getSubScopes()) {
  if (!scope.isPresentSpanningSymbol() || !scope.isExportingSymbols()) {
    getTraverser().addTraversedElement(scope);
  }
}
if(getJsonPrinter().toString().isEmpty()){
  getJsonPrinter().beginObject();
} else{
  getJsonPrinter().beginObject(de.monticore.symboltable.serialization.JsonDeSers.SPANNED_SCOPE);
}
scopeDeSer.serialize(node, getRealThis());
getJsonPrinter().beginArray(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _symboltable.serialization.symbols2Json.EndVisit4Scope*/


getJsonPrinter().endArray();
scopeDeSer.serializeAddons(node, getRealThis());
getJsonPrinter().endObject();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _symboltable.serialization.symbols2Json.VisitArtifactScope*/


  for (de.monticore.symboltable.IScope scope : node.getSubScopes()) {
    if (!scope.isPresentSpanningSymbol() || !scope.isExportingSymbols()) {
      getTraverser().addTraversedElement(scope);
    }
  }
  getJsonPrinter().beginObject();
  scopeDeSer.serialize(node, getRealThis());
  getJsonPrinter().beginArray(de.monticore.symboltable.serialization.JsonDeSers.SYMBOLS);


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _symboltable.serialization.symbols2Json.EndVisit4Scope*/


getJsonPrinter().endArray();
scopeDeSer.serializeAddons(node, getRealThis());
getJsonPrinter().endObject();
}


}


