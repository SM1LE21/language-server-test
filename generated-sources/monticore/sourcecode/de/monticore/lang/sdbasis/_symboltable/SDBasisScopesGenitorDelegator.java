/* generated from model SDBasis */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._symboltable;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SDBasisScopesGenitorDelegator  {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Deque<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> scopeStack
  = new java.util.ArrayDeque<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  final  SDBasisScopesGenitor symbolTable
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope globalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  SDBasisScopesGenitorDelegator()
 {
  /* generated by template _symboltable.scopesgenitordelegator.ConstructorScopesGenitorDelegator*/

  this.globalScope = de.monticore.lang.sdbasis.SDBasisMill.globalScope();
  this.traverser = de.monticore.lang.sdbasis.SDBasisMill.traverser();
  this.scopeStack.push(this.globalScope);
  de.monticore.types.mcbasictypes._symboltable.MCBasicTypesScopesGenitor mCBasicTypesScopesGenitor = de.monticore.types.mcbasictypes.MCBasicTypesMill.scopesGenitor();
  mCBasicTypesScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCBasicTypes(mCBasicTypesScopesGenitor);
  traverser.setMCBasicTypesHandler(mCBasicTypesScopesGenitor);

  de.monticore.symbols.basicsymbols._symboltable.BasicSymbolsScopesGenitor basicSymbolsScopesGenitor = de.monticore.symbols.basicsymbols.BasicSymbolsMill.scopesGenitor();
  basicSymbolsScopesGenitor.setScopeStack(scopeStack);
  traverser.add4BasicSymbols(basicSymbolsScopesGenitor);
  traverser.setBasicSymbolsHandler(basicSymbolsScopesGenitor);

  de.monticore.expressions.expressionsbasis._symboltable.ExpressionsBasisScopesGenitor expressionsBasisScopesGenitor = de.monticore.expressions.expressionsbasis.ExpressionsBasisMill.scopesGenitor();
  expressionsBasisScopesGenitor.setScopeStack(scopeStack);
  traverser.add4ExpressionsBasis(expressionsBasisScopesGenitor);
  traverser.setExpressionsBasisHandler(expressionsBasisScopesGenitor);

  de.monticore.umlstereotype._symboltable.UMLStereotypeScopesGenitor uMLStereotypeScopesGenitor = de.monticore.umlstereotype.UMLStereotypeMill.scopesGenitor();
  uMLStereotypeScopesGenitor.setScopeStack(scopeStack);
  traverser.add4UMLStereotype(uMLStereotypeScopesGenitor);
  traverser.setUMLStereotypeHandler(uMLStereotypeScopesGenitor);

  de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisScopesGenitor mCLiteralsBasisScopesGenitor = de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill.scopesGenitor();
  mCLiteralsBasisScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCLiteralsBasis(mCLiteralsBasisScopesGenitor);
  traverser.setMCLiteralsBasisHandler(mCLiteralsBasisScopesGenitor);

  de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsScopesGenitor mCCommonLiteralsScopesGenitor = de.monticore.literals.mccommonliterals.MCCommonLiteralsMill.scopesGenitor();
  mCCommonLiteralsScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCCommonLiterals(mCCommonLiteralsScopesGenitor);
  traverser.setMCCommonLiteralsHandler(mCCommonLiteralsScopesGenitor);

  symbolTable = de.monticore.lang.sdbasis.SDBasisMill.scopesGenitor();
  symbolTable.setScopeStack(scopeStack);
  traverser.add4SDBasis(symbolTable);
  traverser.setSDBasisHandler(symbolTable);
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope createFromAST (de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode)

 {
    /* generated by template _symboltable.scopesgenitordelegator.CreateFromASTDelegator*/

  de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope as =  symbolTable.createFromAST(rootNode);
  if (as.isPresentName()){
    if (!as.getPackageName().isEmpty()){
      globalScope.addLoadedFile(as.getPackageName() + "." + as.getName());
    } else {
      globalScope.addLoadedFile(as.getName());
    }
  }
  return as;
}


}


