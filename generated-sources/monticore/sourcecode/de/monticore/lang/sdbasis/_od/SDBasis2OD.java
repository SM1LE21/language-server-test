/* generated from model SDBasis */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._od;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SDBasis2OD  implements de.monticore.lang.sdbasis._visitor.SDBasisVisitor2,de.monticore.lang.sdbasis._visitor.SDBasisHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.prettyprint.IndentPrinter pp
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyOptional
  = false;
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyList
  = false;
;


    /* generated by template cd2java.Constructor*/
 public  SDBasis2OD(de.monticore.prettyprint.IndentPrinter printer,de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting)
 {
  /* generated by template _od.ConstructorOD*/
  this.reporting = reporting;
  this.pp = printer;
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDArtifact");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentPackageDeclaration()) {
    pp.print("packageDeclaration");
    pp.print(" = ");
    node.getPackageDeclaration().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("packageDeclaration = absent;");
  }
  {
    Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iter_mCImportStatements = node.getMCImportStatementList().iterator();
    boolean isEmpty = true;
    if (iter_mCImportStatements.hasNext()) {
      pp.print("mCImportStatements");
      pp.print(" = [");
      pp.println("// *size: " + node.getMCImportStatementList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("mCImportStatements");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_mCImportStatements.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_mCImportStatements.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  if (null != node.getSequenceDiagram()) {
    pp.print("sequenceDiagram");
    pp.print(" = ");
    node.getSequenceDiagram().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSequenceDiagram");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentStereotype()) {
    pp.print("stereotype");
    pp.print(" = ");
    node.getStereotype().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("stereotype = absent;");
  }
  {
    Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
    boolean isEmpty = true;
    if (iter_sDModifiers.hasNext()) {
      pp.print("sDModifiers");
      pp.print(" = [");
      pp.println("// *size: " + node.getSDModifierList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("sDModifiers");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_sDModifiers.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_sDModifiers.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.lang.sdbasis._ast.ASTSDObject> iter_sDObjects = node.getSDObjectList().iterator();
    boolean isEmpty = true;
    if (iter_sDObjects.hasNext()) {
      pp.print("sDObjects");
      pp.print(" = [");
      pp.println("// *size: " + node.getSDObjectList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("sDObjects");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_sDObjects.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_sDObjects.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  if (null != node.getSDBody()) {
    pp.print("sDBody");
    pp.print(" = ");
    node.getSDBody().accept(getTraverser());
    pp.println(";");
  }
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDBody");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  String spannedScopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope()));
  pp.println("spanningScope = " + spannedScopeName + ";");
  {
    Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
    boolean isEmpty = true;
    if (iter_sDElements.hasNext()) {
      pp.print("sDElements");
      pp.print(" = [");
      pp.println("// *size: " + node.getSDElementList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("sDElements");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_sDElements.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_sDElements.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDFreeModifier");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDInitialModifier");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDObject");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentStereotype()) {
    pp.print("stereotype");
    pp.print(" = ");
    node.getStereotype().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("stereotype = absent;");
  }
  {
    Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
    boolean isEmpty = true;
    if (iter_sDModifiers.hasNext()) {
      pp.print("sDModifiers");
      pp.print(" = [");
      pp.println("// *size: " + node.getSDModifierList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("sDModifiers");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_sDModifiers.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_sDModifiers.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  if (node.isPresentMCObjectType()) {
    pp.print("mCObjectType");
    pp.print(" = ");
    node.getMCObjectType().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("mCObjectType = absent;");
  }
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDObjectSource");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDObjectTarget");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDSendMessage");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentSDSource()) {
    pp.print("sDSource");
    pp.print(" = ");
    node.getSDSource().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDSource = absent;");
  }
  if (node.isPresentSDTarget()) {
    pp.print("sDTarget");
    pp.print(" = ");
    node.getSDTarget().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDTarget = absent;");
  }
  if (null != node.getSDAction()) {
    pp.print("sDAction");
    pp.print(" = ");
    node.getSDAction().accept(getTraverser());
    pp.println(";");
  }
  if (node.isPresentSDActivityBar()) {
    pp.print("sDActivityBar");
    pp.print(" = ");
    node.getSDActivityBar().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDActivityBar = absent;");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sdbasis._ast.ASTSDActivityBar");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
    boolean isEmpty = true;
    if (iter_sDElements.hasNext()) {
      pp.print("sDElements");
      pp.print(" = [");
      pp.println("// *size: " + node.getSDElementList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("sDElements");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_sDElements.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_sDElements.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printAttribute (String name,String value)

 {
    /* generated by template _od.PrintAttribute*/
  pp.print(name);
  pp.print(" = ");
  pp.print(value);
  pp.println(";");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printObject (String objName,String objType)

 {
    /* generated by template _od.PrintObject*/
pp.print(objName);
pp.print(":");
pp.print(de.se_rwth.commons.Names.getSimpleName(objType));
pp.println(" {");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String printObjectDiagram (String modelName,de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template _od.PrintObjectDiagram*/
  pp.clearBuffer();
  pp.setIndentLength(2);
  pp.print("objectdiagram ");
  pp.print(modelName);
  pp.println(" {");
  pp.indent();
  node.accept(getTraverser());
  pp.print(";");
  pp.unindent();
  pp.println("}");
  return pp.getContent();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyOptional ()

 {
    /* generated by template methods.Get*/

return this.printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyOptional (boolean printEmptyOptional)

 {
    /* generated by template methods.Set*/

this.printEmptyOptional = printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyList ()

 {
    /* generated by template methods.Get*/

return this.printEmptyList;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyList (boolean printEmptyList)

 {
    /* generated by template methods.Set*/

this.printEmptyList = printEmptyList;

}


}


