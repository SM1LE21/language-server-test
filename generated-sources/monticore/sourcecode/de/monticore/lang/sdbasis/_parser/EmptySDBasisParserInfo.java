/* generated by template parser.EmptyParserInfo*/

package de.monticore.lang.sdbasis._parser;

import java.util.*;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCBasicTypes;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForBasicSymbols;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForExpressionsBasis;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForUMLStereotype;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCBasics;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCLiteralsBasis;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCCommonLiterals;
import de.monticore.types.mcbasictypes._parser.MCBasicTypesParserInfo;
import de.monticore.symbols.basicsymbols._parser.BasicSymbolsParserInfo;
import de.monticore.expressions.expressionsbasis._parser.ExpressionsBasisParserInfo;
import de.monticore.umlstereotype._parser.UMLStereotypeParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;

/**
 * Implementation of SDBasisParserInfo where every method returns false.
 * This is used in the static delegate pattern as the superclass for the ParserInfoForSuperLang classes.
 * Therefore, the ParserInfoForSuperLang classes don't have to know all symbol references and usage names that are used in a super-language, but not in the sub-language.
 */
public abstract class EmptySDBasisParserInfo extends SDBasisParserInfo{
    @Override
    protected boolean _stateReferencesVariableSymbol(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePackageDeclaration(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCImportStatement(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSequenceDiagram(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameStereotype(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDModifier(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDObject(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDBody(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDElement(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCObjectType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDSource(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDTarget(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDAction(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDActivityBar(int state){
      return false;
    }


  protected boolean _stateDefinesName(int state){
    return false;
  }
}
