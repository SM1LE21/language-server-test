/* generated by template parser.ParserInfo*/

package de.monticore.lang.sdbasis._parser;

import java.util.*;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCBasicTypes;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForBasicSymbols;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForExpressionsBasis;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForUMLStereotype;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCBasics;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCLiteralsBasis;
import de.monticore.lang.sdbasis._parser._auxiliary.SDBasisParserInfoForMCCommonLiterals;
import de.monticore.types.mcbasictypes._parser.MCBasicTypesParserInfo;
import de.monticore.symbols.basicsymbols._parser.BasicSymbolsParserInfo;
import de.monticore.expressions.expressionsbasis._parser.ExpressionsBasisParserInfo;
import de.monticore.umlstereotype._parser.UMLStereotypeParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;

public class SDBasisParserInfo {
  // References
  protected static Set<Integer> statesReferencingVariable = Collections.emptySet();

  // Usage names
  protected static Set<Integer> statesWithUsageNamePackageDeclaration = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCImportStatement = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSequenceDiagram = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameStereotype = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDModifier = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameName = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDObject = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDBody = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDElement = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCObjectType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDSource = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDTarget = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDAction = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDActivityBar = Collections.emptySet();

  // Named defining
  protected static Set<Integer> statesDefiningName = Collections.emptySet();
  protected static SDBasisParserInfo delegate;

  protected static SDBasisParserInfo getDelegate(){
      if(delegate == null){
        init();
      }
      return delegate;
  }


  public static void init(){
    delegate = new SDBasisParserInfo();
    MCBasicTypesParserInfo.initMe(new SDBasisParserInfoForMCBasicTypes());
    BasicSymbolsParserInfo.initMe(new SDBasisParserInfoForBasicSymbols());
    ExpressionsBasisParserInfo.initMe(new SDBasisParserInfoForExpressionsBasis());
    UMLStereotypeParserInfo.initMe(new SDBasisParserInfoForUMLStereotype());
    MCBasicsParserInfo.initMe(new SDBasisParserInfoForMCBasics());
    MCLiteralsBasisParserInfo.initMe(new SDBasisParserInfoForMCLiteralsBasis());
    MCCommonLiteralsParserInfo.initMe(new SDBasisParserInfoForMCCommonLiterals());
  }

  public static void initMe(SDBasisParserInfo _delegate){
    delegate = _delegate;
  }

  public static boolean stateReferencesVariableSymbol(int state){
    return getDelegate()._stateReferencesVariableSymbol(state);
  }

  protected boolean _stateReferencesVariableSymbol(int state){
    return statesReferencingVariable.contains(state);
  }

  public static boolean stateHasUsageNamePackageDeclaration(int state){
    return getDelegate()._stateHasUsageNamePackageDeclaration(state);
  }

  protected boolean _stateHasUsageNamePackageDeclaration(int state){
    return statesWithUsageNamePackageDeclaration.contains(state);
  }

  public static boolean stateHasUsageNameMCImportStatement(int state){
    return getDelegate()._stateHasUsageNameMCImportStatement(state);
  }

  protected boolean _stateHasUsageNameMCImportStatement(int state){
    return statesWithUsageNameMCImportStatement.contains(state);
  }

  public static boolean stateHasUsageNameSequenceDiagram(int state){
    return getDelegate()._stateHasUsageNameSequenceDiagram(state);
  }

  protected boolean _stateHasUsageNameSequenceDiagram(int state){
    return statesWithUsageNameSequenceDiagram.contains(state);
  }

  public static boolean stateHasUsageNameStereotype(int state){
    return getDelegate()._stateHasUsageNameStereotype(state);
  }

  protected boolean _stateHasUsageNameStereotype(int state){
    return statesWithUsageNameStereotype.contains(state);
  }

  public static boolean stateHasUsageNameSDModifier(int state){
    return getDelegate()._stateHasUsageNameSDModifier(state);
  }

  protected boolean _stateHasUsageNameSDModifier(int state){
    return statesWithUsageNameSDModifier.contains(state);
  }

  public static boolean stateHasUsageNameName(int state){
    return getDelegate()._stateHasUsageNameName(state);
  }

  protected boolean _stateHasUsageNameName(int state){
    return statesWithUsageNameName.contains(state);
  }

  public static boolean stateHasUsageNameSDObject(int state){
    return getDelegate()._stateHasUsageNameSDObject(state);
  }

  protected boolean _stateHasUsageNameSDObject(int state){
    return statesWithUsageNameSDObject.contains(state);
  }

  public static boolean stateHasUsageNameSDBody(int state){
    return getDelegate()._stateHasUsageNameSDBody(state);
  }

  protected boolean _stateHasUsageNameSDBody(int state){
    return statesWithUsageNameSDBody.contains(state);
  }

  public static boolean stateHasUsageNameSDElement(int state){
    return getDelegate()._stateHasUsageNameSDElement(state);
  }

  protected boolean _stateHasUsageNameSDElement(int state){
    return statesWithUsageNameSDElement.contains(state);
  }

  public static boolean stateHasUsageNameMCObjectType(int state){
    return getDelegate()._stateHasUsageNameMCObjectType(state);
  }

  protected boolean _stateHasUsageNameMCObjectType(int state){
    return statesWithUsageNameMCObjectType.contains(state);
  }

  public static boolean stateHasUsageNameSDSource(int state){
    return getDelegate()._stateHasUsageNameSDSource(state);
  }

  protected boolean _stateHasUsageNameSDSource(int state){
    return statesWithUsageNameSDSource.contains(state);
  }

  public static boolean stateHasUsageNameSDTarget(int state){
    return getDelegate()._stateHasUsageNameSDTarget(state);
  }

  protected boolean _stateHasUsageNameSDTarget(int state){
    return statesWithUsageNameSDTarget.contains(state);
  }

  public static boolean stateHasUsageNameSDAction(int state){
    return getDelegate()._stateHasUsageNameSDAction(state);
  }

  protected boolean _stateHasUsageNameSDAction(int state){
    return statesWithUsageNameSDAction.contains(state);
  }

  public static boolean stateHasUsageNameSDActivityBar(int state){
    return getDelegate()._stateHasUsageNameSDActivityBar(state);
  }

  protected boolean _stateHasUsageNameSDActivityBar(int state){
    return statesWithUsageNameSDActivityBar.contains(state);
  }

  public static boolean stateDefinesName(int state){
    return getDelegate()._stateDefinesName(state);
  }

  protected boolean _stateDefinesName(int state){
    return statesDefiningName.contains(state);
  }
}
