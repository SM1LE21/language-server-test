/* generated from model SDBasis */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */



/* Hookpoint: InterfaceContent:Annotations */

 public  interface SDBasisHandler extends de.monticore.visitor.IHandler  { 
/* Hookpoint: InterfaceContent:Elements */


  /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 abstract  public  de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser ()

;
  /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 abstract  public  void setTraverser (de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser)

;
  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentPackageDeclaration()) {
        node.getPackageDeclaration().accept(getTraverser());
      }
    {
      Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iter_mCImportStatements = node.getMCImportStatementList().iterator();
      while (iter_mCImportStatements.hasNext()) {
        iter_mCImportStatements.next().accept(getTraverser());
      }
    }
      if (null != node.getSequenceDiagram()) {
        node.getSequenceDiagram().accept(getTraverser());
      }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentStereotype()) {
        node.getStereotype().accept(getTraverser());
      }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
      while (iter_sDModifiers.hasNext()) {
        iter_sDModifiers.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDObject> iter_sDObjects = node.getSDObjectList().iterator();
      while (iter_sDObjects.hasNext()) {
        iter_sDObjects.next().accept(getTraverser());
      }
    }
      if (null != node.getSDBody()) {
        node.getSDBody().accept(getTraverser());
      }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
      while (iter_sDElements.hasNext()) {
        iter_sDElements.next().accept(getTraverser());
      }
    }

    // although we generally assume that the symbol table is always available,
    // there are cases, where this is not true (for example construction of the
    // symbol table itself. Thus, the null-check is necessary.
    if (node.getSpannedScope() != null) {
      node.getSpannedScope().accept(getTraverser());
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentStereotype()) {
        node.getStereotype().accept(getTraverser());
      }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
      while (iter_sDModifiers.hasNext()) {
        iter_sDModifiers.next().accept(getTraverser());
      }
    }
      if (node.isPresentMCObjectType()) {
        node.getMCObjectType().accept(getTraverser());
      }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentSDSource()) {
        node.getSDSource().accept(getTraverser());
      }
      if (node.isPresentSDTarget()) {
        node.getSDTarget().accept(getTraverser());
      }
      if (null != node.getSDAction()) {
        node.getSDAction().accept(getTraverser());
      }
      if (node.isPresentSDActivityBar()) {
        node.getSDActivityBar().accept(getTraverser());
      }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
      while (iter_sDElements.hasNext()) {
        iter_sDElements.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDModifier node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDElement node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInteraction node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSource node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDTarget node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDAction node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.handler.TraverseScope*/

  // traverse symbols within the scope
  for (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol s : node.getLocalDiagramSymbols()) {
    s.accept(getTraverser());
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol s : node.getLocalTypeSymbols()) {
    s.accept(getTraverser());
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol s : node.getLocalTypeVarSymbols()) {
    s.accept(getTraverser());
  }
  for (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol s : node.getLocalVariableSymbols()) {
    s.accept(getTraverser());
  }
  for (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol s : node.getLocalFunctionSymbols()) {
    s.accept(getTraverser());
  }

  // traverse sub-scopes
  for (de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope : node.getSubScopes()) {
    scope.accept(getTraverser());
  }
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    traverse((de.monticore.lang.sdbasis._symboltable.ISDBasisScope) node);
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    traverse((de.monticore.lang.sdbasis._symboltable.ISDBasisScope) node);
}

}
