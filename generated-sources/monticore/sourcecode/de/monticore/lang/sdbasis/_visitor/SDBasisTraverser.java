/* generated from model SDBasis */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sdbasis._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */



/* Hookpoint: InterfaceContent:Annotations */

 public  interface SDBasisTraverser extends de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser,de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser,de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser,de.monticore.umlstereotype._visitor.UMLStereotypeTraverser  { 
/* Hookpoint: InterfaceContent:Elements */


  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4SDBasis (de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasicTypes (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4BasicSymbols (de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4ExpressionsBasis (de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4UMLStereotype (de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasics (de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCLiteralsBasis (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCCommonLiterals (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSDBasisHandler (de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicTypesHandler (de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setBasicSymbolsHandler (de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setExpressionsBasisHandler (de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setUMLStereotypeHandler (de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicsHandler (de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCLiteralsBasisHandler (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCCommonLiteralsHandler (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDArtifact node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
      if (node.isPresentPackageDeclaration()) {
        node.getPackageDeclaration().accept(this);
      }
    {
      Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iter_mCImportStatements = node.getMCImportStatementList().iterator();
      while (iter_mCImportStatements.hasNext()) {
        iter_mCImportStatements.next().accept(this);
      }
    }
      if (null != node.getSequenceDiagram()) {
        node.getSequenceDiagram().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
      if (node.isPresentStereotype()) {
        node.getStereotype().accept(this);
      }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
      while (iter_sDModifiers.hasNext()) {
        iter_sDModifiers.next().accept(this);
      }
    }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDObject> iter_sDObjects = node.getSDObjectList().iterator();
      while (iter_sDObjects.hasNext()) {
        iter_sDObjects.next().accept(this);
      }
    }
      if (null != node.getSDBody()) {
        node.getSDBody().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDBody node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
      while (iter_sDElements.hasNext()) {
        iter_sDElements.next().accept(this);
      }
    }

    // although we generally assume that the symbol table is always available,
    // there are cases, where this is not true (for example construction of the
    // symbol table itself. Thus, the null-check is necessary.
    if (node.getSpannedScope() != null) {
      node.getSpannedScope().accept(this);
    }
}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObject node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
      if (node.isPresentStereotype()) {
        node.getStereotype().accept(this);
      }
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iter_sDModifiers = node.getSDModifierList().iterator();
      while (iter_sDModifiers.hasNext()) {
        iter_sDModifiers.next().accept(this);
      }
    }
      if (node.isPresentMCObjectType()) {
        node.getMCObjectType().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObjectSource node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDSendMessage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
      if (node.isPresentSDSource()) {
        node.getSDSource().accept(this);
      }
      if (node.isPresentSDTarget()) {
        node.getSDTarget().accept(this);
      }
      if (null != node.getSDAction()) {
        node.getSDAction().accept(this);
      }
      if (node.isPresentSDActivityBar()) {
        node.getSDActivityBar().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._ast.ASTSDActivityBar node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSDBasisHandler().isPresent()) {
  getSDBasisHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iter_sDElements = node.getSDElementList().iterator();
      while (iter_sDElements.hasNext()) {
        iter_sDElements.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDModifier node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDModifier node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDElement node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDElement node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDInteraction node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDInteraction node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDInteraction node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDSource node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDSource node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDSource node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDTarget node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDTarget node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDTarget node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDAction node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDAction node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDAction node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisScope node)

 {
    /* generated by template _visitor.traverser.TraverseScope*/

  if (getSDBasisHandler().isPresent()) {
    getSDBasisHandler().get().traverse(node);
  } else {
  // traverse symbols within the scope
  for (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol s : node.getLocalDiagramSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol s : node.getLocalTypeSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol s : node.getLocalTypeVarSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol s : node.getLocalVariableSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol s : node.getLocalFunctionSymbols()) {
    s.accept(this);
  }
  // traverse sub-scopes
  for (de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope : node.getSubScopes()) {
    scope.accept(this);
  }
}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node)

 {
    traverse((de.monticore.lang.sdbasis._symboltable.ISDBasisScope) node);
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSDBasisVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSDBasisHandler().isPresent()) {
      getSDBasisHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node)

 {
    traverse((de.monticore.lang.sdbasis._symboltable.ISDBasisScope) node);
}

}
