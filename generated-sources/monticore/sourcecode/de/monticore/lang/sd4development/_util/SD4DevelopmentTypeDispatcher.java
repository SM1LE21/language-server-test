/* generated from model SD4Development */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sd4development._util;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SD4DevelopmentTypeDispatcher  implements de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher sDBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher mCCommonLiteralsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.expressions.commonexpressions._util.CommonExpressionsTypeDispatcher commonExpressionsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.ocl.oclexpressions._util.OCLExpressionsTypeDispatcher oCLExpressionsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symbols.oosymbols._util.OOSymbolsTypeDispatcher oOSymbolsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher mCBasicTypesTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher basicSymbolsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher expressionsBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher uMLStereotypeTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.mcbasics._util.MCBasicsTypeDispatcher mCBasicsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher mCLiteralsBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDCall> optASTSDCall
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDNew> optASTSDNew
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDReturn> optASTSDReturn
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDThrow> optASTSDThrow
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDEndCall> optASTSDEndCall
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDEndCallArrow> optASTSDEndCallArrow
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression> optASTSDIncompleteExpression
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDClass> optASTSDClass
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDCondition> optASTSDCondition
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration> optASTSDVariableDeclaration
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals> optSD4DevelopmentLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode> optASTSD4DevelopmentNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDCall
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDNew
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDReturn
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDThrow
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDEndCall
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDEndCallArrow
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDIncompleteExpression
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDClass
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDCondition
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSDVariableDeclaration
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isSD4DevelopmentLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTSD4DevelopmentNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope> optISD4DevelopmentArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope> optISD4DevelopmentGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> optISD4DevelopmentScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISD4DevelopmentArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISD4DevelopmentGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isISD4DevelopmentScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  SD4DevelopmentTypeDispatcher()
 {
  /* generated by template dispatcher.Constructor*/


de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser = de.monticore.lang.sd4development.SD4DevelopmentMill.traverser();
this.setTraverser(traverser);

this.getTraverser().setSD4DevelopmentHandler(this);

    this.sDBasisTypeDispatcher = new de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher();
    this.getTraverser().setSDBasisHandler(this.sDBasisTypeDispatcher);
    this.mCCommonLiteralsTypeDispatcher = new de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher();
    this.getTraverser().setMCCommonLiteralsHandler(this.mCCommonLiteralsTypeDispatcher);
    this.commonExpressionsTypeDispatcher = new de.monticore.expressions.commonexpressions._util.CommonExpressionsTypeDispatcher();
    this.getTraverser().setCommonExpressionsHandler(this.commonExpressionsTypeDispatcher);
    this.oCLExpressionsTypeDispatcher = new de.monticore.ocl.oclexpressions._util.OCLExpressionsTypeDispatcher();
    this.getTraverser().setOCLExpressionsHandler(this.oCLExpressionsTypeDispatcher);
    this.oOSymbolsTypeDispatcher = new de.monticore.symbols.oosymbols._util.OOSymbolsTypeDispatcher();
    this.getTraverser().setOOSymbolsHandler(this.oOSymbolsTypeDispatcher);
    this.mCBasicTypesTypeDispatcher = new de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher();
    this.getTraverser().setMCBasicTypesHandler(this.mCBasicTypesTypeDispatcher);
    this.basicSymbolsTypeDispatcher = new de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher();
    this.getTraverser().setBasicSymbolsHandler(this.basicSymbolsTypeDispatcher);
    this.expressionsBasisTypeDispatcher = new de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher();
    this.getTraverser().setExpressionsBasisHandler(this.expressionsBasisTypeDispatcher);
    this.uMLStereotypeTypeDispatcher = new de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher();
    this.getTraverser().setUMLStereotypeHandler(this.uMLStereotypeTypeDispatcher);
    this.mCBasicsTypeDispatcher = new de.monticore.mcbasics._util.MCBasicsTypeDispatcher();
    this.getTraverser().setMCBasicsHandler(this.mCBasicsTypeDispatcher);
    this.mCLiteralsBasisTypeDispatcher = new de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher();
    this.getTraverser().setMCLiteralsBasisHandler(this.mCLiteralsBasisTypeDispatcher);

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser ()

 {
    return this.traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser)

 {
    this.traverser = traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void reset ()

 {
    /* generated by template dispatcher.Reset*/


this.traverser.getTraversedElements().clear();

    sDBasisTypeDispatcher.reset();
    mCCommonLiteralsTypeDispatcher.reset();
    commonExpressionsTypeDispatcher.reset();
    oCLExpressionsTypeDispatcher.reset();
    oOSymbolsTypeDispatcher.reset();
    mCBasicTypesTypeDispatcher.reset();
    basicSymbolsTypeDispatcher.reset();
    expressionsBasisTypeDispatcher.reset();
    uMLStereotypeTypeDispatcher.reset();
    mCBasicsTypeDispatcher.reset();
    mCLiteralsBasisTypeDispatcher.reset();

  isASTSDCall = false;
  isASTSDNew = false;
  isASTSDReturn = false;
  isASTSDThrow = false;
  isASTSDEndCall = false;
  isASTSDEndCallArrow = false;
  isASTSDIncompleteExpression = false;
  isASTSDClass = false;
  isASTSDCondition = false;
  isASTSDVariableDeclaration = false;
  isSD4DevelopmentLiterals = false;
  isASTSD4DevelopmentNode = false;
  isISD4DevelopmentArtifactScope = false;
  isISD4DevelopmentGlobalScope = false;
  isISD4DevelopmentScope = false;
    optASTSDCall = Optional.empty();
    optASTSDNew = Optional.empty();
    optASTSDReturn = Optional.empty();
    optASTSDThrow = Optional.empty();
    optASTSDEndCall = Optional.empty();
    optASTSDEndCallArrow = Optional.empty();
    optASTSDIncompleteExpression = Optional.empty();
    optASTSDClass = Optional.empty();
    optASTSDCondition = Optional.empty();
    optASTSDVariableDeclaration = Optional.empty();
    optSD4DevelopmentLiterals = Optional.empty();
    optASTSD4DevelopmentNode = Optional.empty();
    optISD4DevelopmentArtifactScope = Optional.empty();
    optISD4DevelopmentGlobalScope = Optional.empty();
    optISD4DevelopmentScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDCall (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDCall();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDNew (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDNew();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDReturn (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDReturn();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDThrow (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDThrow();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDEndCall (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDEndCall();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDEndCallArrow (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDEndCallArrow();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDIncompleteExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDIncompleteExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDClass (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDClass();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDCondition (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDCondition();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDVariableDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSDVariableDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isSD4DevelopmentLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsSD4DevelopmentLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSD4DevelopmentNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTSD4DevelopmentNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISD4DevelopmentArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISD4DevelopmentArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISD4DevelopmentGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISD4DevelopmentGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isISD4DevelopmentScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsISD4DevelopmentScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDCall asASTSDCall (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDCall(node)) {
  Log.error("0x54987x27784 Cannot cast node to type ASTSDCall.");
}
return this.getOptASTSDCall();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDNew asASTSDNew (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDNew(node)) {
  Log.error("0x54987x66742 Cannot cast node to type ASTSDNew.");
}
return this.getOptASTSDNew();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDReturn asASTSDReturn (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDReturn(node)) {
  Log.error("0x54987x98714 Cannot cast node to type ASTSDReturn.");
}
return this.getOptASTSDReturn();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDThrow asASTSDThrow (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDThrow(node)) {
  Log.error("0x54987x26212 Cannot cast node to type ASTSDThrow.");
}
return this.getOptASTSDThrow();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDEndCall asASTSDEndCall (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDEndCall(node)) {
  Log.error("0x54987x90575 Cannot cast node to type ASTSDEndCall.");
}
return this.getOptASTSDEndCall();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDEndCallArrow asASTSDEndCallArrow (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDEndCallArrow(node)) {
  Log.error("0x54987x43718 Cannot cast node to type ASTSDEndCallArrow.");
}
return this.getOptASTSDEndCallArrow();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression asASTSDIncompleteExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDIncompleteExpression(node)) {
  Log.error("0x54987x81952 Cannot cast node to type ASTSDIncompleteExpression.");
}
return this.getOptASTSDIncompleteExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDClass asASTSDClass (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDClass(node)) {
  Log.error("0x54987x23122 Cannot cast node to type ASTSDClass.");
}
return this.getOptASTSDClass();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDCondition asASTSDCondition (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDCondition(node)) {
  Log.error("0x54987x21711 Cannot cast node to type ASTSDCondition.");
}
return this.getOptASTSDCondition();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration asASTSDVariableDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDVariableDeclaration(node)) {
  Log.error("0x54987x01012 Cannot cast node to type ASTSDVariableDeclaration.");
}
return this.getOptASTSDVariableDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals asSD4DevelopmentLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isSD4DevelopmentLiterals(node)) {
  Log.error("0x54987x71877 Cannot cast node to type SD4DevelopmentLiterals.");
}
return this.getOptSD4DevelopmentLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode asASTSD4DevelopmentNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSD4DevelopmentNode(node)) {
  Log.error("0x54987x95827 Cannot cast node to type ASTSD4DevelopmentNode.");
}
return this.getOptASTSD4DevelopmentNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope asISD4DevelopmentArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISD4DevelopmentArtifactScope(scope)) {
  Log.error("0x54987x77238 Cannot cast node to type ISD4DevelopmentArtifactScope.");
}
return this.getOptISD4DevelopmentArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope asISD4DevelopmentGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISD4DevelopmentGlobalScope(scope)) {
  Log.error("0x54987x41113 Cannot cast node to type ISD4DevelopmentGlobalScope.");
}
return this.getOptISD4DevelopmentGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope asISD4DevelopmentScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isISD4DevelopmentScope(scope)) {
  Log.error("0x54987x23964 Cannot cast node to type ISD4DevelopmentScope.");
}
return this.getOptISD4DevelopmentScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDArtifact (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDArtifact();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSequenceDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSequenceDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDBody (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDBody();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDCompleteModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDCompleteModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDFreeModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDFreeModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDInitialModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDInitialModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDVisibleModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDVisibleModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObject (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDObject();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObjectSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDObjectSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDObjectTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDObjectTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDSendMessage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDSendMessage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDActivityBar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDActivityBar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDElement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDElement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDInteraction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDInteraction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDAction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDAction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isSDBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsSDBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSDBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return sDBasisTypeDispatcher.isIsASTSDBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTCallExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTCallExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTFieldAccessExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTFieldAccessExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTPlusPrefixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTPlusPrefixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMinusPrefixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTMinusPrefixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanNotExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTBooleanNotExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLogicalNotExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTLogicalNotExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMultExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTMultExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDivideExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTDivideExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTModuloExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTModuloExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTPlusExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTPlusExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMinusExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTMinusExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLessEqualExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTLessEqualExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTGreaterEqualExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTGreaterEqualExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLessThanExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTLessThanExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTGreaterThanExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTGreaterThanExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTEqualsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTEqualsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNotEqualsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTNotEqualsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanAndOpExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTBooleanAndOpExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanOrOpExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTBooleanOrOpExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTConditionalExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTConditionalExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBracketExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTBracketExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTArrayAccessExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTArrayAccessExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTInfixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTInfixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isCommonExpressionsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsCommonExpressionsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTCommonExpressionsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return commonExpressionsTypeDispatcher.isIsASTCommonExpressionsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOCLVariableDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTOCLVariableDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTTypeIfExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTTypeIfExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTTypeIfThenExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTTypeIfThenExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTIfThenElseExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTIfThenElseExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTImpliesExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTImpliesExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTEquivalentExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTEquivalentExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTForallExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTForallExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTExistsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTExistsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTAnyExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTAnyExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLetinExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTLetinExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTIterateExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTIterateExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTInDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTInDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTInDeclarationVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTInDeclarationVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOCLAtPreQualification (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTOCLAtPreQualification();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOCLTransitiveQualification (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTOCLTransitiveQualification();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isOCLExpressionsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsOCLExpressionsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOCLExpressionsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oCLExpressionsTypeDispatcher.isIsASTOCLExpressionsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOOType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsASTOOType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTField (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsASTField();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMethod (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsASTMethod();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isOOSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsOOSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOOSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsASTOOSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isOOType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsOOType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isField (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsField();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMethod (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return oOSymbolsTypeDispatcher.isIsMethod();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTTypeVar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTFunction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isBasicSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsBasicSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsASTBasicSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDiagram (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isTypeVar (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isVariable (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isFunction (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.IsAST*/


reset();
symbol.accept(this.getTraverser());
return basicSymbolsTypeDispatcher.isIsFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNameExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTNameExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLiteralExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTLiteralExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTArguments (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTArguments();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isExpressionsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsExpressionsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTExpressionsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return expressionsBasisTypeDispatcher.isIsASTExpressionsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStereotype (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTStereotype();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStereoValue (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTStereoValue();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isUMLStereotypeLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsUMLStereotypeLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTUMLStereotypeNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return uMLStereotypeTypeDispatcher.isIsASTUMLStereotypeNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDArtifact asASTSDArtifact (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDArtifact(node)) {
  Log.error("0x54987x56836 Cannot cast node to type ASTSDArtifact.");
}
return sDBasisTypeDispatcher.getOptASTSDArtifact();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSequenceDiagram asASTSequenceDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSequenceDiagram(node)) {
  Log.error("0x54987x49735 Cannot cast node to type ASTSequenceDiagram.");
}
return sDBasisTypeDispatcher.getOptASTSequenceDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBody asASTSDBody (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDBody(node)) {
  Log.error("0x54987x11212 Cannot cast node to type ASTSDBody.");
}
return sDBasisTypeDispatcher.getOptASTSDBody();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier asASTSDCompleteModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDCompleteModifier(node)) {
  Log.error("0x54987x89562 Cannot cast node to type ASTSDCompleteModifier.");
}
return sDBasisTypeDispatcher.getOptASTSDCompleteModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDFreeModifier asASTSDFreeModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDFreeModifier(node)) {
  Log.error("0x54987x28941 Cannot cast node to type ASTSDFreeModifier.");
}
return sDBasisTypeDispatcher.getOptASTSDFreeModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInitialModifier asASTSDInitialModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDInitialModifier(node)) {
  Log.error("0x54987x22321 Cannot cast node to type ASTSDInitialModifier.");
}
return sDBasisTypeDispatcher.getOptASTSDInitialModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier asASTSDVisibleModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDVisibleModifier(node)) {
  Log.error("0x54987x31777 Cannot cast node to type ASTSDVisibleModifier.");
}
return sDBasisTypeDispatcher.getOptASTSDVisibleModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObject asASTSDObject (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObject(node)) {
  Log.error("0x54987x26953 Cannot cast node to type ASTSDObject.");
}
return sDBasisTypeDispatcher.getOptASTSDObject();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectSource asASTSDObjectSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObjectSource(node)) {
  Log.error("0x54987x30372 Cannot cast node to type ASTSDObjectSource.");
}
return sDBasisTypeDispatcher.getOptASTSDObjectSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDObjectTarget asASTSDObjectTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDObjectTarget(node)) {
  Log.error("0x54987x30362 Cannot cast node to type ASTSDObjectTarget.");
}
return sDBasisTypeDispatcher.getOptASTSDObjectTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSendMessage asASTSDSendMessage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDSendMessage(node)) {
  Log.error("0x54987x10517 Cannot cast node to type ASTSDSendMessage.");
}
return sDBasisTypeDispatcher.getOptASTSDSendMessage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDActivityBar asASTSDActivityBar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDActivityBar(node)) {
  Log.error("0x54987x50022 Cannot cast node to type ASTSDActivityBar.");
}
return sDBasisTypeDispatcher.getOptASTSDActivityBar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDModifier asASTSDModifier (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDModifier(node)) {
  Log.error("0x54987x71711 Cannot cast node to type ASTSDModifier.");
}
return sDBasisTypeDispatcher.getOptASTSDModifier();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDElement asASTSDElement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDElement(node)) {
  Log.error("0x54987x10930 Cannot cast node to type ASTSDElement.");
}
return sDBasisTypeDispatcher.getOptASTSDElement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDInteraction asASTSDInteraction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDInteraction(node)) {
  Log.error("0x54987x05848 Cannot cast node to type ASTSDInteraction.");
}
return sDBasisTypeDispatcher.getOptASTSDInteraction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDSource asASTSDSource (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDSource(node)) {
  Log.error("0x54987x89509 Cannot cast node to type ASTSDSource.");
}
return sDBasisTypeDispatcher.getOptASTSDSource();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDTarget asASTSDTarget (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDTarget(node)) {
  Log.error("0x54987x89499 Cannot cast node to type ASTSDTarget.");
}
return sDBasisTypeDispatcher.getOptASTSDTarget();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDAction asASTSDAction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDAction(node)) {
  Log.error("0x54987x44480 Cannot cast node to type ASTSDAction.");
}
return sDBasisTypeDispatcher.getOptASTSDAction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.SDBasisLiterals asSDBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isSDBasisLiterals(node)) {
  Log.error("0x54987x47336 Cannot cast node to type SDBasisLiterals.");
}
return sDBasisTypeDispatcher.getOptSDBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sdbasis._ast.ASTSDBasisNode asASTSDBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSDBasisNode(node)) {
  Log.error("0x54987x70026 Cannot cast node to type ASTSDBasisNode.");
}
return sDBasisTypeDispatcher.getOptASTSDBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNullLiteral asASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNullLiteral(node)) {
  Log.error("0x54987x99727 Cannot cast node to type ASTNullLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral asASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanLiteral(node)) {
  Log.error("0x54987x68928 Cannot cast node to type ASTBooleanLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTCharLiteral asASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTCharLiteral(node)) {
  Log.error("0x54987x73504 Cannot cast node to type ASTCharLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral asASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStringLiteral(node)) {
  Log.error("0x54987x25627 Cannot cast node to type ASTStringLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNatLiteral asASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNatLiteral(node)) {
  Log.error("0x54987x24281 Cannot cast node to type ASTNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral asASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNatLiteral(node)) {
  Log.error("0x54987x64541 Cannot cast node to type ASTSignedNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral asASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicLongLiteral(node)) {
  Log.error("0x54987x38146 Cannot cast node to type ASTBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral asASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicLongLiteral(node)) {
  Log.error("0x54987x51098 Cannot cast node to type ASTSignedBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral asASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicFloatLiteral(node)) {
  Log.error("0x54987x17768 Cannot cast node to type ASTBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral asASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicFloatLiteral(node)) {
  Log.error("0x54987x57812 Cannot cast node to type ASTSignedBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral asASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicDoubleLiteral(node)) {
  Log.error("0x54987x10519 Cannot cast node to type ASTBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral asASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicDoubleLiteral(node)) {
  Log.error("0x54987x13243 Cannot cast node to type ASTSignedBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral asASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedLiteral(node)) {
  Log.error("0x54987x17274 Cannot cast node to type ASTSignedLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral asASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNumericLiteral(node)) {
  Log.error("0x54987x12421 Cannot cast node to type ASTNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral asASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNumericLiteral(node)) {
  Log.error("0x54987x27465 Cannot cast node to type ASTSignedNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.MCCommonLiteralsLiterals asMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCCommonLiteralsLiterals(node)) {
  Log.error("0x54987x31310 Cannot cast node to type MCCommonLiteralsLiterals.");
}
return mCCommonLiteralsTypeDispatcher.getOptMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode asASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCCommonLiteralsNode(node)) {
  Log.error("0x54987x75776 Cannot cast node to type ASTMCCommonLiteralsNode.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTCallExpression asASTCallExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTCallExpression(node)) {
  Log.error("0x54987x45743 Cannot cast node to type ASTCallExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTCallExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTFieldAccessExpression asASTFieldAccessExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTFieldAccessExpression(node)) {
  Log.error("0x54987x31011 Cannot cast node to type ASTFieldAccessExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTFieldAccessExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpression asASTPlusPrefixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTPlusPrefixExpression(node)) {
  Log.error("0x54987x62781 Cannot cast node to type ASTPlusPrefixExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTPlusPrefixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpression asASTMinusPrefixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMinusPrefixExpression(node)) {
  Log.error("0x54987x01535 Cannot cast node to type ASTMinusPrefixExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTMinusPrefixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpression asASTBooleanNotExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanNotExpression(node)) {
  Log.error("0x54987x04156 Cannot cast node to type ASTBooleanNotExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTBooleanNotExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpression asASTLogicalNotExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLogicalNotExpression(node)) {
  Log.error("0x54987x70053 Cannot cast node to type ASTLogicalNotExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTLogicalNotExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTMultExpression asASTMultExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMultExpression(node)) {
  Log.error("0x54987x92257 Cannot cast node to type ASTMultExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTMultExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTDivideExpression asASTDivideExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDivideExpression(node)) {
  Log.error("0x54987x12246 Cannot cast node to type ASTDivideExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTDivideExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTModuloExpression asASTModuloExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTModuloExpression(node)) {
  Log.error("0x54987x92935 Cannot cast node to type ASTModuloExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTModuloExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTPlusExpression asASTPlusExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTPlusExpression(node)) {
  Log.error("0x54987x71979 Cannot cast node to type ASTPlusExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTPlusExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTMinusExpression asASTMinusExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMinusExpression(node)) {
  Log.error("0x54987x78543 Cannot cast node to type ASTMinusExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTMinusExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTLessEqualExpression asASTLessEqualExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLessEqualExpression(node)) {
  Log.error("0x54987x89402 Cannot cast node to type ASTLessEqualExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTLessEqualExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTGreaterEqualExpression asASTGreaterEqualExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTGreaterEqualExpression(node)) {
  Log.error("0x54987x60597 Cannot cast node to type ASTGreaterEqualExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTGreaterEqualExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTLessThanExpression asASTLessThanExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLessThanExpression(node)) {
  Log.error("0x54987x48235 Cannot cast node to type ASTLessThanExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTLessThanExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTGreaterThanExpression asASTGreaterThanExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTGreaterThanExpression(node)) {
  Log.error("0x54987x64922 Cannot cast node to type ASTGreaterThanExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTGreaterThanExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTEqualsExpression asASTEqualsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTEqualsExpression(node)) {
  Log.error("0x54987x71952 Cannot cast node to type ASTEqualsExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTEqualsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTNotEqualsExpression asASTNotEqualsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNotEqualsExpression(node)) {
  Log.error("0x54987x15569 Cannot cast node to type ASTNotEqualsExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTNotEqualsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTBooleanAndOpExpression asASTBooleanAndOpExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanAndOpExpression(node)) {
  Log.error("0x54987x11169 Cannot cast node to type ASTBooleanAndOpExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTBooleanAndOpExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTBooleanOrOpExpression asASTBooleanOrOpExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanOrOpExpression(node)) {
  Log.error("0x54987x35893 Cannot cast node to type ASTBooleanOrOpExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTBooleanOrOpExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTConditionalExpression asASTConditionalExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTConditionalExpression(node)) {
  Log.error("0x54987x38907 Cannot cast node to type ASTConditionalExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTConditionalExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTBracketExpression asASTBracketExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBracketExpression(node)) {
  Log.error("0x54987x74695 Cannot cast node to type ASTBracketExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTBracketExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTArrayAccessExpression asASTArrayAccessExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTArrayAccessExpression(node)) {
  Log.error("0x54987x25116 Cannot cast node to type ASTArrayAccessExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTArrayAccessExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTInfixExpression asASTInfixExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTInfixExpression(node)) {
  Log.error("0x54987x45297 Cannot cast node to type ASTInfixExpression.");
}
return commonExpressionsTypeDispatcher.getOptASTInfixExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.CommonExpressionsLiterals asCommonExpressionsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isCommonExpressionsLiterals(node)) {
  Log.error("0x54987x09259 Cannot cast node to type CommonExpressionsLiterals.");
}
return commonExpressionsTypeDispatcher.getOptCommonExpressionsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.commonexpressions._ast.ASTCommonExpressionsNode asASTCommonExpressionsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTCommonExpressionsNode(node)) {
  Log.error("0x54987x79943 Cannot cast node to type ASTCommonExpressionsNode.");
}
return commonExpressionsTypeDispatcher.getOptASTCommonExpressionsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTOCLVariableDeclaration asASTOCLVariableDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOCLVariableDeclaration(node)) {
  Log.error("0x54987x11551 Cannot cast node to type ASTOCLVariableDeclaration.");
}
return oCLExpressionsTypeDispatcher.getOptASTOCLVariableDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpression asASTTypeIfExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTTypeIfExpression(node)) {
  Log.error("0x54987x46984 Cannot cast node to type ASTTypeIfExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTTypeIfExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTTypeIfThenExpression asASTTypeIfThenExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTTypeIfThenExpression(node)) {
  Log.error("0x54987x49691 Cannot cast node to type ASTTypeIfThenExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTTypeIfThenExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpression asASTIfThenElseExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTIfThenElseExpression(node)) {
  Log.error("0x54987x38436 Cannot cast node to type ASTIfThenElseExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTIfThenElseExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTImpliesExpression asASTImpliesExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTImpliesExpression(node)) {
  Log.error("0x54987x18026 Cannot cast node to type ASTImpliesExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTImpliesExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTEquivalentExpression asASTEquivalentExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTEquivalentExpression(node)) {
  Log.error("0x54987x87333 Cannot cast node to type ASTEquivalentExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTEquivalentExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTForallExpression asASTForallExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTForallExpression(node)) {
  Log.error("0x54987x91049 Cannot cast node to type ASTForallExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTForallExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTExistsExpression asASTExistsExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTExistsExpression(node)) {
  Log.error("0x54987x67245 Cannot cast node to type ASTExistsExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTExistsExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTAnyExpression asASTAnyExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTAnyExpression(node)) {
  Log.error("0x54987x55221 Cannot cast node to type ASTAnyExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTAnyExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTLetinExpression asASTLetinExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLetinExpression(node)) {
  Log.error("0x54987x27233 Cannot cast node to type ASTLetinExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTLetinExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTIterateExpression asASTIterateExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTIterateExpression(node)) {
  Log.error("0x54987x37657 Cannot cast node to type ASTIterateExpression.");
}
return oCLExpressionsTypeDispatcher.getOptASTIterateExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTInDeclaration asASTInDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTInDeclaration(node)) {
  Log.error("0x54987x79332 Cannot cast node to type ASTInDeclaration.");
}
return oCLExpressionsTypeDispatcher.getOptASTInDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTInDeclarationVariable asASTInDeclarationVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTInDeclarationVariable(node)) {
  Log.error("0x54987x10040 Cannot cast node to type ASTInDeclarationVariable.");
}
return oCLExpressionsTypeDispatcher.getOptASTInDeclarationVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTOCLAtPreQualification asASTOCLAtPreQualification (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOCLAtPreQualification(node)) {
  Log.error("0x54987x21950 Cannot cast node to type ASTOCLAtPreQualification.");
}
return oCLExpressionsTypeDispatcher.getOptASTOCLAtPreQualification();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTOCLTransitiveQualification asASTOCLTransitiveQualification (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOCLTransitiveQualification(node)) {
  Log.error("0x54987x40149 Cannot cast node to type ASTOCLTransitiveQualification.");
}
return oCLExpressionsTypeDispatcher.getOptASTOCLTransitiveQualification();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.OCLExpressionsLiterals asOCLExpressionsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isOCLExpressionsLiterals(node)) {
  Log.error("0x54987x71088 Cannot cast node to type OCLExpressionsLiterals.");
}
return oCLExpressionsTypeDispatcher.getOptOCLExpressionsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.ocl.oclexpressions._ast.ASTOCLExpressionsNode asASTOCLExpressionsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOCLExpressionsNode(node)) {
  Log.error("0x54987x32034 Cannot cast node to type ASTOCLExpressionsNode.");
}
return oCLExpressionsTypeDispatcher.getOptASTOCLExpressionsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._ast.ASTOOType asASTOOType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOOType(node)) {
  Log.error("0x54987x99539 Cannot cast node to type ASTOOType.");
}
return oOSymbolsTypeDispatcher.getOptASTOOType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._ast.ASTField asASTField (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTField(node)) {
  Log.error("0x54987x85537 Cannot cast node to type ASTField.");
}
return oOSymbolsTypeDispatcher.getOptASTField();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._ast.ASTMethod asASTMethod (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMethod(node)) {
  Log.error("0x54987x95642 Cannot cast node to type ASTMethod.");
}
return oOSymbolsTypeDispatcher.getOptASTMethod();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._ast.OOSymbolsLiterals asOOSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isOOSymbolsLiterals(node)) {
  Log.error("0x54987x40054 Cannot cast node to type OOSymbolsLiterals.");
}
return oOSymbolsTypeDispatcher.getOptOOSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._ast.ASTOOSymbolsNode asASTOOSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOOSymbolsNode(node)) {
  Log.error("0x54987x34620 Cannot cast node to type ASTOOSymbolsNode.");
}
return oOSymbolsTypeDispatcher.getOptASTOOSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol asOOType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isOOType(symbol)) {
  Log.error("0x54987x63267 Cannot cast node to type OOType.");
}
return oOSymbolsTypeDispatcher.getOptOOType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._symboltable.FieldSymbol asField (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isField(symbol)) {
  Log.error("0x54987x22511 Cannot cast node to type Field.");
}
return oOSymbolsTypeDispatcher.getOptField();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.oosymbols._symboltable.MethodSymbol asMethod (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMethod(symbol)) {
  Log.error("0x54987x59370 Cannot cast node to type Method.");
}
return oOSymbolsTypeDispatcher.getOptMethod();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName asASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedName(node)) {
  Log.error("0x54987x34040 Cannot cast node to type ASTMCQualifiedName.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration asASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPackageDeclaration(node)) {
  Log.error("0x54987x50787 Cannot cast node to type ASTMCPackageDeclaration.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCImportStatement asASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCImportStatement(node)) {
  Log.error("0x54987x50149 Cannot cast node to type ASTMCImportStatement.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType asASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPrimitiveType(node)) {
  Log.error("0x54987x95602 Cannot cast node to type ASTMCPrimitiveType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType asASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedType(node)) {
  Log.error("0x54987x35943 Cannot cast node to type ASTMCQualifiedType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCReturnType asASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCReturnType(node)) {
  Log.error("0x54987x82969 Cannot cast node to type ASTMCReturnType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCVoidType asASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCVoidType(node)) {
  Log.error("0x54987x95229 Cannot cast node to type ASTMCVoidType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCType asASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCType(node)) {
  Log.error("0x54987x58985 Cannot cast node to type ASTMCType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType asASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCObjectType(node)) {
  Log.error("0x54987x32264 Cannot cast node to type ASTMCObjectType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.MCBasicTypesLiterals asMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicTypesLiterals(node)) {
  Log.error("0x54987x19538 Cannot cast node to type MCBasicTypesLiterals.");
}
return mCBasicTypesTypeDispatcher.getOptMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode asASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicTypesNode(node)) {
  Log.error("0x54987x74724 Cannot cast node to type ASTMCBasicTypesNode.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTDiagram asASTDiagram (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDiagram(node)) {
  Log.error("0x54987x25414 Cannot cast node to type ASTDiagram.");
}
return basicSymbolsTypeDispatcher.getOptASTDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTType asASTType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTType(node)) {
  Log.error("0x54987x74381 Cannot cast node to type ASTType.");
}
return basicSymbolsTypeDispatcher.getOptASTType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTTypeVar asASTTypeVar (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTTypeVar(node)) {
  Log.error("0x54987x64340 Cannot cast node to type ASTTypeVar.");
}
return basicSymbolsTypeDispatcher.getOptASTTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTVariable asASTVariable (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTVariable(node)) {
  Log.error("0x54987x59467 Cannot cast node to type ASTVariable.");
}
return basicSymbolsTypeDispatcher.getOptASTVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTFunction asASTFunction (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTFunction(node)) {
  Log.error("0x54987x65809 Cannot cast node to type ASTFunction.");
}
return basicSymbolsTypeDispatcher.getOptASTFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.BasicSymbolsLiterals asBasicSymbolsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isBasicSymbolsLiterals(node)) {
  Log.error("0x54987x01882 Cannot cast node to type BasicSymbolsLiterals.");
}
return basicSymbolsTypeDispatcher.getOptBasicSymbolsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode asASTBasicSymbolsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicSymbolsNode(node)) {
  Log.error("0x54987x40264 Cannot cast node to type ASTBasicSymbolsNode.");
}
return basicSymbolsTypeDispatcher.getOptASTBasicSymbolsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol asDiagram (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDiagram(symbol)) {
  Log.error("0x54987x42602 Cannot cast node to type Diagram.");
}
return basicSymbolsTypeDispatcher.getOptDiagram();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.TypeSymbol asType (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isType(symbol)) {
  Log.error("0x54987x51005 Cannot cast node to type Type.");
}
return basicSymbolsTypeDispatcher.getOptType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol asTypeVar (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isTypeVar(symbol)) {
  Log.error("0x54987x34940 Cannot cast node to type TypeVar.");
}
return basicSymbolsTypeDispatcher.getOptTypeVar();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.VariableSymbol asVariable (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isVariable(symbol)) {
  Log.error("0x54987x03109 Cannot cast node to type Variable.");
}
return basicSymbolsTypeDispatcher.getOptVariable();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol asFunction (de.monticore.symboltable.ISymbol symbol)

 {
    /* generated by template dispatcher.AsAST*/


if(!isFunction(symbol)) {
  Log.error("0x54987x38911 Cannot cast node to type Function.");
}
return basicSymbolsTypeDispatcher.getOptFunction();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTNameExpression asASTNameExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNameExpression(node)) {
  Log.error("0x54987x91492 Cannot cast node to type ASTNameExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTNameExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpression asASTLiteralExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLiteralExpression(node)) {
  Log.error("0x54987x36818 Cannot cast node to type ASTLiteralExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTLiteralExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTArguments asASTArguments (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTArguments(node)) {
  Log.error("0x54987x92093 Cannot cast node to type ASTArguments.");
}
return expressionsBasisTypeDispatcher.getOptASTArguments();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTExpression asASTExpression (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTExpression(node)) {
  Log.error("0x54987x86223 Cannot cast node to type ASTExpression.");
}
return expressionsBasisTypeDispatcher.getOptASTExpression();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ExpressionsBasisLiterals asExpressionsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isExpressionsBasisLiterals(node)) {
  Log.error("0x54987x65200 Cannot cast node to type ExpressionsBasisLiterals.");
}
return expressionsBasisTypeDispatcher.getOptExpressionsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode asASTExpressionsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTExpressionsBasisNode(node)) {
  Log.error("0x54987x88162 Cannot cast node to type ASTExpressionsBasisNode.");
}
return expressionsBasisTypeDispatcher.getOptASTExpressionsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTStereotype asASTStereotype (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStereotype(node)) {
  Log.error("0x54987x49163 Cannot cast node to type ASTStereotype.");
}
return uMLStereotypeTypeDispatcher.getOptASTStereotype();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTStereoValue asASTStereoValue (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStereoValue(node)) {
  Log.error("0x54987x68992 Cannot cast node to type ASTStereoValue.");
}
return uMLStereotypeTypeDispatcher.getOptASTStereoValue();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.UMLStereotypeLiterals asUMLStereotypeLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isUMLStereotypeLiterals(node)) {
  Log.error("0x54987x66465 Cannot cast node to type UMLStereotypeLiterals.");
}
return uMLStereotypeTypeDispatcher.getOptUMLStereotypeLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.umlstereotype._ast.ASTUMLStereotypeNode asASTUMLStereotypeNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTUMLStereotypeNode(node)) {
  Log.error("0x54987x71473 Cannot cast node to type ASTUMLStereotypeNode.");
}
return uMLStereotypeTypeDispatcher.getOptASTUMLStereotypeNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.MCBasicsLiterals asMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicsLiterals(node)) {
  Log.error("0x54987x90808 Cannot cast node to type MCBasicsLiterals.");
}
return mCBasicsTypeDispatcher.getOptMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.ASTMCBasicsNode asASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicsNode(node)) {
  Log.error("0x54987x45994 Cannot cast node to type ASTMCBasicsNode.");
}
return mCBasicsTypeDispatcher.getOptASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTLiteral asASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLiteral(node)) {
  Log.error("0x54987x24054 Cannot cast node to type ASTLiteral.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.MCLiteralsBasisLiterals asMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCLiteralsBasisLiterals(node)) {
  Log.error("0x54987x10335 Cannot cast node to type MCLiteralsBasisLiterals.");
}
return mCLiteralsBasisTypeDispatcher.getOptMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode asASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCLiteralsBasisNode(node)) {
  Log.error("0x54987x42035 Cannot cast node to type ASTMCLiteralsBasisNode.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsArtifactScope) node);
  this.getTraverser().handle((de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsArtifactScope) node);
  this.getTraverser().handle((de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsArtifactScope) node);
  this.getTraverser().handle((de.monticore.symbols.oosymbols._symboltable.IOOSymbolsArtifactScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesArtifactScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsArtifactScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisArtifactScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeArtifactScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisArtifactScope) node);
this.setIsISD4DevelopmentArtifactScope(true);
this.setOptISD4DevelopmentArtifactScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope) node);
  this.getTraverser().handle((de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsGlobalScope) node);
  this.getTraverser().handle((de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsGlobalScope) node);
  this.getTraverser().handle((de.monticore.symbols.oosymbols._symboltable.IOOSymbolsGlobalScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesGlobalScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsGlobalScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisGlobalScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeGlobalScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisGlobalScope) node);
this.setIsISD4DevelopmentGlobalScope(true);
this.setOptISD4DevelopmentGlobalScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._symboltable.ISDBasisScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  this.getTraverser().handle((de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope) node);
  this.getTraverser().handle((de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope) node);
  this.getTraverser().handle((de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope) node);
  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope) node);
  this.getTraverser().handle((de.monticore.umlstereotype._symboltable.IUMLStereotypeScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
this.setIsISD4DevelopmentScope(true);
this.setOptISD4DevelopmentScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDAction) node);
this.setIsASTSDCall(true);
this.setOptASTSDCall(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDInteraction) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._ast.ASTVariable) node);
this.setIsASTSDNew(true);
this.setOptASTSDNew(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDAction) node);
this.setIsASTSDReturn(true);
this.setOptASTSDReturn(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDAction) node);
this.setIsASTSDThrow(true);
this.setOptASTSDThrow(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDInteraction) node);
this.setIsASTSDEndCall(true);
this.setOptASTSDEndCall(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSDEndCallArrow(true);
this.setOptASTSDEndCallArrow(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.expressions.expressionsbasis._ast.ASTExpression) node);
this.setIsASTSDIncompleteExpression(true);
this.setOptASTSDIncompleteExpression(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDSource) node);
  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDTarget) node);
this.setIsASTSDClass(true);
this.setOptASTSDClass(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDElement) node);
this.setIsASTSDCondition(true);
this.setOptASTSDCondition(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.lang.sdbasis._ast.ASTSDElement) node);
  this.getTraverser().handle((de.monticore.symbols.basicsymbols._ast.ASTVariable) node);
this.setIsASTSDVariableDeclaration(true);
this.setOptASTSDVariableDeclaration(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsSD4DevelopmentLiterals(true);
this.setOptSD4DevelopmentLiterals(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTSD4DevelopmentNode(true);
this.setOptASTSD4DevelopmentNode(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDCall ()

 {
    /* generated by template methods.Get*/

return this.isASTSDCall;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDCall (boolean isASTSDCall)

 {
    /* generated by template methods.Set*/

this.isASTSDCall = isASTSDCall;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDNew ()

 {
    /* generated by template methods.Get*/

return this.isASTSDNew;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDNew (boolean isASTSDNew)

 {
    /* generated by template methods.Set*/

this.isASTSDNew = isASTSDNew;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDReturn ()

 {
    /* generated by template methods.Get*/

return this.isASTSDReturn;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDReturn (boolean isASTSDReturn)

 {
    /* generated by template methods.Set*/

this.isASTSDReturn = isASTSDReturn;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDThrow ()

 {
    /* generated by template methods.Get*/

return this.isASTSDThrow;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDThrow (boolean isASTSDThrow)

 {
    /* generated by template methods.Set*/

this.isASTSDThrow = isASTSDThrow;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDEndCall ()

 {
    /* generated by template methods.Get*/

return this.isASTSDEndCall;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDEndCall (boolean isASTSDEndCall)

 {
    /* generated by template methods.Set*/

this.isASTSDEndCall = isASTSDEndCall;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDEndCallArrow ()

 {
    /* generated by template methods.Get*/

return this.isASTSDEndCallArrow;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDEndCallArrow (boolean isASTSDEndCallArrow)

 {
    /* generated by template methods.Set*/

this.isASTSDEndCallArrow = isASTSDEndCallArrow;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDIncompleteExpression ()

 {
    /* generated by template methods.Get*/

return this.isASTSDIncompleteExpression;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDIncompleteExpression (boolean isASTSDIncompleteExpression)

 {
    /* generated by template methods.Set*/

this.isASTSDIncompleteExpression = isASTSDIncompleteExpression;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDClass ()

 {
    /* generated by template methods.Get*/

return this.isASTSDClass;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDClass (boolean isASTSDClass)

 {
    /* generated by template methods.Set*/

this.isASTSDClass = isASTSDClass;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDCondition ()

 {
    /* generated by template methods.Get*/

return this.isASTSDCondition;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDCondition (boolean isASTSDCondition)

 {
    /* generated by template methods.Set*/

this.isASTSDCondition = isASTSDCondition;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSDVariableDeclaration ()

 {
    /* generated by template methods.Get*/

return this.isASTSDVariableDeclaration;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSDVariableDeclaration (boolean isASTSDVariableDeclaration)

 {
    /* generated by template methods.Set*/

this.isASTSDVariableDeclaration = isASTSDVariableDeclaration;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsSD4DevelopmentLiterals ()

 {
    /* generated by template methods.Get*/

return this.isSD4DevelopmentLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsSD4DevelopmentLiterals (boolean isSD4DevelopmentLiterals)

 {
    /* generated by template methods.Set*/

this.isSD4DevelopmentLiterals = isSD4DevelopmentLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTSD4DevelopmentNode ()

 {
    /* generated by template methods.Get*/

return this.isASTSD4DevelopmentNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTSD4DevelopmentNode (boolean isASTSD4DevelopmentNode)

 {
    /* generated by template methods.Set*/

this.isASTSD4DevelopmentNode = isASTSD4DevelopmentNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISD4DevelopmentArtifactScope ()

 {
    /* generated by template methods.Get*/

return this.isISD4DevelopmentArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISD4DevelopmentArtifactScope (boolean isISD4DevelopmentArtifactScope)

 {
    /* generated by template methods.Set*/

this.isISD4DevelopmentArtifactScope = isISD4DevelopmentArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISD4DevelopmentGlobalScope ()

 {
    /* generated by template methods.Get*/

return this.isISD4DevelopmentGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISD4DevelopmentGlobalScope (boolean isISD4DevelopmentGlobalScope)

 {
    /* generated by template methods.Set*/

this.isISD4DevelopmentGlobalScope = isISD4DevelopmentGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsISD4DevelopmentScope ()

 {
    /* generated by template methods.Get*/

return this.isISD4DevelopmentScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsISD4DevelopmentScope (boolean isISD4DevelopmentScope)

 {
    /* generated by template methods.Set*/

this.isISD4DevelopmentScope = isISD4DevelopmentScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDCall getOptASTSDCall ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDCall()) {
        return this.optASTSDCall.get();
    }
    Log.error("0xA7003x92435 get for OptASTSDCall can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDCall ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDCall.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDCall (de.monticore.lang.sd4development._ast.ASTSDCall optASTSDCall)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDCall = Optional.ofNullable(optASTSDCall);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDCallAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDCall = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDNew getOptASTSDNew ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDNew()) {
        return this.optASTSDNew.get();
    }
    Log.error("0xA7003x83805 get for OptASTSDNew can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDNew ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDNew.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDNew (de.monticore.lang.sd4development._ast.ASTSDNew optASTSDNew)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDNew = Optional.ofNullable(optASTSDNew);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDNewAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDNew = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDReturn getOptASTSDReturn ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDReturn()) {
        return this.optASTSDReturn.get();
    }
    Log.error("0xA7003x40713 get for OptASTSDReturn can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDReturn ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDReturn.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDReturn (de.monticore.lang.sd4development._ast.ASTSDReturn optASTSDReturn)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDReturn = Optional.ofNullable(optASTSDReturn);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDReturnAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDReturn = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDThrow getOptASTSDThrow ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDThrow()) {
        return this.optASTSDThrow.get();
    }
    Log.error("0xA7003x41667 get for OptASTSDThrow can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDThrow ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDThrow.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDThrow (de.monticore.lang.sd4development._ast.ASTSDThrow optASTSDThrow)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDThrow = Optional.ofNullable(optASTSDThrow);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDThrowAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDThrow = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDEndCall getOptASTSDEndCall ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDEndCall()) {
        return this.optASTSDEndCall.get();
    }
    Log.error("0xA7003x36349 get for OptASTSDEndCall can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDEndCall ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDEndCall.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDEndCall (de.monticore.lang.sd4development._ast.ASTSDEndCall optASTSDEndCall)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDEndCall = Optional.ofNullable(optASTSDEndCall);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDEndCallAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDEndCall = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDEndCallArrow getOptASTSDEndCallArrow ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDEndCallArrow()) {
        return this.optASTSDEndCallArrow.get();
    }
    Log.error("0xA7003x00233 get for OptASTSDEndCallArrow can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDEndCallArrow ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDEndCallArrow.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDEndCallArrow (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow optASTSDEndCallArrow)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDEndCallArrow = Optional.ofNullable(optASTSDEndCallArrow);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDEndCallArrowAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDEndCallArrow = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression getOptASTSDIncompleteExpression ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDIncompleteExpression()) {
        return this.optASTSDIncompleteExpression.get();
    }
    Log.error("0xA7003x71331 get for OptASTSDIncompleteExpression can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDIncompleteExpression ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDIncompleteExpression.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDIncompleteExpression (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression optASTSDIncompleteExpression)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDIncompleteExpression = Optional.ofNullable(optASTSDIncompleteExpression);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDIncompleteExpressionAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDIncompleteExpression = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDClass getOptASTSDClass ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDClass()) {
        return this.optASTSDClass.get();
    }
    Log.error("0xA7003x64925 get for OptASTSDClass can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDClass ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDClass.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDClass (de.monticore.lang.sd4development._ast.ASTSDClass optASTSDClass)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDClass = Optional.ofNullable(optASTSDClass);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDClassAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDClass = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDCondition getOptASTSDCondition ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDCondition()) {
        return this.optASTSDCondition.get();
    }
    Log.error("0xA7003x95267 get for OptASTSDCondition can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDCondition ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDCondition.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDCondition (de.monticore.lang.sd4development._ast.ASTSDCondition optASTSDCondition)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDCondition = Optional.ofNullable(optASTSDCondition);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDConditionAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDCondition = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration getOptASTSDVariableDeclaration ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSDVariableDeclaration()) {
        return this.optASTSDVariableDeclaration.get();
    }
    Log.error("0xA7003x08701 get for OptASTSDVariableDeclaration can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSDVariableDeclaration ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSDVariableDeclaration.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDVariableDeclaration (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration optASTSDVariableDeclaration)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSDVariableDeclaration = Optional.ofNullable(optASTSDVariableDeclaration);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSDVariableDeclarationAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSDVariableDeclaration = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals getOptSD4DevelopmentLiterals ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptSD4DevelopmentLiterals()) {
        return this.optSD4DevelopmentLiterals.get();
    }
    Log.error("0xA7003x37699 get for OptSD4DevelopmentLiterals can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptSD4DevelopmentLiterals ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optSD4DevelopmentLiterals.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptSD4DevelopmentLiterals (de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals optSD4DevelopmentLiterals)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optSD4DevelopmentLiterals = Optional.ofNullable(optSD4DevelopmentLiterals);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptSD4DevelopmentLiteralsAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optSD4DevelopmentLiterals = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode getOptASTSD4DevelopmentNode ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTSD4DevelopmentNode()) {
        return this.optASTSD4DevelopmentNode.get();
    }
    Log.error("0xA7003x62039 get for OptASTSD4DevelopmentNode can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTSD4DevelopmentNode ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTSD4DevelopmentNode.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSD4DevelopmentNode (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode optASTSD4DevelopmentNode)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTSD4DevelopmentNode = Optional.ofNullable(optASTSD4DevelopmentNode);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTSD4DevelopmentNodeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTSD4DevelopmentNode = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope getOptISD4DevelopmentArtifactScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISD4DevelopmentArtifactScope()) {
        return this.optISD4DevelopmentArtifactScope.get();
    }
    Log.error("0xA7003x80137 get for OptISD4DevelopmentArtifactScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISD4DevelopmentArtifactScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISD4DevelopmentArtifactScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentArtifactScope (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope optISD4DevelopmentArtifactScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISD4DevelopmentArtifactScope = Optional.ofNullable(optISD4DevelopmentArtifactScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentArtifactScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISD4DevelopmentArtifactScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope getOptISD4DevelopmentGlobalScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISD4DevelopmentGlobalScope()) {
        return this.optISD4DevelopmentGlobalScope.get();
    }
    Log.error("0xA7003x80247 get for OptISD4DevelopmentGlobalScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISD4DevelopmentGlobalScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISD4DevelopmentGlobalScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentGlobalScope (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope optISD4DevelopmentGlobalScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISD4DevelopmentGlobalScope = Optional.ofNullable(optISD4DevelopmentGlobalScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentGlobalScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISD4DevelopmentGlobalScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getOptISD4DevelopmentScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptISD4DevelopmentScope()) {
        return this.optISD4DevelopmentScope.get();
    }
    Log.error("0xA7003x06103 get for OptISD4DevelopmentScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptISD4DevelopmentScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optISD4DevelopmentScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentScope (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope optISD4DevelopmentScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optISD4DevelopmentScope = Optional.ofNullable(optISD4DevelopmentScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptISD4DevelopmentScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optISD4DevelopmentScope = Optional.empty();

}


}


