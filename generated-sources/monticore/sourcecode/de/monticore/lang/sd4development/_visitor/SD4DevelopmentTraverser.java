/* generated from model SD4Development */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sd4development._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */



/* Hookpoint: InterfaceContent:Annotations */

 public  interface SD4DevelopmentTraverser extends de.monticore.lang.sdbasis._visitor.SDBasisTraverser,de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser,de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser,de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser,de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser  { 
/* Hookpoint: InterfaceContent:Elements */


  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4SD4Development (de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 sD4DevelopmentVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2> getSD4DevelopmentVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4SDBasis (de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCCommonLiterals (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4CommonExpressions (de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2 commonExpressionsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2> getCommonExpressionsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4OCLExpressions (de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2 oCLExpressionsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2> getOCLExpressionsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4OOSymbols (de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2 oOSymbolsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2> getOOSymbolsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasicTypes (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4BasicSymbols (de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4ExpressionsBasis (de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4UMLStereotype (de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasics (de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCLiteralsBasis (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSD4DevelopmentHandler (de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler sD4DevelopmentHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler> getSD4DevelopmentHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setSDBasisHandler (de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCCommonLiteralsHandler (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setCommonExpressionsHandler (de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler commonExpressionsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler> getCommonExpressionsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOCLExpressionsHandler (de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler oCLExpressionsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler> getOCLExpressionsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOOSymbolsHandler (de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler oOSymbolsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler> getOOSymbolsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicTypesHandler (de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setBasicSymbolsHandler (de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setExpressionsBasisHandler (de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setUMLStereotypeHandler (de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicsHandler (de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCLiteralsBasisHandler (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (node.isPresentArguments()) {
        node.getArguments().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (node.isPresentSDSource()) {
        node.getSDSource().accept(this);
      }
      if (null != node.getDeclarationType()) {
        node.getDeclarationType().accept(this);
      }
      if (null != node.getInitializationType()) {
        node.getInitializationType().accept(this);
      }
      if (null != node.getArguments()) {
        node.getArguments().accept(this);
      }
      if (node.isPresentSDActivityBar()) {
        node.getSDActivityBar().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (node.isPresentExpression()) {
        node.getExpression().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (null != node.getMCObjectType()) {
        node.getMCObjectType().accept(this);
      }
      if (node.isPresentArguments()) {
        node.getArguments().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (node.isPresentSDTarget()) {
        node.getSDTarget().accept(this);
      }
      if (null != node.getSDEndCallArrow()) {
        node.getSDEndCallArrow().accept(this);
      }
      if (node.isPresentSDSource()) {
        node.getSDSource().accept(this);
      }
      if (null != node.getSDAction()) {
        node.getSDAction().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (null != node.getMCObjectType()) {
        node.getMCObjectType().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (null != node.getExpression()) {
        node.getExpression().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getSD4DevelopmentHandler().isPresent()) {
  getSD4DevelopmentHandler().get().traverse(node);
} else {
      if (null != node.getMCType()) {
        node.getMCType().accept(this);
      }
      if (null != node.getAssignment()) {
        node.getAssignment().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node)

 {
    /* generated by template _visitor.traverser.TraverseScope*/

  if (getSD4DevelopmentHandler().isPresent()) {
    getSD4DevelopmentHandler().get().traverse(node);
  } else {
  // traverse symbols within the scope
  for (de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol s : node.getLocalOOTypeSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.oosymbols._symboltable.FieldSymbol s : node.getLocalFieldSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.oosymbols._symboltable.MethodSymbol s : node.getLocalMethodSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol s : node.getLocalDiagramSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol s : node.getLocalTypeSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol s : node.getLocalTypeVarSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol s : node.getLocalVariableSymbols()) {
    s.accept(this);
  }
  for (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol s : node.getLocalFunctionSymbols()) {
    s.accept(this);
  }
  // traverse sub-scopes
  for (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope : node.getSubScopes()) {
    scope.accept(this);
  }
}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node)

 {
    traverse((de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope) node);
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getSD4DevelopmentVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getSD4DevelopmentHandler().isPresent()) {
      getSD4DevelopmentHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node)

 {
    traverse((de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope) node);
}

}
