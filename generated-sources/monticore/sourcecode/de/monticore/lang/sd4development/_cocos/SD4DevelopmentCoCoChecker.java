/* generated from model SD4Development */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sd4development._cocos;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SD4DevelopmentCoCoChecker  {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  SD4DevelopmentCoCoChecker()
 {
  /* generated by template _cocos.CoCoCheckerConstructor*/

  traverser = de.monticore.lang.sd4development.SD4DevelopmentMill.inheritanceTraverser();
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.lang.sd4development._cocos.SD4DevelopmentCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getSD4DevelopmentVisitorList().forEach(s -> traverser.add4SD4Development(s));
  checker.getTraverser().getSDBasisVisitorList().forEach(s -> traverser.add4SDBasis(s));
  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getCommonExpressionsVisitorList().forEach(s -> traverser.add4CommonExpressions(s));
  checker.getTraverser().getOCLExpressionsVisitorList().forEach(s -> traverser.add4OCLExpressions(s));
  checker.getTraverser().getOOSymbolsVisitorList().forEach(s -> traverser.add4OOSymbols(s));
  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getBasicSymbolsVisitorList().forEach(s -> traverser.add4BasicSymbols(s));
  checker.getTraverser().getExpressionsBasisVisitorList().forEach(s -> traverser.add4ExpressionsBasis(s));
  checker.getTraverser().getUMLStereotypeVisitorList().forEach(s -> traverser.add4UMLStereotype(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDCallCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDNewCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDReturnCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDThrowCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDEndCallCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDEndCallArrowCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDIncompleteExpressionCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDClassCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDConditionCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDVariableDeclarationCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSD4DevelopmentNodeCoCo coco)

 {
    traverser.add4SD4Development(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.lang.sdbasis._cocos.SDBasisCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getSDBasisVisitorList().forEach(s -> traverser.add4SDBasis(s));
  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getBasicSymbolsVisitorList().forEach(s -> traverser.add4BasicSymbols(s));
  checker.getTraverser().getExpressionsBasisVisitorList().forEach(s -> traverser.add4ExpressionsBasis(s));
  checker.getTraverser().getUMLStereotypeVisitorList().forEach(s -> traverser.add4UMLStereotype(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));
  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.lang.sdbasis._ast.ASTSDBasisNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDArtifactCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSequenceDiagramCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDBodyCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDCompleteModifierCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDFreeModifierCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDInitialModifierCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDVisibleModifierCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectSourceCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectTargetCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDSendMessageCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDActivityBarCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDModifierCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDElementCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDInteractionCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDSourceCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDTargetCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDActionCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.lang.sdbasis._cocos.SDBasisASTSDBasisNodeCoCo coco)

 {
    traverser.add4SDBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getCommonExpressionsVisitorList().forEach(s -> traverser.add4CommonExpressions(s));
  checker.getTraverser().getExpressionsBasisVisitorList().forEach(s -> traverser.add4ExpressionsBasis(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.expressions.commonexpressions._ast.ASTCommonExpressionsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTCallExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTFieldAccessExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTPlusPrefixExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMinusPrefixExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanNotExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLogicalNotExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMultExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTDivideExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTModuloExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTPlusExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMinusExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLessEqualExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTGreaterEqualExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLessThanExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTGreaterThanExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTEqualsExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTNotEqualsExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanAndOpExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanOrOpExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTConditionalExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBracketExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTArrayAccessExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTInfixExpressionCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTCommonExpressionsNodeCoCo coco)

 {
    traverser.add4CommonExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getOCLExpressionsVisitorList().forEach(s -> traverser.add4OCLExpressions(s));
  checker.getTraverser().getExpressionsBasisVisitorList().forEach(s -> traverser.add4ExpressionsBasis(s));
  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getBasicSymbolsVisitorList().forEach(s -> traverser.add4BasicSymbols(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.ocl.oclexpressions._ast.ASTOCLExpressionsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLVariableDeclarationCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTTypeIfExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTTypeIfThenExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTIfThenElseExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTImpliesExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTEquivalentExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTForallExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTExistsExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTAnyExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTLetinExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTIterateExpressionCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTInDeclarationCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTInDeclarationVariableCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLAtPreQualificationCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLTransitiveQualificationCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLExpressionsNodeCoCo coco)

 {
    traverser.add4OCLExpressions(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.symbols.oosymbols._cocos.OOSymbolsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getOOSymbolsVisitorList().forEach(s -> traverser.add4OOSymbols(s));
  checker.getTraverser().getBasicSymbolsVisitorList().forEach(s -> traverser.add4BasicSymbols(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.symbols.oosymbols._ast.ASTOOSymbolsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.oosymbols._cocos.OOSymbolsASTOOTypeCoCo coco)

 {
    traverser.add4OOSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.oosymbols._cocos.OOSymbolsASTFieldCoCo coco)

 {
    traverser.add4OOSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.oosymbols._cocos.OOSymbolsASTMethodCoCo coco)

 {
    traverser.add4OOSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.oosymbols._cocos.OOSymbolsASTOOSymbolsNodeCoCo coco)

 {
    traverser.add4OOSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedNameCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPackageDeclarationCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCImportStatementCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPrimitiveTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCReturnTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCVoidTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCObjectTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCBasicTypesNodeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getBasicSymbolsVisitorList().forEach(s -> traverser.add4BasicSymbols(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTDiagramCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeVarCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTVariableCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTFunctionCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTBasicSymbolsNodeCoCo coco)

 {
    traverser.add4BasicSymbols(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getExpressionsBasisVisitorList().forEach(s -> traverser.add4ExpressionsBasis(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTNameExpressionCoCo coco)

 {
    traverser.add4ExpressionsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTLiteralExpressionCoCo coco)

 {
    traverser.add4ExpressionsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTArgumentsCoCo coco)

 {
    traverser.add4ExpressionsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionCoCo coco)

 {
    traverser.add4ExpressionsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionsBasisNodeCoCo coco)

 {
    traverser.add4ExpressionsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.umlstereotype._cocos.UMLStereotypeCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getUMLStereotypeVisitorList().forEach(s -> traverser.add4UMLStereotype(s));
  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.umlstereotype._ast.ASTUMLStereotypeNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.umlstereotype._cocos.UMLStereotypeASTStereotypeCoCo coco)

 {
    traverser.add4UMLStereotype(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.umlstereotype._cocos.UMLStereotypeASTStereoValueCoCo coco)

 {
    traverser.add4UMLStereotype(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.umlstereotype._cocos.UMLStereotypeASTUMLStereotypeNodeCoCo coco)

 {
    traverser.add4UMLStereotype(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.mcbasics._ast.ASTMCBasicsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco)

 {
    traverser.add4MCBasics(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco)

 {
    traverser.add4MCLiteralsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco)

 {
    traverser.add4MCLiteralsBasis(coco);
}


}


