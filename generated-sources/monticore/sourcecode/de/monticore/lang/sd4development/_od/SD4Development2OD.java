/* generated from model SD4Development */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sd4development._od;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class SD4Development2OD  implements de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2,de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.prettyprint.IndentPrinter pp
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyOptional
  = false;
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyList
  = false;
;


    /* generated by template cd2java.Constructor*/
 public  SD4Development2OD(de.monticore.prettyprint.IndentPrinter printer,de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting)
 {
  /* generated by template _od.ConstructorOD*/
  this.reporting = reporting;
  this.pp = printer;
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDCall");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  if (node.isPresentArguments()) {
    pp.print("arguments");
    pp.print(" = ");
    node.getArguments().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("arguments = absent;");
  }
  printAttribute("trigger", String.valueOf(node.isTrigger()));
  printAttribute("r__static", String.valueOf(node.isStatic()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDNew");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentSDSource()) {
    pp.print("sDSource");
    pp.print(" = ");
    node.getSDSource().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDSource = absent;");
  }
  if (null != node.getDeclarationType()) {
    pp.print("declarationType");
    pp.print(" = ");
    node.getDeclarationType().accept(getTraverser());
    pp.println(";");
  }
  if (null != node.getInitializationType()) {
    pp.print("initializationType");
    pp.print(" = ");
    node.getInitializationType().accept(getTraverser());
    pp.println(";");
  }
  if (null != node.getArguments()) {
    pp.print("arguments");
    pp.print(" = ");
    node.getArguments().accept(getTraverser());
    pp.println(";");
  }
  if (node.isPresentSDActivityBar()) {
    pp.print("sDActivityBar");
    pp.print(" = ");
    node.getSDActivityBar().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDActivityBar = absent;");
  }
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDReturn");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentExpression()) {
    pp.print("expression");
    pp.print(" = ");
    node.getExpression().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("expression = absent;");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDThrow");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getMCObjectType()) {
    pp.print("mCObjectType");
    pp.print(" = ");
    node.getMCObjectType().accept(getTraverser());
    pp.println(";");
  }
  if (node.isPresentArguments()) {
    pp.print("arguments");
    pp.print(" = ");
    node.getArguments().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("arguments = absent;");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDEndCall");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (node.isPresentSDTarget()) {
    pp.print("sDTarget");
    pp.print(" = ");
    node.getSDTarget().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDTarget = absent;");
  }
  if (null != node.getSDEndCallArrow()) {
    pp.print("sDEndCallArrow");
    pp.print(" = ");
    node.getSDEndCallArrow().accept(getTraverser());
    pp.println(";");
  }
  if (node.isPresentSDSource()) {
    pp.print("sDSource");
    pp.print(" = ");
    node.getSDSource().accept(getTraverser());
    pp.println(";");
  } else if (printEmptyOptional) {
    pp.println("sDSource = absent;");
  }
  if (null != node.getSDAction()) {
    pp.print("sDAction");
    pp.print(" = ");
    node.getSDAction().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDEndCallArrow");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDClass");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getMCObjectType()) {
    pp.print("mCObjectType");
    pp.print(" = ");
    node.getMCObjectType().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDCondition");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getExpression()) {
    pp.print("expression");
    pp.print(" = ");
    node.getExpression().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getMCType()) {
    pp.print("mCType");
    pp.print(" = ");
    node.getMCType().accept(getTraverser());
    pp.println(";");
  }
  if (null != node.getAssignment()) {
    pp.print("assignment");
    pp.print(" = ");
    node.getAssignment().accept(getTraverser());
    pp.println(";");
  }
  printAttribute("name", String.valueOf(node.getName()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printAttribute (String name,String value)

 {
    /* generated by template _od.PrintAttribute*/
  pp.print(name);
  pp.print(" = ");
  pp.print(value);
  pp.println(";");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printObject (String objName,String objType)

 {
    /* generated by template _od.PrintObject*/
pp.print(objName);
pp.print(":");
pp.print(de.se_rwth.commons.Names.getSimpleName(objType));
pp.println(" {");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String printObjectDiagram (String modelName,de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node)

 {
    /* generated by template _od.PrintObjectDiagram*/
  pp.clearBuffer();
  pp.setIndentLength(2);
  pp.print("objectdiagram ");
  pp.print(modelName);
  pp.println(" {");
  pp.indent();
  node.accept(getTraverser());
  pp.print(";");
  pp.unindent();
  pp.println("}");
  return pp.getContent();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyOptional ()

 {
    /* generated by template methods.Get*/

return this.printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyOptional (boolean printEmptyOptional)

 {
    /* generated by template methods.Set*/

this.printEmptyOptional = printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyList ()

 {
    /* generated by template methods.Get*/

return this.printEmptyList;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyList (boolean printEmptyList)

 {
    /* generated by template methods.Set*/

this.printEmptyList = printEmptyList;

}


}


