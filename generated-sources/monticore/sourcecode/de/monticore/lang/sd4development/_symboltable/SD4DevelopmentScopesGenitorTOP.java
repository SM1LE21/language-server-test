/* generated from model SD4Development */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package de.monticore.lang.sd4development._symboltable;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 abstract  public  class SD4DevelopmentScopesGenitorTOP  implements de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2,de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Deque<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> scopeStack
  = new java.util.ArrayDeque<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope firstCreatedScope
  
;


    /* generated by template cd2java.Constructor*/
 public  SD4DevelopmentScopesGenitorTOP()
 {
  this.scopeStack = new ArrayDeque<>();
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getFirstCreatedScope ()

 {
    /* generated by template methods.Get*/

return this.firstCreatedScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope createFromAST (de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode)

 {
    /* generated by template _symboltable.scopesgenitor.CreateFromAST*/

  Log.errorIfNull(rootNode, "0xA7004x22389 Error by creating of the SD4DevelopmentScopesGenitor symbol table: top ast node is null");
  ISD4DevelopmentArtifactScope artifactScope = de.monticore.lang.sd4development.SD4DevelopmentMill.artifactScope();
  artifactScope.setPackageName("");
  artifactScope.setImportsList(new ArrayList<>());
  artifactScope.setAstNode(rootNode);
  putOnStack(artifactScope);
  initArtifactScopeHP1(artifactScope);
  rootNode.accept(getTraverser());
  initArtifactScopeHP2(artifactScope);
  scopeStack.remove(artifactScope);
  return artifactScope;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void putOnStack (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope)

 {
    /* generated by template _symboltable.scopesgenitor.PutOnStack*/
  Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
    scope.setEnclosingScope(getCurrentScope().get());
    getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
    if (scope.getEnclosingScope() != getCurrentScope().get()) {
      Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
    }
  }

  if (firstCreatedScope == null) {
    firstCreatedScope = scope;
  }

  scopeStack.addLast(scope);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  final  Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> getCurrentScope ()

 {
    return Optional.ofNullable(scopeStack.peekLast());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  final  Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> removeCurrentScope ()

 {
    return Optional.ofNullable(scopeStack.pollLast());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setScopeStack (Deque<? extends de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> scopeStack)

 {
    this.scopeStack = Log.errorIfNull((Deque<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope>)scopeStack);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope createScope (boolean shadowing)

 {
    /* generated by template _symboltable.scopesgenitor.CreateScope*/

  de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope = de.monticore.lang.sd4development.SD4DevelopmentMill.scope();
  scope.setShadowing(shadowing);
  return scope;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol = de.monticore.lang.sd4development.SD4DevelopmentMill.variableSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x11405 Symbol cannot be added to current scope, since no scope exists.");
  }
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  initVariableHP1(node.getSymbol());

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDNew node)

 {
    /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  if(node.isPresentSymbol()){
    initVariableHP2(node.getSymbol());
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _symboltable.scopesgenitor.Visit4SSC*/

  de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol = de.monticore.lang.sd4development.SD4DevelopmentMill.variableSymbolBuilder().setName(node.getName()).build();
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA5021x11405 Symbol cannot be added to current scope, since no scope exists.");
  }
  // symbol -> ast
  symbol.setAstNode(node);

  // ast -> symbol
  node.setSymbol(symbol);
  node.setEnclosingScope(symbol.getEnclosingScope());

  initVariableHP1(node.getSymbol());

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node)

 {
    /* generated by template _symboltable.scopesgenitor.EndVisitSymbol*/

  if(node.isPresentSymbol()){
    initVariableHP2(node.getSymbol());
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initVariableHP1 (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initVariableHP2 (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDCall node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDReturn node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDThrow node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDEndCall node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDClass node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (de.monticore.lang.sd4development._ast.ASTSDCondition node)

 {
    /* generated by template _symboltable.scopesgenitor.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initScopeHP1 (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initScopeHP2 (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initArtifactScopeHP1 (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void initArtifactScopeHP2 (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addToScopeStack (de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope)

 {
    scopeStack.addLast(scope);
}


}


