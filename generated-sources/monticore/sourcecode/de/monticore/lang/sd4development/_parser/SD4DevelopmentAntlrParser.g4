/* generated by template parser.Parser*/


/* generated by template parser.ParserHeader*/

parser grammar SD4DevelopmentAntlrParser;
@parser::header {
package de.monticore.lang.sd4development._parser;
import de.monticore.antlr4.*;
import de.monticore.parser.*;
import de.monticore.lang.sd4development.*;
}

options {
  superClass=MCParser;
  tokenVocab=SD4DevelopmentAntlrLexer;
}

@parser::members

{

  // convert function for Name
private String convertName(Token t)  {
    return t.getText();
}

  // convert function for NEWLINE
private String convertNEWLINE(Token t)  {
    return t.getText();
}

  // convert function for WS
private String convertWS(Token t)  {
    return t.getText();
}

  // convert function for SL_COMMENT
private String convertSL_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for ML_COMMENT
private String convertML_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for Digits
private String convertDigits(Token t)  {
    return t.getText();
}

  // convert function for Digit
private String convertDigit(Token t)  {
    return t.getText();
}

  // convert function for Char
private String convertChar(Token t)  {
    return t.getText();
}

  // convert function for SingleCharacter
private String convertSingleCharacter(Token t)  {
    return t.getText();
}

  // convert function for String
private String convertString(Token t)  {
    return t.getText();
}

  // convert function for StringCharacters
private String convertStringCharacters(Token t)  {
    return t.getText();
}

  // convert function for StringCharacter
private String convertStringCharacter(Token t)  {
    return t.getText();
}

  // convert function for EscapeSequence
private String convertEscapeSequence(Token t)  {
    return t.getText();
}

  // convert function for OctalEscape
private String convertOctalEscape(Token t)  {
    return t.getText();
}

  // convert function for UnicodeEscape
private String convertUnicodeEscape(Token t)  {
    return t.getText();
}

  // convert function for ZeroToThree
private String convertZeroToThree(Token t)  {
    return t.getText();
}

  // convert function for HexDigit
private String convertHexDigit(Token t)  {
    return t.getText();
}

  // convert function for OctalDigit
private String convertOctalDigit(Token t)  {
    return t.getText();
}

}

  
 // Start of 'ASTClassProd MCQualifiedName'
mCQualifiedName returns [de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCQualifiedNameBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCQualifiedNameBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (
  
  (tmp0=Name{ addToIteratedAttributeIfNotNull(_builder.getPartsList(), convertName($tmp0));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Name{ addToIteratedAttributeIfNotNull(_builder.getPartsList(), convertName($tmp1));}

  ) 
  
  
)*
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCPackageDeclaration'
mCPackageDeclaration returns [de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclarationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCPackageDeclarationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal package'
PACKAGE3487904838
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCImportStatement'
mCImportStatement returns [de.monticore.types.mcbasictypes._ast.ASTMCImportStatement ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCImportStatementBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCImportStatementBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal import'
IMPORT3110171557
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal .'
POINT
  
 // Start of 'ASTConstantGroup'
(STAR{
_builder.setStar(true);
})// End of 'ASTConstantGroup'

  
)?
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCPrimitiveType'
mCPrimitiveType returns [de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveTypeBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCPrimitiveTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
(BOOLEAN64711720{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.BOOLEAN);
}|
BYTE3039496{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.BYTE);
}|
SHORT109413500{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.SHORT);
}|
INT104431{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.INT);
}|
LONG3327612{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.LONG);
}|
CHAR3052374{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.CHAR);
}|
FLOAT97526364{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.FLOAT);
}|
DOUBLE2969009105{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.DOUBLE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCQualifiedType'
mCQualifiedType returns [de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCQualifiedTypeBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCQualifiedTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCReturnType'
mCReturnType returns [de.monticore.types.mcbasictypes._ast.ASTMCReturnType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCReturnTypeBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCReturnTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=mCVoidType{_builder.setMCVoidType(_localctx.tmp0.ret);}  
  
  |
   tmp1=mCType{_builder.setMCType(_localctx.tmp1.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCVoidType'
mCVoidType returns [de.monticore.types.mcbasictypes._ast.ASTMCVoidType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCVoidTypeBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.mCVoidTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal void'
VOID3625364
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NameExpression'
nameExpression returns [de.monticore.expressions.expressionsbasis._ast.ASTNameExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.expressionsbasis._ast.ASTNameExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.nameExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd LiteralExpression'
literalExpression returns [de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.literalExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=literal{_builder.setLiteral(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Arguments'
arguments returns [de.monticore.expressions.expressionsbasis._ast.ASTArguments ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.expressionsbasis._ast.ASTArgumentsBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.argumentsBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ('
LPAREN
  (
  
   tmp0=expression{addToIteratedAttributeIfNotNull(_builder.getExpressionList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp1=expression{addToIteratedAttributeIfNotNull(_builder.getExpressionList(), _localctx.tmp1.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal )'
RPAREN
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd OCLVariableDeclaration'
oCLVariableDeclaration returns [de.monticore.ocl.oclexpressions._ast.ASTOCLVariableDeclaration ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTOCLVariableDeclarationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.oCLVariableDeclarationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=mCType{_builder.setMCType(_localctx.tmp0.ret);}) ? 
  
  (tmp1=Name{_builder.setName(convertName($tmp1));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal ['
(LBRACK{_builder.getDimList().add("[");})
  
 // Start of 'ASTTerminal ]'
RBRACK
  
)*
  (
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp2=expression{_builder.setExpression(_localctx.tmp2.ret);}  
  
  
)?
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd TypeIfExpression'
typeIfExpression returns [de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.typeIfExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal typeif'
TYPEIF3436164567
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal instanceof'
INSTANCEOF902025516
   tmp1=mCType{_builder.setMCType(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal then'
THEN3558941
   tmp2=typeIfThenExpression{_builder.setThenExpression(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal else'
ELSE3116345
   tmp3=expression{_builder.setElseExpression(_localctx.tmp3.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd TypeIfThenExpression'
typeIfThenExpression returns [de.monticore.ocl.oclexpressions._ast.ASTTypeIfThenExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTTypeIfThenExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.typeIfThenExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd IfThenElseExpression'
ifThenElseExpression returns [de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.ifThenElseExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal if'
IF3357
   tmp0=expression{_builder.setCondition(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal then'
THEN3558941
   tmp1=expression{_builder.setThenExpression(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal else'
ELSE3116345
   tmp2=expression{_builder.setElseExpression(_localctx.tmp2.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd ImpliesExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd EquivalentExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd ForallExpression'
forallExpression returns [de.monticore.ocl.oclexpressions._ast.ASTForallExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTForallExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.forallExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal forall'
FORALL3026177080
  (
  
   tmp0=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp1=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp1.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal :'
COLON
   tmp2=expression{_builder.setExpression(_localctx.tmp2.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd ExistsExpression'
existsExpression returns [de.monticore.ocl.oclexpressions._ast.ASTExistsExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTExistsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.existsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal exists'
EXISTS3005609052
  (
  
   tmp0=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp1=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp1.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal :'
COLON
   tmp2=expression{_builder.setExpression(_localctx.tmp2.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd AnyExpression'
anyExpression returns [de.monticore.ocl.oclexpressions._ast.ASTAnyExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTAnyExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.anyExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal any'
ANY96748
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd LetinExpression'
letinExpression returns [de.monticore.ocl.oclexpressions._ast.ASTLetinExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTLetinExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.letinExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal let'
LET107035
  (
  
   tmp0=oCLVariableDeclaration{addToIteratedAttributeIfNotNull(_builder.getOCLVariableDeclarationList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp1=oCLVariableDeclaration{addToIteratedAttributeIfNotNull(_builder.getOCLVariableDeclarationList(), _localctx.tmp1.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal in'
IN3365
   tmp2=expression{_builder.setExpression(_localctx.tmp2.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd IterateExpression'
iterateExpression returns [de.monticore.ocl.oclexpressions._ast.ASTIterateExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTIterateExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.iterateExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal iterate'
ITERATE2116356218
  
 // Start of 'ASTTerminal {'
LCURLY
   tmp0=inDeclaration{_builder.setIteration(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp1=oCLVariableDeclaration{_builder.setInit(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal :'
COLON
  (tmp2=Name{_builder.setName(convertName($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp3=expression{_builder.setValue(_localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd InDeclaration'
inDeclaration returns [de.monticore.ocl.oclexpressions._ast.ASTInDeclaration ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTInDeclarationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.inDeclarationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=mCType{_builder.setMCType(_localctx.tmp0.ret);}  
  
  (
  
   tmp1=inDeclarationVariable{addToIteratedAttributeIfNotNull(_builder.getInDeclarationVariableList(), _localctx.tmp1.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp2=inDeclarationVariable{addToIteratedAttributeIfNotNull(_builder.getInDeclarationVariableList(), _localctx.tmp2.ret);}  
  
  
)*
  
)
  |
  ( tmp3=mCType{_builder.setMCType(_localctx.tmp3.ret);}) ? 
  
  (
  
   tmp4=inDeclarationVariable{addToIteratedAttributeIfNotNull(_builder.getInDeclarationVariableList(), _localctx.tmp4.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp5=inDeclarationVariable{addToIteratedAttributeIfNotNull(_builder.getInDeclarationVariableList(), _localctx.tmp5.ret);}  
  
  
)*
  
)
  (
  
  
 // Start of 'ASTTerminal in'
IN3365
   tmp6=expression{_builder.setExpression(_localctx.tmp6.ret);}  
  
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd InDeclarationVariable'
inDeclarationVariable returns [de.monticore.ocl.oclexpressions._ast.ASTInDeclarationVariable ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTInDeclarationVariableBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.inDeclarationVariableBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd OCLAtPreQualification'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd OCLTransitiveQualification'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd CallExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd FieldAccessExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd PlusPrefixExpression'
plusPrefixExpression returns [de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.plusPrefixExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal +'
PLUS
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MinusPrefixExpression'
minusPrefixExpression returns [de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.minusPrefixExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal -'
MINUS
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BooleanNotExpression'
booleanNotExpression returns [de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanNotExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ~'
TILDE
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd LogicalNotExpression'
logicalNotExpression returns [de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.logicalNotExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal !'
EXCLAMATIONMARK
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MultExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd DivideExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd ModuloExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd PlusExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd MinusExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd LessEqualExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd GreaterEqualExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd LessThanExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd GreaterThanExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd EqualsExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd NotEqualsExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd BooleanAndOpExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd BooleanOrOpExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd ConditionalExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd BracketExpression'
bracketExpression returns [de.monticore.expressions.commonexpressions._ast.ASTBracketExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBracketExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.bracketExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ('
LPAREN
   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal )'
RPAREN
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd ArrayAccessExpression'
// No code generation because of indirect left recursive rules
  
 // Start of 'ASTClassProd NullLiteral'
nullLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.nullLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal null'
NULL3392903
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BooleanLiteral'
booleanLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
(TRUE3569038{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.TRUE);
}|
FALSE97196323{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.FALSE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd CharLiteral'
charLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.charLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Char{_builder.setSource(convertChar($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd StringLiteral'
stringLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.stringLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=String{_builder.setSource(convertString($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NatLiteral'
natLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.natLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedNatLiteral'
signedNatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.signedNatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2)}?
  (
  
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  
)
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  |
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicLongLiteral'
basicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.basicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicLongLiteral'
signedBasicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.signedBasicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(3,"l","L") && noSpace(2,3)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  |
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicFloatLiteral'
basicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.basicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicFloatLiteral'
signedBasicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.signedBasicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(5,"f","F") && noSpace(2,3,4,5)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  |
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicDoubleLiteral'
basicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.basicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicDoubleLiteral'
signedBasicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.signedBasicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3,4)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  |
  {noSpace(2,3)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Stereotype'
stereotype returns [de.monticore.umlstereotype._ast.ASTStereotype ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.umlstereotype._ast.ASTStereotypeBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.stereotypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal <<'
LTLT
  (
  
   tmp0=stereoValue{addToIteratedAttributeIfNotNull(_builder.getValuesList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp1=stereoValue{addToIteratedAttributeIfNotNull(_builder.getValuesList(), _localctx.tmp1.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal >>'
gtgt
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd StereoValue'
stereoValue returns [de.monticore.umlstereotype._ast.ASTStereoValue ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.umlstereotype._ast.ASTStereoValueBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.stereoValueBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  /* Automatically added keywords [package, import, boolean, byte, short, int, long, char, float, double, void, typeif, instanceof, then, else, if, implies, forall, exists, any, let, in, iterate, null, true, false, sequencediagram, trigger, static, new, return, throw, class] */
   | 
  (PACKAGE3487904838{_builder.setName("package");})
   | 
  (IMPORT3110171557{_builder.setName("import");})
   | 
  (BOOLEAN64711720{_builder.setName("boolean");})
   | 
  (BYTE3039496{_builder.setName("byte");})
   | 
  (SHORT109413500{_builder.setName("short");})
   | 
  (INT104431{_builder.setName("int");})
   | 
  (LONG3327612{_builder.setName("long");})
   | 
  (CHAR3052374{_builder.setName("char");})
   | 
  (FLOAT97526364{_builder.setName("float");})
   | 
  (DOUBLE2969009105{_builder.setName("double");})
   | 
  (VOID3625364{_builder.setName("void");})
   | 
  (TYPEIF3436164567{_builder.setName("typeif");})
   | 
  (INSTANCEOF902025516{_builder.setName("instanceof");})
   | 
  (THEN3558941{_builder.setName("then");})
   | 
  (ELSE3116345{_builder.setName("else");})
   | 
  (IF3357{_builder.setName("if");})
   | 
  (IMPLIES1925939383{_builder.setName("implies");})
   | 
  (FORALL3026177080{_builder.setName("forall");})
   | 
  (EXISTS3005609052{_builder.setName("exists");})
   | 
  (ANY96748{_builder.setName("any");})
   | 
  (LET107035{_builder.setName("let");})
   | 
  (IN3365{_builder.setName("in");})
   | 
  (ITERATE2116356218{_builder.setName("iterate");})
   | 
  (NULL3392903{_builder.setName("null");})
   | 
  (TRUE3569038{_builder.setName("true");})
   | 
  (FALSE97196323{_builder.setName("false");})
   | 
  (SEQUENCEDIAGRAM2966547954{_builder.setName("sequencediagram");})
   | 
  (STATIC3402485358{_builder.setName("static");})
   | 
  (NEW108960{_builder.setName("new");})
   | 
  (RETURN3360570672{_builder.setName("return");})
   | 
  (THROW110339814{_builder.setName("throw");})
   | 
  (CLASS94742904{_builder.setName("class");})
  ) 
  
  (
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp1=stringLiteral{_builder.setText(_localctx.tmp1.ret);}  
  
  
)?
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDArtifact'
sDArtifact returns [de.monticore.lang.sdbasis._ast.ASTSDArtifact ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDArtifactBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDArtifactBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (
  
  
 // Start of 'ASTTerminal package'
PACKAGE3487904838
   tmp0=mCQualifiedName{_builder.setPackageDeclaration(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
)?
  ( tmp1=mCImportStatement{addToIteratedAttributeIfNotNull(_builder.getMCImportStatementList(), _localctx.tmp1.ret);}) * 
  
   tmp2=sequenceDiagram{_builder.setSequenceDiagram(_localctx.tmp2.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SequenceDiagram'
sequenceDiagram returns [de.monticore.lang.sdbasis._ast.ASTSequenceDiagram ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSequenceDiagramBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sequenceDiagramBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=stereotype{_builder.setStereotype(_localctx.tmp0.ret);}) ? 
  
  ( tmp1=sDModifier{addToIteratedAttributeIfNotNull(_builder.getSDModifierList(), _localctx.tmp1.ret);}) * 
  
  
 // Start of 'ASTTerminal sequencediagram'
SEQUENCEDIAGRAM2966547954
  (tmp2=Name{_builder.setName(convertName($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp3=sDObject{addToIteratedAttributeIfNotNull(_builder.getSDObjectList(), _localctx.tmp3.ret);}) * 
  
   tmp4=sDBody{_builder.setSDBody(_localctx.tmp4.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDBody'
sDBody returns [de.monticore.lang.sdbasis._ast.ASTSDBody ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDBodyBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDBodyBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=sDElement{addToIteratedAttributeIfNotNull(_builder.getSDElementList(), _localctx.tmp0.ret);}) * 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDCompleteModifier'
sDCompleteModifier returns [de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDCompleteModifierBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDCompleteModifierBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3)}?
  
 // Start of 'ASTTerminal ('
LPAREN
  
 // Start of 'ASTKeyTerminal c'
((nokeyword_c99))// End of 'ASTKeyTerminal'

  
 // Start of 'ASTTerminal )'
RPAREN
  |
  
 // Start of 'ASTKeyTerminal complete'
((nokeyword_complete3695522105))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDFreeModifier'
sDFreeModifier returns [de.monticore.lang.sdbasis._ast.ASTSDFreeModifier ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDFreeModifierBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDFreeModifierBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ...'
POINTPOINTPOINT
  |
  
 // Start of 'ASTKeyTerminal free'
((nokeyword_free3151468))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDInitialModifier'
sDInitialModifier returns [de.monticore.lang.sdbasis._ast.ASTSDInitialModifier ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDInitialModifierBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDInitialModifierBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTKeyTerminal initial'
((nokeyword_initial1948342084))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDVisibleModifier'
sDVisibleModifier returns [de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDVisibleModifierBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDVisibleModifierBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTKeyTerminal visible'
((nokeyword_visible466743410))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDObject'
sDObject returns [de.monticore.lang.sdbasis._ast.ASTSDObject ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDObjectBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDObjectBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=stereotype{_builder.setStereotype(_localctx.tmp0.ret);}) ? 
  
  ( tmp1=sDModifier{addToIteratedAttributeIfNotNull(_builder.getSDModifierList(), _localctx.tmp1.ret);}) * 
  
  (tmp2=Name{_builder.setName(convertName($tmp2));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal :'
COLON
   tmp3=mCObjectType{_builder.setMCObjectType(_localctx.tmp3.ret);}  
  
  
)?
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDObjectSource'
sDObjectSource returns [de.monticore.lang.sdbasis._ast.ASTSDObjectSource ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDObjectSourceBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDObjectSourceBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDObjectTarget'
sDObjectTarget returns [de.monticore.lang.sdbasis._ast.ASTSDObjectTarget ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDObjectTargetBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDObjectTargetBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDSendMessage'
sDSendMessage returns [de.monticore.lang.sdbasis._ast.ASTSDSendMessage ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDSendMessageBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDSendMessageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=sDSource{_builder.setSDSource(_localctx.tmp0.ret);}) ? 
  
  
 // Start of 'ASTTerminal ->'
MINUSGT
  ( tmp1=sDTarget{_builder.setSDTarget(_localctx.tmp1.ret);}) ? 
  
  
 // Start of 'ASTTerminal :'
COLON
   tmp2=sDAction{_builder.setSDAction(_localctx.tmp2.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ;'
SEMI
  |
   tmp3=sDActivityBar{_builder.setSDActivityBar(_localctx.tmp3.ret);}  
  
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDActivityBar'
sDActivityBar returns [de.monticore.lang.sdbasis._ast.ASTSDActivityBar ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sdbasis._ast.ASTSDActivityBarBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDActivityBarBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp0=sDElement{addToIteratedAttributeIfNotNull(_builder.getSDElementList(), _localctx.tmp0.ret);}) * 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDCall'
sDCall returns [de.monticore.lang.sd4development._ast.ASTSDCall ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDCallBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDCallBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
((nokeyword_trigger3235075512){
_builder.setTrigger(true);
})?// End of 'ASTConstantGroup'

  
 // Start of 'ASTConstantGroup'
(STATIC3402485358{
_builder.setStatic(true);
})?// End of 'ASTConstantGroup'

  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  ( tmp1=arguments{_builder.setArguments(_localctx.tmp1.ret);}) ? 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDNew'
sDNew returns [de.monticore.lang.sd4development._ast.ASTSDNew ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDNewBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDNewBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=sDSource{_builder.setSDSource(_localctx.tmp0.ret);}) ? 
  
  
 // Start of 'ASTTerminal ->'
MINUSGT
   tmp1=mCObjectType{_builder.setDeclarationType(_localctx.tmp1.ret);}  
  
  (tmp2=Name{_builder.setName(convertName($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal ='
EQUALS
  
 // Start of 'ASTTerminal new'
NEW108960
   tmp3=mCObjectType{_builder.setInitializationType(_localctx.tmp3.ret);}  
  
   tmp4=arguments{_builder.setArguments(_localctx.tmp4.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ;'
SEMI
  |
   tmp5=sDActivityBar{_builder.setSDActivityBar(_localctx.tmp5.ret);}  
  
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDReturn'
sDReturn returns [de.monticore.lang.sd4development._ast.ASTSDReturn ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDReturnBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDReturnBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (
  
  
 // Start of 'ASTTerminal return'
RETURN3360570672
  ( tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}) ? 
  
  
)?
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDThrow'
sDThrow returns [de.monticore.lang.sd4development._ast.ASTSDThrow ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDThrowBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDThrowBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal throw'
THROW110339814
   tmp0=mCObjectType{_builder.setMCObjectType(_localctx.tmp0.ret);}  
  
  ( tmp1=arguments{_builder.setArguments(_localctx.tmp1.ret);}) ? 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDEndCall'
sDEndCall returns [de.monticore.lang.sd4development._ast.ASTSDEndCall ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDEndCallBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDEndCallBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  ( tmp0=sDTarget{_builder.setSDTarget(_localctx.tmp0.ret);}) ? 
  
   tmp1=sDEndCallArrow{_builder.setSDEndCallArrow(_localctx.tmp1.ret);}  
  
  ( tmp2=sDSource{_builder.setSDSource(_localctx.tmp2.ret);}) ? 
  
  
 // Start of 'ASTTerminal :'
COLON
   tmp3=sDAction{_builder.setSDAction(_localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDEndCallArrow'
sDEndCallArrow returns [de.monticore.lang.sd4development._ast.ASTSDEndCallArrow ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDEndCallArrowBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDEndCallArrowBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal <'
LT
  
 // Start of 'ASTTerminal -'
MINUS
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDIncompleteExpression'
sDIncompleteExpression returns [de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDIncompleteExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDIncompleteExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal ...'
POINTPOINTPOINT
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDClass'
sDClass returns [de.monticore.lang.sd4development._ast.ASTSDClass ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDClassBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDClassBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal class'
CLASS94742904
   tmp0=mCObjectType{_builder.setMCObjectType(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDCondition'
sDCondition returns [de.monticore.lang.sd4development._ast.ASTSDCondition ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDConditionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDConditionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTKeyTerminal assert'
((nokeyword_assert2886759238))// End of 'ASTKeyTerminal'

   tmp0=expression{_builder.setExpression(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SDVariableDeclaration'
sDVariableDeclaration returns [de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDVariableDeclarationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDVariableDeclarationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal let'
LET107035
   tmp0=mCType{_builder.setMCType(_localctx.tmp0.ret);}  
  
  (tmp1=Name{_builder.setName(convertName($tmp1));}

  ) 
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp2=expression{_builder.setAssignment(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'


  diagram
   returns [de.monticore.symbols.basicsymbols._ast.ASTDiagram ret]
  : 
  
  tmp3=sequenceDiagram
{$ret=$tmp3.ret;}
  ;
  type
   returns [de.monticore.symbols.basicsymbols._ast.ASTType ret]
  : 
  
  tmp4=oOType
{$ret=$tmp4.ret;}
  |
  tmp5=typeVar
{$ret=$tmp5.ret;}
  ;
  typeVar
   returns [de.monticore.symbols.basicsymbols._ast.ASTTypeVar ret]
  : 
  ;
  variable
   returns [de.monticore.symbols.basicsymbols._ast.ASTVariable ret]
  : 
  
  tmp6=sDNew
{$ret=$tmp6.ret;}
  |
  tmp7=sDVariableDeclaration
{$ret=$tmp7.ret;}
  |
  tmp8=sDObject
{$ret=$tmp8.ret;}
  |
  tmp9=oCLVariableDeclaration
{$ret=$tmp9.ret;}
  |
  tmp10=inDeclarationVariable
{$ret=$tmp10.ret;}
  |
  tmp11=field
{$ret=$tmp11.ret;}
  ;
  function
   returns [de.monticore.symbols.basicsymbols._ast.ASTFunction ret]
  : 
  
  tmp12=method
{$ret=$tmp12.ret;}
  ;
  oOType
   returns [de.monticore.symbols.oosymbols._ast.ASTOOType ret]
  : 
  ;
  field
   returns [de.monticore.symbols.oosymbols._ast.ASTField ret]
  : 
  ;
  method
   returns [de.monticore.symbols.oosymbols._ast.ASTMethod ret]
  : 
  ;
  mCType
   returns [de.monticore.types.mcbasictypes._ast.ASTMCType ret]
  : 
  
  tmp13=mCPrimitiveType
{$ret=$tmp13.ret;}
  |
  tmp14=mCObjectType
{$ret=$tmp14.ret;}
  ;
  mCObjectType
   returns [de.monticore.types.mcbasictypes._ast.ASTMCObjectType ret]
  : 
  
  tmp15=mCQualifiedType
{$ret=$tmp15.ret;}
  ;
  literal
   returns [de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ret]
  : 
  
  tmp16=numericLiteral
{$ret=$tmp16.ret;}
  |
  tmp17=nullLiteral
{$ret=$tmp17.ret;}
  |
  tmp18=booleanLiteral
{$ret=$tmp18.ret;}
  |
  tmp19=charLiteral
{$ret=$tmp19.ret;}
  |
  tmp20=stringLiteral
{$ret=$tmp20.ret;}
  ;
  expression
   returns [de.monticore.expressions.expressionsbasis._ast.ASTExpression ret]
  : 
  
   tmp21=expression{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTOCLAtPreQualificationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.oCLAtPreQualificationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setExpression(_localctx.tmp21.ret);}  
  
  
 // Start of 'ASTConstantGroup'
(LEXNAME0{
_builder.setAtpre(true);
})// End of 'ASTConstantGroup'

  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp22=expression{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTOCLTransitiveQualificationBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.oCLTransitiveQualificationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setExpression(_localctx.tmp22.ret);}  
  
  
 // Start of 'ASTConstantGroup'
(STARSTAR{
_builder.setTransitive(true);
})// End of 'ASTConstantGroup'

  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.expressionsbasis._ast.ASTNameExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.nameExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  (tmp23=Name{_builder.setName(convertName($tmp23));}

  ) 
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.literalExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp24=literal{_builder.setLiteral(_localctx.tmp24.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBracketExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.bracketExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal ('
LPAREN
   tmp25=expression{_builder.setExpression(_localctx.tmp25.ret);}  
  
  
 // Start of 'ASTTerminal )'
RPAREN
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
   tmp26=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTFieldAccessExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.fieldAccessExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setExpression(_localctx.tmp26.ret);}  
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp27=Name{_builder.setName(convertName($tmp27));}

  ) 
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp28=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTArrayAccessExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.arrayAccessExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setExpression(_localctx.tmp28.ret);}  
  
  
 // Start of 'ASTTerminal ['
LBRACK
   tmp29=expression{_builder.setIndexExpression(_localctx.tmp29.ret);}  
  
  
 // Start of 'ASTTerminal ]'
RBRACK
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp30=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTCallExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.callExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setExpression(_localctx.tmp30.ret);}  
  
   tmp31=arguments{_builder.setArguments(_localctx.tmp31.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.plusPrefixExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal +'
PLUS
   tmp32=expression{_builder.setExpression(_localctx.tmp32.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.minusPrefixExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal -'
MINUS
   tmp33=expression{_builder.setExpression(_localctx.tmp33.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanNotExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal ~'
TILDE
   tmp34=expression{_builder.setExpression(_localctx.tmp34.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.logicalNotExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal !'
EXCLAMATIONMARK
   tmp35=expression{_builder.setExpression(_localctx.tmp35.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
   tmp36=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMultExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.multExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp36.ret);}  
  
  
 // Start of 'ASTTerminal *'
STAR{_builder.setOperator("*");}
   tmp37=expression{_builder.setRight(_localctx.tmp37.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp38=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTDivideExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.divideExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp38.ret);}  
  
  
 // Start of 'ASTTerminal /'
SLASH{_builder.setOperator("/");}
   tmp39=expression{_builder.setRight(_localctx.tmp39.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp40=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTModuloExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.moduloExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp40.ret);}  
  
  
 // Start of 'ASTTerminal %'
PERCENT{_builder.setOperator("%");}
   tmp41=expression{_builder.setRight(_localctx.tmp41.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp42=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTPlusExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.plusExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp42.ret);}  
  
  
 // Start of 'ASTTerminal +'
PLUS{_builder.setOperator("+");}
   tmp43=expression{_builder.setRight(_localctx.tmp43.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp44=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMinusExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.minusExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp44.ret);}  
  
  
 // Start of 'ASTTerminal -'
MINUS{_builder.setOperator("-");}
   tmp45=expression{_builder.setRight(_localctx.tmp45.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp46=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLessEqualExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.lessEqualExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp46.ret);}  
  
  
 // Start of 'ASTTerminal <='
LTEQUALS{_builder.setOperator("<=");}
   tmp47=expression{_builder.setRight(_localctx.tmp47.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp48=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTGreaterEqualExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.greaterEqualExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp48.ret);}  
  
  
 // Start of 'ASTTerminal >='
GTEQUALS{_builder.setOperator(">=");}
   tmp49=expression{_builder.setRight(_localctx.tmp49.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp50=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLessThanExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.lessThanExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp50.ret);}  
  
  
 // Start of 'ASTTerminal <'
LT{_builder.setOperator("<");}
   tmp51=expression{_builder.setRight(_localctx.tmp51.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp52=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTGreaterThanExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.greaterThanExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp52.ret);}  
  
  
 // Start of 'ASTTerminal >'
GT{_builder.setOperator(">");}
   tmp53=expression{_builder.setRight(_localctx.tmp53.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp54=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTEqualsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.equalsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp54.ret);}  
  
  
 // Start of 'ASTTerminal =='
EQUALSEQUALS{_builder.setOperator("==");}
   tmp55=expression{_builder.setRight(_localctx.tmp55.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp56=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTNotEqualsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.notEqualsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp56.ret);}  
  
  
 // Start of 'ASTTerminal !='
EXCLAMATIONMARKEQUALS{_builder.setOperator("!=");}
   tmp57=expression{_builder.setRight(_localctx.tmp57.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp58=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanAndOpExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanAndOpExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp58.ret);}  
  
  
 // Start of 'ASTTerminal &&'
AND_AND_{_builder.setOperator("&&");}
   tmp59=expression{_builder.setRight(_localctx.tmp59.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp60=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanOrOpExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanOrOpExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp60.ret);}  
  
  
 // Start of 'ASTTerminal ||'
PIPEPIPE{_builder.setOperator("||");}
   tmp61=expression{_builder.setRight(_localctx.tmp61.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp62=expression{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTImpliesExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.impliesExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp62.ret);}  
  
  
 // Start of 'ASTTerminal implies'
IMPLIES1925939383
   tmp63=expression{_builder.setRight(_localctx.tmp63.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp64=expression{// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTEquivalentExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.equivalentExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setLeft(_localctx.tmp64.ret);}  
  
  
 // Start of 'ASTTerminal <=>'
LTEQUALSGT{_builder.setOperator("<=>");}
   tmp65=expression{_builder.setRight(_localctx.tmp65.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
   tmp66=expression{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTConditionalExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.conditionalExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
_builder.setCondition(_localctx.tmp66.ret);}  
  
  
 // Start of 'ASTTerminal ?'
QUESTION
   tmp67=expression{_builder.setTrueExpression(_localctx.tmp67.ret);}  
  
  
 // Start of 'ASTTerminal :'
COLON
   tmp68=expression{_builder.setFalseExpression(_localctx.tmp68.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.typeIfExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal typeif'
TYPEIF3436164567
  (tmp69=Name{_builder.setName(convertName($tmp69));}

  ) 
  
  
 // Start of 'ASTTerminal instanceof'
INSTANCEOF902025516
   tmp70=mCType{_builder.setMCType(_localctx.tmp70.ret);}  
  
  
 // Start of 'ASTTerminal then'
THEN3558941
   tmp71=typeIfThenExpression{_builder.setThenExpression(_localctx.tmp71.ret);}  
  
  
 // Start of 'ASTTerminal else'
ELSE3116345
   tmp72=expression{_builder.setElseExpression(_localctx.tmp72.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.ifThenElseExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal if'
IF3357
   tmp73=expression{_builder.setCondition(_localctx.tmp73.ret);}  
  
  
 // Start of 'ASTTerminal then'
THEN3558941
   tmp74=expression{_builder.setThenExpression(_localctx.tmp74.ret);}  
  
  
 // Start of 'ASTTerminal else'
ELSE3116345
   tmp75=expression{_builder.setElseExpression(_localctx.tmp75.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTAnyExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.anyExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal any'
ANY96748
   tmp76=expression{_builder.setExpression(_localctx.tmp76.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTLetinExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.letinExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal let'
LET107035
  (
  
   tmp77=oCLVariableDeclaration{addToIteratedAttributeIfNotNull(_builder.getOCLVariableDeclarationList(), _localctx.tmp77.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp78=oCLVariableDeclaration{addToIteratedAttributeIfNotNull(_builder.getOCLVariableDeclarationList(), _localctx.tmp78.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal in'
IN3365
   tmp79=expression{_builder.setExpression(_localctx.tmp79.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTIterateExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.iterateExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal iterate'
ITERATE2116356218
  
 // Start of 'ASTTerminal {'
LCURLY
   tmp80=inDeclaration{_builder.setIteration(_localctx.tmp80.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp81=oCLVariableDeclaration{_builder.setInit(_localctx.tmp81.ret);}  
  
  
 // Start of 'ASTTerminal :'
COLON
  (tmp82=Name{_builder.setName(convertName($tmp82));}

  ) 
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp83=expression{_builder.setValue(_localctx.tmp83.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTForallExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.forallExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal forall'
FORALL3026177080
  (
  
   tmp84=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp84.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp85=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp85.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal :'
COLON
   tmp86=expression{_builder.setExpression(_localctx.tmp86.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.ocl.oclexpressions._ast.ASTExistsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.existsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal exists'
EXISTS3005609052
  (
  
   tmp87=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp87.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp88=inDeclaration{addToIteratedAttributeIfNotNull(_builder.getInDeclarationList(), _localctx.tmp88.ret);}  
  
  
)*
  
)
  
 // Start of 'ASTTerminal :'
COLON
   tmp89=expression{_builder.setExpression(_localctx.tmp89.ret);}  
  
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.lang.sd4development._ast.ASTSDIncompleteExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.sDIncompleteExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
  
 // Start of 'ASTTerminal ...'
POINTPOINTPOINT
  {
_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();
}
  ;
  infixExpression
   returns [de.monticore.expressions.commonexpressions._ast.ASTInfixExpression ret]
  : 
  
  
 // Start of 'InfixExpression'
{// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMultExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.multExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp36=expression{_builder.setLeft(_localctx.tmp36.ret);}  
  
  
 // Start of 'ASTTerminal *'
STAR{_builder.setOperator("*");}
   tmp37=expression{_builder.setRight(_localctx.tmp37.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTDivideExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.divideExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp38=expression{_builder.setLeft(_localctx.tmp38.ret);}  
  
  
 // Start of 'ASTTerminal /'
SLASH{_builder.setOperator("/");}
   tmp39=expression{_builder.setRight(_localctx.tmp39.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTModuloExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.moduloExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp40=expression{_builder.setLeft(_localctx.tmp40.ret);}  
  
  
 // Start of 'ASTTerminal %'
PERCENT{_builder.setOperator("%");}
   tmp41=expression{_builder.setRight(_localctx.tmp41.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTPlusExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.plusExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp42=expression{_builder.setLeft(_localctx.tmp42.ret);}  
  
  
 // Start of 'ASTTerminal +'
PLUS{_builder.setOperator("+");}
   tmp43=expression{_builder.setRight(_localctx.tmp43.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTMinusExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.minusExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp44=expression{_builder.setLeft(_localctx.tmp44.ret);}  
  
  
 // Start of 'ASTTerminal -'
MINUS{_builder.setOperator("-");}
   tmp45=expression{_builder.setRight(_localctx.tmp45.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLessEqualExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.lessEqualExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp46=expression{_builder.setLeft(_localctx.tmp46.ret);}  
  
  
 // Start of 'ASTTerminal <='
LTEQUALS{_builder.setOperator("<=");}
   tmp47=expression{_builder.setRight(_localctx.tmp47.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTGreaterEqualExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.greaterEqualExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp48=expression{_builder.setLeft(_localctx.tmp48.ret);}  
  
  
 // Start of 'ASTTerminal >='
GTEQUALS{_builder.setOperator(">=");}
   tmp49=expression{_builder.setRight(_localctx.tmp49.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTLessThanExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.lessThanExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp50=expression{_builder.setLeft(_localctx.tmp50.ret);}  
  
  
 // Start of 'ASTTerminal <'
LT{_builder.setOperator("<");}
   tmp51=expression{_builder.setRight(_localctx.tmp51.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTGreaterThanExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.greaterThanExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp52=expression{_builder.setLeft(_localctx.tmp52.ret);}  
  
  
 // Start of 'ASTTerminal >'
GT{_builder.setOperator(">");}
   tmp53=expression{_builder.setRight(_localctx.tmp53.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTEqualsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.equalsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp54=expression{_builder.setLeft(_localctx.tmp54.ret);}  
  
  
 // Start of 'ASTTerminal =='
EQUALSEQUALS{_builder.setOperator("==");}
   tmp55=expression{_builder.setRight(_localctx.tmp55.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTNotEqualsExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.notEqualsExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp56=expression{_builder.setLeft(_localctx.tmp56.ret);}  
  
  
 // Start of 'ASTTerminal !='
EXCLAMATIONMARKEQUALS{_builder.setOperator("!=");}
   tmp57=expression{_builder.setRight(_localctx.tmp57.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanAndOpExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanAndOpExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp58=expression{_builder.setLeft(_localctx.tmp58.ret);}  
  
  
 // Start of 'ASTTerminal &&'
AND_AND_{_builder.setOperator("&&");}
   tmp59=expression{_builder.setRight(_localctx.tmp59.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  |
  {// getActionForAltBeforeRuleBody
de.monticore.expressions.commonexpressions._ast.ASTBooleanOrOpExpressionBuilder _builder = de.monticore.lang.sd4development.SD4DevelopmentMill.booleanOrOpExpressionBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
   tmp60=expression{_builder.setLeft(_localctx.tmp60.ret);}  
  
  
 // Start of 'ASTTerminal ||'
PIPEPIPE{_builder.setOperator("||");}
   tmp61=expression{_builder.setRight(_localctx.tmp61.ret);}  
  
  {_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  ;
  signedLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ret]
  : 
  
  tmp90=signedNumericLiteral
{$ret=$tmp90.ret;}
  |
  tmp17=nullLiteral
{$ret=$tmp17.ret;}
  |
  tmp18=booleanLiteral
{$ret=$tmp18.ret;}
  |
  tmp19=charLiteral
{$ret=$tmp19.ret;}
  |
  tmp20=stringLiteral
{$ret=$tmp20.ret;}
  ;
  numericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ret]
  : 
  
  tmp91=natLiteral
{$ret=$tmp91.ret;}
  |
  tmp92=basicLongLiteral
{$ret=$tmp92.ret;}
  |
  tmp93=basicFloatLiteral
{$ret=$tmp93.ret;}
  |
  tmp94=basicDoubleLiteral
{$ret=$tmp94.ret;}
  ;
  signedNumericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ret]
  : 
  
  tmp95=signedNatLiteral
{$ret=$tmp95.ret;}
  |
  tmp96=signedBasicLongLiteral
{$ret=$tmp96.ret;}
  |
  tmp97=signedBasicFloatLiteral
{$ret=$tmp97.ret;}
  |
  tmp98=signedBasicDoubleLiteral
{$ret=$tmp98.ret;}
  ;
  sDModifier
   returns [de.monticore.lang.sdbasis._ast.ASTSDModifier ret]
  : 
  
  tmp99=sDCompleteModifier
{$ret=$tmp99.ret;}
  |
  tmp100=sDFreeModifier
{$ret=$tmp100.ret;}
  |
  tmp101=sDInitialModifier
{$ret=$tmp101.ret;}
  |
  tmp102=sDVisibleModifier
{$ret=$tmp102.ret;}
  ;
  sDElement
   returns [de.monticore.lang.sdbasis._ast.ASTSDElement ret]
  : 
  
  tmp103=sDCondition
{$ret=$tmp103.ret;}
  |
  tmp7=sDVariableDeclaration
{$ret=$tmp7.ret;}
  |
  tmp104=sDInteraction
{$ret=$tmp104.ret;}
  ;
  sDInteraction
   returns [de.monticore.lang.sdbasis._ast.ASTSDInteraction ret]
  : 
  
  tmp6=sDNew
{$ret=$tmp6.ret;}
  |
  tmp105=sDEndCall
{$ret=$tmp105.ret;}
  |
  tmp106=sDSendMessage
{$ret=$tmp106.ret;}
  ;
  sDSource
   returns [de.monticore.lang.sdbasis._ast.ASTSDSource ret]
  : 
  
  tmp107=sDClass
{$ret=$tmp107.ret;}
  |
  tmp108=sDObjectSource
{$ret=$tmp108.ret;}
  ;
  sDTarget
   returns [de.monticore.lang.sdbasis._ast.ASTSDTarget ret]
  : 
  
  tmp107=sDClass
{$ret=$tmp107.ret;}
  |
  tmp109=sDObjectTarget
{$ret=$tmp109.ret;}
  ;
  sDAction
   returns [de.monticore.lang.sdbasis._ast.ASTSDAction ret]
  : 
  
  tmp110=sDCall
{$ret=$tmp110.ret;}
  |
  tmp111=sDReturn
{$ret=$tmp111.ret;}
  |
  tmp112=sDThrow
{$ret=$tmp112.ret;}
  ;

  nokeyword_c99 : {next("c")}? Name;
  nokeyword_visible466743410 : {next("visible")}? Name;
  nokeyword_initial1948342084 : {next("initial")}? Name;
  nokeyword_f102 : {next("f")}? Name;
  nokeyword_F70 : {next("F")}? Name;
  nokeyword_assert2886759238 : {next("assert")}? Name;
  nokeyword_trigger3235075512 : {next("trigger")}? Name;
  nokeyword_l108 : {next("l")}? Name;
  nokeyword_L76 : {next("L")}? Name;
  nokeyword_complete3695522105 : {next("complete")}? Name;
  nokeyword_free3151468 : {next("free")}? Name;

 gtgt : {noSpace(2)}? GT GT ;

