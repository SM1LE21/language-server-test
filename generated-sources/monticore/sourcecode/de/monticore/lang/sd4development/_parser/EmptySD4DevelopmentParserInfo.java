/* generated by template parser.EmptyParserInfo*/

package de.monticore.lang.sd4development._parser;

import java.util.*;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForSDBasis;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCCommonLiterals;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForCommonExpressions;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForOCLExpressions;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForOOSymbols;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCBasicTypes;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForBasicSymbols;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForExpressionsBasis;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForUMLStereotype;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCBasics;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCLiteralsBasis;
import de.monticore.lang.sdbasis._parser.SDBasisParserInfo;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;
import de.monticore.expressions.commonexpressions._parser.CommonExpressionsParserInfo;
import de.monticore.ocl.oclexpressions._parser.OCLExpressionsParserInfo;
import de.monticore.symbols.oosymbols._parser.OOSymbolsParserInfo;
import de.monticore.types.mcbasictypes._parser.MCBasicTypesParserInfo;
import de.monticore.symbols.basicsymbols._parser.BasicSymbolsParserInfo;
import de.monticore.expressions.expressionsbasis._parser.ExpressionsBasisParserInfo;
import de.monticore.umlstereotype._parser.UMLStereotypeParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;

/**
 * Implementation of SD4DevelopmentParserInfo where every method returns false.
 * This is used in the static delegate pattern as the superclass for the ParserInfoForSuperLang classes.
 * Therefore, the ParserInfoForSuperLang classes don't have to know all symbol references and usage names that are used in a super-language, but not in the sub-language.
 */
public abstract class EmptySD4DevelopmentParserInfo extends SD4DevelopmentParserInfo{
    @Override
    protected boolean _stateReferencesVariableSymbol(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameParts(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCQualifiedName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCVoidType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameLiteral(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameExpression(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameThenExpression(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameElseExpression(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameCondition(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameInDeclaration(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameOCLVariableDeclaration(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameIteration(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameInit(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameValue(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameInDeclarationVariable(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSource(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDigits(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePre(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePost(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameValues(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameText(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePackageDeclaration(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCImportStatement(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSequenceDiagram(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameStereotype(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDModifier(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDObject(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDBody(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDElement(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCObjectType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDSource(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDTarget(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDAction(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDActivityBar(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameArguments(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDeclarationType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameInitializationType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSDEndCallArrow(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameAssignment(int state){
      return false;
    }


  protected boolean _stateDefinesName(int state){
    return false;
  }
}
