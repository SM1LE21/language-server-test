/* generated by template parser.ParserInfo*/

package de.monticore.lang.sd4development._parser;

import java.util.*;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForSDBasis;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCCommonLiterals;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForCommonExpressions;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForOCLExpressions;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForOOSymbols;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCBasicTypes;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForBasicSymbols;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForExpressionsBasis;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForUMLStereotype;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCBasics;
import de.monticore.lang.sd4development._parser._auxiliary.SD4DevelopmentParserInfoForMCLiteralsBasis;
import de.monticore.lang.sdbasis._parser.SDBasisParserInfo;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;
import de.monticore.expressions.commonexpressions._parser.CommonExpressionsParserInfo;
import de.monticore.ocl.oclexpressions._parser.OCLExpressionsParserInfo;
import de.monticore.symbols.oosymbols._parser.OOSymbolsParserInfo;
import de.monticore.types.mcbasictypes._parser.MCBasicTypesParserInfo;
import de.monticore.symbols.basicsymbols._parser.BasicSymbolsParserInfo;
import de.monticore.expressions.expressionsbasis._parser.ExpressionsBasisParserInfo;
import de.monticore.umlstereotype._parser.UMLStereotypeParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;

public class SD4DevelopmentParserInfo {
  // References
  protected static Set<Integer> statesReferencingVariable = new HashSet<>(Arrays.asList( 295, 381, 756, 759 ));

  // Usage names
  protected static Set<Integer> statesWithUsageNameParts = new HashSet<>(Arrays.asList( 192, 196 ));
  protected static Set<Integer> statesWithUsageNameMCQualifiedName = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCVoidType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameName = new HashSet<>(Arrays.asList( 249, 276, 295, 381, 424, 586, 692, 745, 756, 759, 802, 818, 883 ));
  protected static Set<Integer> statesWithUsageNameLiteral = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameExpression = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameThenExpression = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameElseExpression = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameCondition = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameInDeclaration = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameOCLVariableDeclaration = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameIteration = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameInit = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameValue = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameInDeclarationVariable = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSource = new HashSet<>(Arrays.asList( 456, 459 ));
  protected static Set<Integer> statesWithUsageNameDigits = new HashSet<>(Arrays.asList( 462, 469, 471, 476, 487, 495 ));
  protected static Set<Integer> statesWithUsageNamePre = new HashSet<>(Arrays.asList( 505, 520, 532, 546, 557, 564 ));
  protected static Set<Integer> statesWithUsageNamePost = new HashSet<>(Arrays.asList( 509, 524, 536, 550, 561, 568 ));
  protected static Set<Integer> statesWithUsageNameValues = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameText = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNamePackageDeclaration = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCImportStatement = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSequenceDiagram = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameStereotype = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDModifier = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDObject = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDBody = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDElement = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameMCObjectType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDSource = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDTarget = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDAction = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDActivityBar = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameArguments = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameDeclarationType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameInitializationType = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameSDEndCallArrow = Collections.emptySet();
  protected static Set<Integer> statesWithUsageNameAssignment = Collections.emptySet();

  // Named defining
  protected static Set<Integer> statesDefiningName = new HashSet<>(Arrays.asList( 276, 424, 692, 745, 818, 883 ));
  protected static SD4DevelopmentParserInfo delegate;

  protected static SD4DevelopmentParserInfo getDelegate(){
      if(delegate == null){
        init();
      }
      return delegate;
  }


  public static void init(){
    delegate = new SD4DevelopmentParserInfo();
    SDBasisParserInfo.initMe(new SD4DevelopmentParserInfoForSDBasis());
    MCCommonLiteralsParserInfo.initMe(new SD4DevelopmentParserInfoForMCCommonLiterals());
    CommonExpressionsParserInfo.initMe(new SD4DevelopmentParserInfoForCommonExpressions());
    OCLExpressionsParserInfo.initMe(new SD4DevelopmentParserInfoForOCLExpressions());
    OOSymbolsParserInfo.initMe(new SD4DevelopmentParserInfoForOOSymbols());
    MCBasicTypesParserInfo.initMe(new SD4DevelopmentParserInfoForMCBasicTypes());
    BasicSymbolsParserInfo.initMe(new SD4DevelopmentParserInfoForBasicSymbols());
    ExpressionsBasisParserInfo.initMe(new SD4DevelopmentParserInfoForExpressionsBasis());
    UMLStereotypeParserInfo.initMe(new SD4DevelopmentParserInfoForUMLStereotype());
    MCBasicsParserInfo.initMe(new SD4DevelopmentParserInfoForMCBasics());
    MCLiteralsBasisParserInfo.initMe(new SD4DevelopmentParserInfoForMCLiteralsBasis());
  }

  public static void initMe(SD4DevelopmentParserInfo _delegate){
    delegate = _delegate;
  }

  public static boolean stateReferencesVariableSymbol(int state){
    return getDelegate()._stateReferencesVariableSymbol(state);
  }

  protected boolean _stateReferencesVariableSymbol(int state){
    return statesReferencingVariable.contains(state);
  }

  public static boolean stateHasUsageNameParts(int state){
    return getDelegate()._stateHasUsageNameParts(state);
  }

  protected boolean _stateHasUsageNameParts(int state){
    return statesWithUsageNameParts.contains(state);
  }

  public static boolean stateHasUsageNameMCQualifiedName(int state){
    return getDelegate()._stateHasUsageNameMCQualifiedName(state);
  }

  protected boolean _stateHasUsageNameMCQualifiedName(int state){
    return statesWithUsageNameMCQualifiedName.contains(state);
  }

  public static boolean stateHasUsageNameMCVoidType(int state){
    return getDelegate()._stateHasUsageNameMCVoidType(state);
  }

  protected boolean _stateHasUsageNameMCVoidType(int state){
    return statesWithUsageNameMCVoidType.contains(state);
  }

  public static boolean stateHasUsageNameMCType(int state){
    return getDelegate()._stateHasUsageNameMCType(state);
  }

  protected boolean _stateHasUsageNameMCType(int state){
    return statesWithUsageNameMCType.contains(state);
  }

  public static boolean stateHasUsageNameName(int state){
    return getDelegate()._stateHasUsageNameName(state);
  }

  protected boolean _stateHasUsageNameName(int state){
    return statesWithUsageNameName.contains(state);
  }

  public static boolean stateHasUsageNameLiteral(int state){
    return getDelegate()._stateHasUsageNameLiteral(state);
  }

  protected boolean _stateHasUsageNameLiteral(int state){
    return statesWithUsageNameLiteral.contains(state);
  }

  public static boolean stateHasUsageNameExpression(int state){
    return getDelegate()._stateHasUsageNameExpression(state);
  }

  protected boolean _stateHasUsageNameExpression(int state){
    return statesWithUsageNameExpression.contains(state);
  }

  public static boolean stateHasUsageNameThenExpression(int state){
    return getDelegate()._stateHasUsageNameThenExpression(state);
  }

  protected boolean _stateHasUsageNameThenExpression(int state){
    return statesWithUsageNameThenExpression.contains(state);
  }

  public static boolean stateHasUsageNameElseExpression(int state){
    return getDelegate()._stateHasUsageNameElseExpression(state);
  }

  protected boolean _stateHasUsageNameElseExpression(int state){
    return statesWithUsageNameElseExpression.contains(state);
  }

  public static boolean stateHasUsageNameCondition(int state){
    return getDelegate()._stateHasUsageNameCondition(state);
  }

  protected boolean _stateHasUsageNameCondition(int state){
    return statesWithUsageNameCondition.contains(state);
  }

  public static boolean stateHasUsageNameInDeclaration(int state){
    return getDelegate()._stateHasUsageNameInDeclaration(state);
  }

  protected boolean _stateHasUsageNameInDeclaration(int state){
    return statesWithUsageNameInDeclaration.contains(state);
  }

  public static boolean stateHasUsageNameOCLVariableDeclaration(int state){
    return getDelegate()._stateHasUsageNameOCLVariableDeclaration(state);
  }

  protected boolean _stateHasUsageNameOCLVariableDeclaration(int state){
    return statesWithUsageNameOCLVariableDeclaration.contains(state);
  }

  public static boolean stateHasUsageNameIteration(int state){
    return getDelegate()._stateHasUsageNameIteration(state);
  }

  protected boolean _stateHasUsageNameIteration(int state){
    return statesWithUsageNameIteration.contains(state);
  }

  public static boolean stateHasUsageNameInit(int state){
    return getDelegate()._stateHasUsageNameInit(state);
  }

  protected boolean _stateHasUsageNameInit(int state){
    return statesWithUsageNameInit.contains(state);
  }

  public static boolean stateHasUsageNameValue(int state){
    return getDelegate()._stateHasUsageNameValue(state);
  }

  protected boolean _stateHasUsageNameValue(int state){
    return statesWithUsageNameValue.contains(state);
  }

  public static boolean stateHasUsageNameInDeclarationVariable(int state){
    return getDelegate()._stateHasUsageNameInDeclarationVariable(state);
  }

  protected boolean _stateHasUsageNameInDeclarationVariable(int state){
    return statesWithUsageNameInDeclarationVariable.contains(state);
  }

  public static boolean stateHasUsageNameSource(int state){
    return getDelegate()._stateHasUsageNameSource(state);
  }

  protected boolean _stateHasUsageNameSource(int state){
    return statesWithUsageNameSource.contains(state);
  }

  public static boolean stateHasUsageNameDigits(int state){
    return getDelegate()._stateHasUsageNameDigits(state);
  }

  protected boolean _stateHasUsageNameDigits(int state){
    return statesWithUsageNameDigits.contains(state);
  }

  public static boolean stateHasUsageNamePre(int state){
    return getDelegate()._stateHasUsageNamePre(state);
  }

  protected boolean _stateHasUsageNamePre(int state){
    return statesWithUsageNamePre.contains(state);
  }

  public static boolean stateHasUsageNamePost(int state){
    return getDelegate()._stateHasUsageNamePost(state);
  }

  protected boolean _stateHasUsageNamePost(int state){
    return statesWithUsageNamePost.contains(state);
  }

  public static boolean stateHasUsageNameValues(int state){
    return getDelegate()._stateHasUsageNameValues(state);
  }

  protected boolean _stateHasUsageNameValues(int state){
    return statesWithUsageNameValues.contains(state);
  }

  public static boolean stateHasUsageNameText(int state){
    return getDelegate()._stateHasUsageNameText(state);
  }

  protected boolean _stateHasUsageNameText(int state){
    return statesWithUsageNameText.contains(state);
  }

  public static boolean stateHasUsageNamePackageDeclaration(int state){
    return getDelegate()._stateHasUsageNamePackageDeclaration(state);
  }

  protected boolean _stateHasUsageNamePackageDeclaration(int state){
    return statesWithUsageNamePackageDeclaration.contains(state);
  }

  public static boolean stateHasUsageNameMCImportStatement(int state){
    return getDelegate()._stateHasUsageNameMCImportStatement(state);
  }

  protected boolean _stateHasUsageNameMCImportStatement(int state){
    return statesWithUsageNameMCImportStatement.contains(state);
  }

  public static boolean stateHasUsageNameSequenceDiagram(int state){
    return getDelegate()._stateHasUsageNameSequenceDiagram(state);
  }

  protected boolean _stateHasUsageNameSequenceDiagram(int state){
    return statesWithUsageNameSequenceDiagram.contains(state);
  }

  public static boolean stateHasUsageNameStereotype(int state){
    return getDelegate()._stateHasUsageNameStereotype(state);
  }

  protected boolean _stateHasUsageNameStereotype(int state){
    return statesWithUsageNameStereotype.contains(state);
  }

  public static boolean stateHasUsageNameSDModifier(int state){
    return getDelegate()._stateHasUsageNameSDModifier(state);
  }

  protected boolean _stateHasUsageNameSDModifier(int state){
    return statesWithUsageNameSDModifier.contains(state);
  }

  public static boolean stateHasUsageNameSDObject(int state){
    return getDelegate()._stateHasUsageNameSDObject(state);
  }

  protected boolean _stateHasUsageNameSDObject(int state){
    return statesWithUsageNameSDObject.contains(state);
  }

  public static boolean stateHasUsageNameSDBody(int state){
    return getDelegate()._stateHasUsageNameSDBody(state);
  }

  protected boolean _stateHasUsageNameSDBody(int state){
    return statesWithUsageNameSDBody.contains(state);
  }

  public static boolean stateHasUsageNameSDElement(int state){
    return getDelegate()._stateHasUsageNameSDElement(state);
  }

  protected boolean _stateHasUsageNameSDElement(int state){
    return statesWithUsageNameSDElement.contains(state);
  }

  public static boolean stateHasUsageNameMCObjectType(int state){
    return getDelegate()._stateHasUsageNameMCObjectType(state);
  }

  protected boolean _stateHasUsageNameMCObjectType(int state){
    return statesWithUsageNameMCObjectType.contains(state);
  }

  public static boolean stateHasUsageNameSDSource(int state){
    return getDelegate()._stateHasUsageNameSDSource(state);
  }

  protected boolean _stateHasUsageNameSDSource(int state){
    return statesWithUsageNameSDSource.contains(state);
  }

  public static boolean stateHasUsageNameSDTarget(int state){
    return getDelegate()._stateHasUsageNameSDTarget(state);
  }

  protected boolean _stateHasUsageNameSDTarget(int state){
    return statesWithUsageNameSDTarget.contains(state);
  }

  public static boolean stateHasUsageNameSDAction(int state){
    return getDelegate()._stateHasUsageNameSDAction(state);
  }

  protected boolean _stateHasUsageNameSDAction(int state){
    return statesWithUsageNameSDAction.contains(state);
  }

  public static boolean stateHasUsageNameSDActivityBar(int state){
    return getDelegate()._stateHasUsageNameSDActivityBar(state);
  }

  protected boolean _stateHasUsageNameSDActivityBar(int state){
    return statesWithUsageNameSDActivityBar.contains(state);
  }

  public static boolean stateHasUsageNameArguments(int state){
    return getDelegate()._stateHasUsageNameArguments(state);
  }

  protected boolean _stateHasUsageNameArguments(int state){
    return statesWithUsageNameArguments.contains(state);
  }

  public static boolean stateHasUsageNameDeclarationType(int state){
    return getDelegate()._stateHasUsageNameDeclarationType(state);
  }

  protected boolean _stateHasUsageNameDeclarationType(int state){
    return statesWithUsageNameDeclarationType.contains(state);
  }

  public static boolean stateHasUsageNameInitializationType(int state){
    return getDelegate()._stateHasUsageNameInitializationType(state);
  }

  protected boolean _stateHasUsageNameInitializationType(int state){
    return statesWithUsageNameInitializationType.contains(state);
  }

  public static boolean stateHasUsageNameSDEndCallArrow(int state){
    return getDelegate()._stateHasUsageNameSDEndCallArrow(state);
  }

  protected boolean _stateHasUsageNameSDEndCallArrow(int state){
    return statesWithUsageNameSDEndCallArrow.contains(state);
  }

  public static boolean stateHasUsageNameAssignment(int state){
    return getDelegate()._stateHasUsageNameAssignment(state);
  }

  protected boolean _stateHasUsageNameAssignment(int state){
    return statesWithUsageNameAssignment.contains(state);
  }

  public static boolean stateDefinesName(int state){
    return getDelegate()._stateDefinesName(state);
  }

  protected boolean _stateDefinesName(int state){
    return statesDefiningName.contains(state);
  }
}
