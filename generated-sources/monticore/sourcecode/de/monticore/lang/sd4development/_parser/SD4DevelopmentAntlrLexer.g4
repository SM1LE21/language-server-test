/* generated by template parser.Lexer*/

lexer grammar SD4DevelopmentAntlrLexer;

@lexer::header {
  package de.monticore.lang.sd4development._parser;
}

/* generated by template parser.LexerMember*/


@lexer::members {



private SD4DevelopmentAntlrParser _monticore_parser;

protected SD4DevelopmentAntlrParser getCompiler() {
   return _monticore_parser;
}

public void setMCParser(SD4DevelopmentAntlrParser in) {
  this._monticore_parser = in;
}

protected void storeComment(){
  if (getCompiler() != null) {
    de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
    de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine, getCompiler().getFilename());
    _comment.set_SourcePositionStart(startPos);
    _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
    getCompiler().addComment(_comment);
  }
}
}


  LTLT : '<<';
  PIPEPIPE : '||';
  LTEQUALS : '<=';
  FLOAT97526364 : 'float';
  ELSE3116345 : 'else';
  TYPEIF3436164567 : 'typeif';
  LET107035 : 'let';
  IF3357 : 'if';
  EQUALSEQUALS : '==';
  EXCLAMATIONMARK : '!';
  NEW108960 : 'new';
  PACKAGE3487904838 : 'package';
  VOID3625364 : 'void';
  SEQUENCEDIAGRAM2966547954 : 'sequencediagram';
  STATIC3402485358 : 'static';
  IN3365 : 'in';
  PERCENT : '%';
  BYTE3039496 : 'byte';
  DOUBLE2969009105 : 'double';
  LPAREN : '(';
  RPAREN : ')';
  STAR : '*';
  THEN3558941 : 'then';
  PLUS : '+';
  COMMA : ',';
  MINUS : '-';
  POINT : '.';
  SLASH : '/';
  MINUSGT : '->';
  NULL3392903 : 'null';
  TRUE3569038 : 'true';
  COLON : ':';
  SEMI : ';';
  LT : '<';
  EXCLAMATIONMARKEQUALS : '!=';
  EQUALS : '=';
  GT : '>';
  GTEQUALS : '>=';
  QUESTION : '?';
  STARSTAR : '**';
  AND_AND_ : '&&';
  IMPORT3110171557 : 'import';
  LONG3327612 : 'long';
  LBRACK : '[';
  RBRACK : ']';
  CLASS94742904 : 'class';
  LTEQUALSGT : '<=>';
  ITERATE2116356218 : 'iterate';
  FORALL3026177080 : 'forall';
  FALSE97196323 : 'false';
  ANY96748 : 'any';
  INT104431 : 'int';
  POINTPOINTPOINT : '...';
  INSTANCEOF902025516 : 'instanceof';
  BOOLEAN64711720 : 'boolean';
  THROW110339814 : 'throw';
  CHAR3052374 : 'char';
  SHORT109413500 : 'short';
  EXISTS3005609052 : 'exists';
  LCURLY : '{';
  IMPLIES1925939383 : 'implies';
  RCURLY : '}';
  LEXNAME0 : '@pre';
  TILDE : '~';
  RETURN3360570672 : 'return';
 

      
 // Start of 'ASTLexProd Digit'
fragment Digit 
      
:
      
      '0'..'9'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalDigit'
fragment OctalDigit 
      
:
      
      '0'..'7'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd StringCharacters'
fragment StringCharacters 
      
:
      
      (
      
       StringCharacter 
      )
+
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd SingleCharacter'
fragment SingleCharacter 
      
:
      
      ~(
      
      '\'' 
      )

      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd NEWLINE'
fragment NEWLINE 
      
:
      
      (
      
      '\r' 
      '\n' 
      |
      '\r' 
      |
      '\n' 
      )

      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Digits'
Digits 
      
:
      
      (
       Digit 
      )
+
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd EscapeSequence'
fragment EscapeSequence 
      
:
      
      '\\' 
      (
      
      'b' 
      |
      't' 
      |
      'n' 
      |
      'f' 
      |
      'r' 
      |
      '"' 
      |
      '\'' 
      |
      '\\' 
      )

      |
       OctalEscape 
      |
       UnicodeEscape 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd String'
String 
      
:
      
      '"' 
      (
      
       StringCharacters 
      )
?
      '"' 
      {setText(getText().substring(1,getText().length() - 1));

};
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexDigit'
fragment HexDigit 
      
:
      
      '0'..'9'  
      |
      'a'..'f'  
      |
      'A'..'F'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd StringCharacter'
fragment StringCharacter 
      
:
      
      ~(
      
      '"' 
      |
      '\\' 
      )

      |
       EscapeSequence 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Name'
Name 
      
:
      
      (
      
      'a'..'z'  
      |
      'A'..'Z'  
      |
      '_' 
      |
      '$' 
      )

      (
      
      'a'..'z'  
      |
      'A'..'Z'  
      |
      '_' 
      |
      '0'..'9'  
      |
      '$' 
      )
*
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Char'
Char 
      
:
      
      '\'' 
      (
      
       SingleCharacter 
      |
       EscapeSequence 
      )

      '\'' 
      {setText(getText().substring(1,getText().length() - 1));

};
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ML_COMMENT'
ML_COMMENT 
      
:
      
      '/*' 
      (
      .
      )
*
      ?
      '*/' 
      {storeComment();

}->skip;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd SL_COMMENT'
SL_COMMENT 
      
:
      
      '//' 
      (
      
      ~(
      
      '\n' 
      |
      '\r' 
      )

      )
*
      {storeComment();

}->skip;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ZeroToThree'
fragment ZeroToThree 
      
:
      
      '0'..'3'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalEscape'
fragment OctalEscape 
      
:
      
      '\\' 
       OctalDigit 
      |
      '\\' 
       OctalDigit 
       OctalDigit 
      |
      '\\' 
       ZeroToThree 
       OctalDigit 
       OctalDigit 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd UnicodeEscape'
fragment UnicodeEscape 
      
:
      
      '\\' 
      'u' 
       HexDigit 
       HexDigit 
       HexDigit 
       HexDigit 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd WS'
WS 
      
:
      
      (
      
      ' ' 
      |
      '\t' 
      |
      '\r' 
      |
      '\n' 
      )

      ->skip;
// End of 'ASTLexProd'


