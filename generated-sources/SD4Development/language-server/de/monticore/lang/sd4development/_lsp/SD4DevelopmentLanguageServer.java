/* generated by template _lsp.LanguageServer*/

package de.monticore.lang.sd4development._lsp;

import de.monticore.lang.sd4development._symboltable.SD4DevelopmentGlobalScope;
import de.monticore.lang.sd4development._lsp.language_access.*;
import de.mclsg.lsp.CommonLanguageServer;
import de.mclsg.lsp.CommonTextDocumentService;
import de.mclsg.lsp.ISymbolUsageResolutionProvider;
import de.mclsg.lsp.document_management.DocumentManager;
import de.mclsg.lsp.extensions.syntax_highlighting.SyntaxHighlightingService;
import org.eclipse.lsp4j.ServerCapabilities;
import org.eclipse.lsp4j.TextDocumentSyncKind;
import org.eclipse.lsp4j.services.WorkspaceService;
import de.monticore.io.paths.MCPath;

public class SD4DevelopmentLanguageServer extends CommonLanguageServer {

    protected SD4DevelopmentTextDocumentService textDocumentService;
    protected SD4DevelopmentWorkspaceService workspaceService;
    protected SD4DevelopmentSyntaxHighlightingService syntaxHighlightingService;

    protected SD4DevelopmentLanguageAccess languageAccess;
		protected DocumentManager documentManager;
    protected SD4DevelopmentScopeManager scopeManager;
    protected ISymbolUsageResolutionProvider symbolUsageResolutionProvider;

    public SD4DevelopmentLanguageServer(DocumentManager documentManager, MCPath modelPath, SD4DevelopmentScopeManager scopeManager, ISymbolUsageResolutionProvider symbolUsageResolutionProvider) {
        this.documentManager = documentManager;
        this.scopeManager = scopeManager;
        this.symbolUsageResolutionProvider = symbolUsageResolutionProvider;
        scopeManager.initGlobalScope(modelPath);
        languageAccess = initLanguageAccess();
        textDocumentService = initTextDocumentService();
        syntaxHighlightingService = new SD4DevelopmentSyntaxHighlightingService(languageAccess);
				indexingManager = initIndexingManager(modelPath);
				workspaceService = initWorkspaceService();
        context = initContext();

        textDocumentService.getCapabilities().setTextDocumentSync(TextDocumentSyncKind.Full);
	}

  protected SD4DevelopmentLanguageAccess initLanguageAccess(){
    return new SD4DevelopmentLanguageAccess(documentManager, scopeManager);
  }

  protected de.mclsg.lsp.IndexingManager initIndexingManager(MCPath modelPath){
    return new SD4DevelopmentIndexingManager(modelPath, documentManager, textDocumentService.getDocumentInformationProvider(), (SD4DevelopmentLanguageServer) this);
  }

  protected SD4DevelopmentWorkspaceService initWorkspaceService(){
    return new SD4DevelopmentWorkspaceService((SD4DevelopmentLanguageServer) this, indexingManager);
  }

  protected SD4DevelopmentTextDocumentService initTextDocumentService(){
    return new SD4DevelopmentTextDocumentService((SD4DevelopmentLanguageServer) this, documentManager, this.languageClient, languageAccess, symbolUsageResolutionProvider);
  }

  protected SD4DevelopmentLanguageServerContext initContext(){
    return new SD4DevelopmentLanguageServerContext((SD4DevelopmentLanguageServer)this);
  }

	public void resetContent(MCPath modelPath){
		documentManager.reset();
		scopeManager.resetGlobalScope(modelPath);
		indexingManager = initIndexingManager(modelPath);
		if(automaticallyRunIndexing()){
			indexingManager.indexAllFilesInPath();
			afterIndexingHookpoint();
		}
	}

	@Override
	protected void afterIndexingHookpoint(){
        de.mclsg.lsp.util.AsyncUtil.runAsync(textDocumentService::triggerCoCoChecker);
	}

    @Override
    public ServerCapabilities getCapabilities() {
				ServerCapabilities capabilities = textDocumentService.getCapabilities();
				capabilities.setWorkspace(workspaceService.getCapabilities());
        return capabilities;
    }

    @Override
    public SD4DevelopmentTextDocumentService getTextDocumentService() {
        return textDocumentService;
    }

    @Override
    public SD4DevelopmentWorkspaceService getWorkspaceService() {
        return workspaceService;
    }

    @Override
    public SD4DevelopmentSyntaxHighlightingService getSyntaxHighlightingService() {
        return this.syntaxHighlightingService;
    }

  public SD4DevelopmentLanguageAccess getLanguageAccess(){
    return languageAccess;
  }
}
