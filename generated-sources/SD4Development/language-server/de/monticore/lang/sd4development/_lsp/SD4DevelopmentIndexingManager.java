/* generated by template _lsp.IndexingManager*/

package de.monticore.lang.sd4development._lsp;

import de.mclsg.UriUtils;
import de.mclsg.lsp.IndexingManager;
import de.mclsg.lsp.document_management.DocumentInformationProvider;
import de.mclsg.lsp.document_management.DocumentManager;

import de.monticore.io.paths.MCPath;
import org.apache.commons.io.IOUtils;
import org.eclipse.lsp4j.TextDocumentItem;

import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SD4DevelopmentIndexingManager extends IndexingManager{
	private static final Logger logger = LoggerFactory.getLogger(SD4DevelopmentIndexingManager.class);
	protected DocumentManager documentManager;
	protected DocumentInformationProvider documentInformationProvider;

	public SD4DevelopmentIndexingManager(MCPath modelPath, DocumentManager documentManager, DocumentInformationProvider documentInformationProvider, SD4DevelopmentLanguageServer languageServer) {
		super(modelPath, languageServer);

		this.documentManager = documentManager;
		this.documentInformationProvider = documentInformationProvider;
	}

	@Override
	protected boolean shouldIndexFile(URL modelURL){
		return modelURL.getFile().endsWith(".sd");
	}

	protected TextDocumentItem getTextDocumentItem(URL modelUrl) throws IOException, URISyntaxException {
		TextDocumentItem res = new TextDocumentItem();
		res.setText(IOUtils.toString(modelUrl));
		res.setUri(UriUtils.toNormalizedFileUri(modelUrl.toURI()).toString());
		res.setLanguageId("SD4Development");
		return res;
	}

	protected void indexFiles(List<URL> modelUrls){
		List<TextDocumentItem> textDocuments = new ArrayList<>();
		for (URL url : modelUrls) {
			if (shouldIndexFile(url)) {
				logger.trace("Indexing {}", url);
				try {
					TextDocumentItem item = getTextDocumentItem(url);
					textDocuments.add(item);
					documentManager.addDocument(item, de.mclsg.lsp.ChangeSource.INDEXING);
				} catch (IOException | URISyntaxException e) {
					logger.warn("Can not index file {}", url, e);
				}
			}
		}

		documentInformationProvider.createAllDocumentInformation(textDocuments, de.mclsg.lsp.ChangeSource.INDEXING);
	}
}