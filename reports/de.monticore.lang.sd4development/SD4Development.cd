package de.monticore.lang;

classdiagram SD4Development {
  package de.monticore.lang.sd4development._auxiliary {
    public class SDBasisMillForSD4Development extends de.monticore.lang.sdbasis.SDBasisMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser _traverser();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCCommonLiteralsMillForSD4Development extends de.monticore.literals.mccommonliterals.MCCommonLiteralsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _traverser();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class CommonExpressionsMillForSD4Development extends de.monticore.expressions.commonexpressions.CommonExpressionsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser _traverser();
      protected de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class OCLExpressionsMillForSD4Development extends de.monticore.ocl.oclexpressions.OCLExpressionsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser _traverser();
      protected de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class OOSymbolsMillForSD4Development extends de.monticore.symbols.oosymbols.OOSymbolsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser _traverser();
      protected de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCBasicTypesMillForSD4Development extends de.monticore.types.mcbasictypes.MCBasicTypesMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser _traverser();
      protected de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class BasicSymbolsMillForSD4Development extends de.monticore.symbols.basicsymbols.BasicSymbolsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser _traverser();
      protected de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class ExpressionsBasisMillForSD4Development extends de.monticore.expressions.expressionsbasis.ExpressionsBasisMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser _traverser();
      protected de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class UMLStereotypeMillForSD4Development extends de.monticore.umlstereotype.UMLStereotypeMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.umlstereotype._visitor.UMLStereotypeTraverser _traverser();
      protected de.monticore.umlstereotype._visitor.UMLStereotypeTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCBasicsMillForSD4Development extends de.monticore.mcbasics.MCBasicsMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _traverser();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCLiteralsBasisMillForSD4Development extends de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill {
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _traverser();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
  }

  package de.monticore.lang.sd4development {
    public class SD4DevelopmentMill {
      protected static SD4DevelopmentMill mill;
      protected SD4DevelopmentMill();
      public static SD4DevelopmentMill getMill();
      public static void init();
      protected static SD4DevelopmentMill millASTSDCallBuilder;
      protected static SD4DevelopmentMill millASTSDNewBuilder;
      protected static SD4DevelopmentMill millASTSDReturnBuilder;
      protected static SD4DevelopmentMill millASTSDThrowBuilder;
      protected static SD4DevelopmentMill millASTSDEndCallBuilder;
      protected static SD4DevelopmentMill millASTSDEndCallArrowBuilder;
      protected static SD4DevelopmentMill millASTSDIncompleteExpressionBuilder;
      protected static SD4DevelopmentMill millASTSDClassBuilder;
      protected static SD4DevelopmentMill millASTSDConditionBuilder;
      protected static SD4DevelopmentMill millASTSDVariableDeclarationBuilder;
      public static de.monticore.lang.sd4development._ast.ASTSDCallBuilder sDCallBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDCallBuilder _sDCallBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDNewBuilder sDNewBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDNewBuilder _sDNewBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDReturnBuilder sDReturnBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDReturnBuilder _sDReturnBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDThrowBuilder sDThrowBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDThrowBuilder _sDThrowBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDEndCallBuilder sDEndCallBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDEndCallBuilder _sDEndCallBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDEndCallArrowBuilder sDEndCallArrowBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDEndCallArrowBuilder _sDEndCallArrowBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDIncompleteExpressionBuilder sDIncompleteExpressionBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDIncompleteExpressionBuilder _sDIncompleteExpressionBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDClassBuilder sDClassBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDClassBuilder _sDClassBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDConditionBuilder sDConditionBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDConditionBuilder _sDConditionBuilder();
      public static de.monticore.lang.sd4development._ast.ASTSDVariableDeclarationBuilder sDVariableDeclarationBuilder();
      protected de.monticore.lang.sd4development._ast.ASTSDVariableDeclarationBuilder _sDVariableDeclarationBuilder();
      protected static SD4DevelopmentMill millSD4DevelopmentTraverserImplementation;
      protected static SD4DevelopmentMill millSD4DevelopmentInheritanceHandler;
      protected static SD4DevelopmentMill millSD4DevelopmentScope;
      protected static SD4DevelopmentMill millSD4DevelopmentScopesGenitorDelegator;
      protected static SD4DevelopmentMill millSD4DevelopmentArtifactScope;
      protected static SD4DevelopmentMill millSD4DevelopmentGlobalScope;
      protected static SD4DevelopmentMill millSD4DevelopmentScopesGenitor;
      protected static SD4DevelopmentMill millSD4DevelopmentFullPrettyPrinter;
      public static String prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
      protected de.monticore.lang.sd4development._prettyprint.SD4DevelopmentFullPrettyPrinter fullPrettyPrinter;
      protected static SD4DevelopmentMill millSD4DevelopmentTypeDispatcher;
      protected de.monticore.lang.sd4development._util.SD4DevelopmentTypeDispatcher typeDispatcher;
      public static de.monticore.lang.sd4development._util.SD4DevelopmentTypeDispatcher typeDispatcher();
      protected de.monticore.lang.sd4development._util.SD4DevelopmentTypeDispatcher _typeDispatcher();
      public static de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser();
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser _traverser();
      public static de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser inheritanceTraverser();
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser _inheritanceTraverser();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope sD4DevelopmentGlobalScope;
      public static de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope globalScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope _globalScope();
      public static de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope artifactScope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope _artifactScope();
      protected static SD4DevelopmentMill millSD4DevelopmentParser;
      public static de.monticore.lang.sd4development._parser.SD4DevelopmentParser parser();
      protected de.monticore.lang.sd4development._parser.SD4DevelopmentParser _parser();
      public static de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope _scope();
      public static de.monticore.lang.sd4development._symboltable.SD4DevelopmentScopesGenitor scopesGenitor();
      protected de.monticore.lang.sd4development._symboltable.SD4DevelopmentScopesGenitor _scopesGenitor();
      public static de.monticore.lang.sd4development._symboltable.SD4DevelopmentScopesGenitorDelegator scopesGenitorDelegator();
      protected de.monticore.lang.sd4development._symboltable.SD4DevelopmentScopesGenitorDelegator _scopesGenitorDelegator();
      public static de.monticore.lang.sdbasis._ast.ASTSDArtifactBuilder sDArtifactBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSequenceDiagramBuilder sequenceDiagramBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDBodyBuilder sDBodyBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDCompleteModifierBuilder sDCompleteModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDFreeModifierBuilder sDFreeModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDInitialModifierBuilder sDInitialModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDVisibleModifierBuilder sDVisibleModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectBuilder sDObjectBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectSourceBuilder sDObjectSourceBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectTargetBuilder sDObjectTargetBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDSendMessageBuilder sDSendMessageBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDActivityBarBuilder sDActivityBarBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder nullLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder booleanLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder charLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder stringLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder natLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder signedNatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder basicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder signedBasicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder basicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder signedBasicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder basicDoubleLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder signedBasicDoubleLiteralBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTCallExpressionBuilder callExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTFieldAccessExpressionBuilder fieldAccessExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpressionBuilder plusPrefixExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpressionBuilder minusPrefixExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpressionBuilder booleanNotExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpressionBuilder logicalNotExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTMultExpressionBuilder multExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTDivideExpressionBuilder divideExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTModuloExpressionBuilder moduloExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTPlusExpressionBuilder plusExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTMinusExpressionBuilder minusExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTLessEqualExpressionBuilder lessEqualExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTGreaterEqualExpressionBuilder greaterEqualExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTLessThanExpressionBuilder lessThanExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTGreaterThanExpressionBuilder greaterThanExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTEqualsExpressionBuilder equalsExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTNotEqualsExpressionBuilder notEqualsExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTBooleanAndOpExpressionBuilder booleanAndOpExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTBooleanOrOpExpressionBuilder booleanOrOpExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTConditionalExpressionBuilder conditionalExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTBracketExpressionBuilder bracketExpressionBuilder();
      public static de.monticore.expressions.commonexpressions._ast.ASTArrayAccessExpressionBuilder arrayAccessExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTOCLVariableDeclarationBuilder oCLVariableDeclarationBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpressionBuilder typeIfExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTTypeIfThenExpressionBuilder typeIfThenExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpressionBuilder ifThenElseExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTImpliesExpressionBuilder impliesExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTEquivalentExpressionBuilder equivalentExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTForallExpressionBuilder forallExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTExistsExpressionBuilder existsExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTAnyExpressionBuilder anyExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTLetinExpressionBuilder letinExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTIterateExpressionBuilder iterateExpressionBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTInDeclarationBuilder inDeclarationBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTInDeclarationVariableBuilder inDeclarationVariableBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTOCLAtPreQualificationBuilder oCLAtPreQualificationBuilder();
      public static de.monticore.ocl.oclexpressions._ast.ASTOCLTransitiveQualificationBuilder oCLTransitiveQualificationBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.OOTypeSymbolBuilder oOTypeSymbolBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.OOTypeSymbolSurrogateBuilder oOTypeSymbolSurrogateBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder fieldSymbolBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.FieldSymbolSurrogateBuilder fieldSymbolSurrogateBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.MethodSymbolBuilder methodSymbolBuilder();
      public static de.monticore.symbols.oosymbols._symboltable.MethodSymbolSurrogateBuilder methodSymbolSurrogateBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCQualifiedNameBuilder mCQualifiedNameBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclarationBuilder mCPackageDeclarationBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCImportStatementBuilder mCImportStatementBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveTypeBuilder mCPrimitiveTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCQualifiedTypeBuilder mCQualifiedTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCReturnTypeBuilder mCReturnTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCVoidTypeBuilder mCVoidTypeBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.DiagramSymbolBuilder diagramSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.DiagramSymbolSurrogateBuilder diagramSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeSymbolBuilder typeSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeSymbolSurrogateBuilder typeSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbolBuilder typeVarSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbolSurrogateBuilder typeVarSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.VariableSymbolBuilder variableSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.VariableSymbolSurrogateBuilder variableSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.FunctionSymbolBuilder functionSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.FunctionSymbolSurrogateBuilder functionSymbolSurrogateBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTNameExpressionBuilder nameExpressionBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpressionBuilder literalExpressionBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTArgumentsBuilder argumentsBuilder();
      public static de.monticore.umlstereotype._ast.ASTStereotypeBuilder stereotypeBuilder();
      public static de.monticore.umlstereotype._ast.ASTStereoValueBuilder stereoValueBuilder();
      public static void initMe(SD4DevelopmentMill a);
      public static void reset();
    }
    public class SD4DevelopmentTool {
      public static void main(String[] args);
      public void run(String[] args);
      public de.monticore.lang.sdbasis._ast.ASTSDArtifact parse(String model);
      public void init();
      public void prettyPrint(de.monticore.lang.sdbasis._ast.ASTSDArtifact ast, String file);
      public void print(String content, String path);
      public void printHelp(org.apache.commons.cli.Options options);
      public void printVersion();
      public void report(de.monticore.lang.sdbasis._ast.ASTSDArtifact ast, String path);
      public void runDefaultCoCos(de.monticore.lang.sdbasis._ast.ASTSDArtifact ast);
      public void runAdditionalCoCos(de.monticore.lang.sdbasis._ast.ASTSDArtifact ast);
      public void storeSymbols(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope, String path);
      public org.apache.commons.cli.Options initOptions();
      public org.apache.commons.cli.Options addStandardOptions(org.apache.commons.cli.Options options);
      public org.apache.commons.cli.Options addAdditionalOptions(org.apache.commons.cli.Options options);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope createSymbolTable(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void completeSymbolTable(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
    }
  }

  package de.monticore.lang.sd4development._prettyprint {
    public class SD4DevelopmentPrettyPrinter implements de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler, de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      protected de.monticore.prettyprint.IndentPrinter printer;
      public de.monticore.prettyprint.IndentPrinter getPrinter();
      protected boolean printComments;
      public boolean isPrintComments();
      public void setPrintComments(boolean printComments);
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public SD4DevelopmentPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer, boolean printComments);
    }
    public class SD4DevelopmentFullPrettyPrinter {
      protected de.monticore.prettyprint.IndentPrinter printer;
      public de.monticore.prettyprint.IndentPrinter getPrinter();
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public SD4DevelopmentFullPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer, boolean printComments);
      public SD4DevelopmentFullPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer);
      protected void initializeTraverser(boolean printComments);
      public void setPrintComments(boolean printComments);
      public String prettyprint(de.monticore.ast.ASTNode node);
    }
  }

  package de.monticore.lang.sd4development._od {
    public class SD4Development2OD implements de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2, de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {
      public SD4Development2OD(de.monticore.prettyprint.IndentPrinter printer, de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting);
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      protected de.monticore.prettyprint.IndentPrinter pp;
      protected de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting;
      protected boolean printEmptyOptional;
      protected boolean printEmptyList;
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      protected void printAttribute(String name, String value);
      protected void printObject(String objName, String objType);
      public String printObjectDiagram(String modelName, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public boolean isPrintEmptyOptional();
      public void setPrintEmptyOptional(boolean printEmptyOptional);
      public boolean isPrintEmptyList();
      public void setPrintEmptyList(boolean printEmptyList);
    }
  }

  package de.monticore.lang.sd4development._util {
    public class SD4DevelopmentTypeDispatcher implements de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {
      protected de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher sDBasisTypeDispatcher;
      protected de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher mCCommonLiteralsTypeDispatcher;
      protected de.monticore.expressions.commonexpressions._util.CommonExpressionsTypeDispatcher commonExpressionsTypeDispatcher;
      protected de.monticore.ocl.oclexpressions._util.OCLExpressionsTypeDispatcher oCLExpressionsTypeDispatcher;
      protected de.monticore.symbols.oosymbols._util.OOSymbolsTypeDispatcher oOSymbolsTypeDispatcher;
      protected de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher mCBasicTypesTypeDispatcher;
      protected de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher basicSymbolsTypeDispatcher;
      protected de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher expressionsBasisTypeDispatcher;
      protected de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher uMLStereotypeTypeDispatcher;
      protected de.monticore.mcbasics._util.MCBasicsTypeDispatcher mCBasicsTypeDispatcher;
      protected de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher mCLiteralsBasisTypeDispatcher;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDCall> optASTSDCall;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDNew> optASTSDNew;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDReturn> optASTSDReturn;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDThrow> optASTSDThrow;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDEndCall> optASTSDEndCall;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDEndCallArrow> optASTSDEndCallArrow;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression> optASTSDIncompleteExpression;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDClass> optASTSDClass;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDCondition> optASTSDCondition;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration> optASTSDVariableDeclaration;
      protected Optional<de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals> optSD4DevelopmentLiterals;
      protected Optional<de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode> optASTSD4DevelopmentNode;
      protected boolean isASTSDCall;
      protected boolean isASTSDNew;
      protected boolean isASTSDReturn;
      protected boolean isASTSDThrow;
      protected boolean isASTSDEndCall;
      protected boolean isASTSDEndCallArrow;
      protected boolean isASTSDIncompleteExpression;
      protected boolean isASTSDClass;
      protected boolean isASTSDCondition;
      protected boolean isASTSDVariableDeclaration;
      protected boolean isSD4DevelopmentLiterals;
      protected boolean isASTSD4DevelopmentNode;
      protected Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope> optISD4DevelopmentArtifactScope;
      protected Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope> optISD4DevelopmentGlobalScope;
      protected Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> optISD4DevelopmentScope;
      protected boolean isISD4DevelopmentArtifactScope;
      protected boolean isISD4DevelopmentGlobalScope;
      protected boolean isISD4DevelopmentScope;
      public SD4DevelopmentTypeDispatcher();
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public void reset();
      public boolean isASTSDCall(de.monticore.ast.ASTNode node);
      public boolean isASTSDNew(de.monticore.ast.ASTNode node);
      public boolean isASTSDReturn(de.monticore.ast.ASTNode node);
      public boolean isASTSDThrow(de.monticore.ast.ASTNode node);
      public boolean isASTSDEndCall(de.monticore.ast.ASTNode node);
      public boolean isASTSDEndCallArrow(de.monticore.ast.ASTNode node);
      public boolean isASTSDIncompleteExpression(de.monticore.ast.ASTNode node);
      public boolean isASTSDClass(de.monticore.ast.ASTNode node);
      public boolean isASTSDCondition(de.monticore.ast.ASTNode node);
      public boolean isASTSDVariableDeclaration(de.monticore.ast.ASTNode node);
      public boolean isSD4DevelopmentLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTSD4DevelopmentNode(de.monticore.ast.ASTNode node);
      public boolean isISD4DevelopmentArtifactScope(de.monticore.symboltable.IScope scope);
      public boolean isISD4DevelopmentGlobalScope(de.monticore.symboltable.IScope scope);
      public boolean isISD4DevelopmentScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sd4development._ast.ASTSDCall asASTSDCall(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDNew asASTSDNew(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDReturn asASTSDReturn(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDThrow asASTSDThrow(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDEndCall asASTSDEndCall(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDEndCallArrow asASTSDEndCallArrow(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression asASTSDIncompleteExpression(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDClass asASTSDClass(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDCondition asASTSDCondition(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration asASTSDVariableDeclaration(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals asSD4DevelopmentLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode asASTSD4DevelopmentNode(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope asISD4DevelopmentArtifactScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope asISD4DevelopmentGlobalScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope asISD4DevelopmentScope(de.monticore.symboltable.IScope scope);
      public boolean isASTSDArtifact(de.monticore.ast.ASTNode node);
      public boolean isASTSequenceDiagram(de.monticore.ast.ASTNode node);
      public boolean isASTSDBody(de.monticore.ast.ASTNode node);
      public boolean isASTSDCompleteModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDFreeModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDInitialModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDVisibleModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDObject(de.monticore.ast.ASTNode node);
      public boolean isASTSDObjectSource(de.monticore.ast.ASTNode node);
      public boolean isASTSDObjectTarget(de.monticore.ast.ASTNode node);
      public boolean isASTSDSendMessage(de.monticore.ast.ASTNode node);
      public boolean isASTSDActivityBar(de.monticore.ast.ASTNode node);
      public boolean isASTSDModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDElement(de.monticore.ast.ASTNode node);
      public boolean isASTSDInteraction(de.monticore.ast.ASTNode node);
      public boolean isASTSDSource(de.monticore.ast.ASTNode node);
      public boolean isASTSDTarget(de.monticore.ast.ASTNode node);
      public boolean isASTSDAction(de.monticore.ast.ASTNode node);
      public boolean isSDBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTSDBasisNode(de.monticore.ast.ASTNode node);
      public boolean isASTNullLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBooleanLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTCharLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTStringLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTNatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedNatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicLongLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicLongLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTNumericLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedNumericLiteral(de.monticore.ast.ASTNode node);
      public boolean isMCCommonLiteralsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCCommonLiteralsNode(de.monticore.ast.ASTNode node);
      public boolean isASTCallExpression(de.monticore.ast.ASTNode node);
      public boolean isASTFieldAccessExpression(de.monticore.ast.ASTNode node);
      public boolean isASTPlusPrefixExpression(de.monticore.ast.ASTNode node);
      public boolean isASTMinusPrefixExpression(de.monticore.ast.ASTNode node);
      public boolean isASTBooleanNotExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLogicalNotExpression(de.monticore.ast.ASTNode node);
      public boolean isASTMultExpression(de.monticore.ast.ASTNode node);
      public boolean isASTDivideExpression(de.monticore.ast.ASTNode node);
      public boolean isASTModuloExpression(de.monticore.ast.ASTNode node);
      public boolean isASTPlusExpression(de.monticore.ast.ASTNode node);
      public boolean isASTMinusExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLessEqualExpression(de.monticore.ast.ASTNode node);
      public boolean isASTGreaterEqualExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLessThanExpression(de.monticore.ast.ASTNode node);
      public boolean isASTGreaterThanExpression(de.monticore.ast.ASTNode node);
      public boolean isASTEqualsExpression(de.monticore.ast.ASTNode node);
      public boolean isASTNotEqualsExpression(de.monticore.ast.ASTNode node);
      public boolean isASTBooleanAndOpExpression(de.monticore.ast.ASTNode node);
      public boolean isASTBooleanOrOpExpression(de.monticore.ast.ASTNode node);
      public boolean isASTConditionalExpression(de.monticore.ast.ASTNode node);
      public boolean isASTBracketExpression(de.monticore.ast.ASTNode node);
      public boolean isASTArrayAccessExpression(de.monticore.ast.ASTNode node);
      public boolean isASTInfixExpression(de.monticore.ast.ASTNode node);
      public boolean isCommonExpressionsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTCommonExpressionsNode(de.monticore.ast.ASTNode node);
      public boolean isASTOCLVariableDeclaration(de.monticore.ast.ASTNode node);
      public boolean isASTTypeIfExpression(de.monticore.ast.ASTNode node);
      public boolean isASTTypeIfThenExpression(de.monticore.ast.ASTNode node);
      public boolean isASTIfThenElseExpression(de.monticore.ast.ASTNode node);
      public boolean isASTImpliesExpression(de.monticore.ast.ASTNode node);
      public boolean isASTEquivalentExpression(de.monticore.ast.ASTNode node);
      public boolean isASTForallExpression(de.monticore.ast.ASTNode node);
      public boolean isASTExistsExpression(de.monticore.ast.ASTNode node);
      public boolean isASTAnyExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLetinExpression(de.monticore.ast.ASTNode node);
      public boolean isASTIterateExpression(de.monticore.ast.ASTNode node);
      public boolean isASTInDeclaration(de.monticore.ast.ASTNode node);
      public boolean isASTInDeclarationVariable(de.monticore.ast.ASTNode node);
      public boolean isASTOCLAtPreQualification(de.monticore.ast.ASTNode node);
      public boolean isASTOCLTransitiveQualification(de.monticore.ast.ASTNode node);
      public boolean isOCLExpressionsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTOCLExpressionsNode(de.monticore.ast.ASTNode node);
      public boolean isASTOOType(de.monticore.ast.ASTNode node);
      public boolean isASTField(de.monticore.ast.ASTNode node);
      public boolean isASTMethod(de.monticore.ast.ASTNode node);
      public boolean isOOSymbolsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTOOSymbolsNode(de.monticore.ast.ASTNode node);
      public boolean isOOType(de.monticore.symboltable.ISymbol symbol);
      public boolean isField(de.monticore.symboltable.ISymbol symbol);
      public boolean isMethod(de.monticore.symboltable.ISymbol symbol);
      public boolean isASTMCQualifiedName(de.monticore.ast.ASTNode node);
      public boolean isASTMCPackageDeclaration(de.monticore.ast.ASTNode node);
      public boolean isASTMCImportStatement(de.monticore.ast.ASTNode node);
      public boolean isASTMCPrimitiveType(de.monticore.ast.ASTNode node);
      public boolean isASTMCQualifiedType(de.monticore.ast.ASTNode node);
      public boolean isASTMCReturnType(de.monticore.ast.ASTNode node);
      public boolean isASTMCVoidType(de.monticore.ast.ASTNode node);
      public boolean isASTMCType(de.monticore.ast.ASTNode node);
      public boolean isASTMCObjectType(de.monticore.ast.ASTNode node);
      public boolean isMCBasicTypesLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCBasicTypesNode(de.monticore.ast.ASTNode node);
      public boolean isASTDiagram(de.monticore.ast.ASTNode node);
      public boolean isASTType(de.monticore.ast.ASTNode node);
      public boolean isASTTypeVar(de.monticore.ast.ASTNode node);
      public boolean isASTVariable(de.monticore.ast.ASTNode node);
      public boolean isASTFunction(de.monticore.ast.ASTNode node);
      public boolean isBasicSymbolsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTBasicSymbolsNode(de.monticore.ast.ASTNode node);
      public boolean isDiagram(de.monticore.symboltable.ISymbol symbol);
      public boolean isType(de.monticore.symboltable.ISymbol symbol);
      public boolean isTypeVar(de.monticore.symboltable.ISymbol symbol);
      public boolean isVariable(de.monticore.symboltable.ISymbol symbol);
      public boolean isFunction(de.monticore.symboltable.ISymbol symbol);
      public boolean isASTNameExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLiteralExpression(de.monticore.ast.ASTNode node);
      public boolean isASTArguments(de.monticore.ast.ASTNode node);
      public boolean isASTExpression(de.monticore.ast.ASTNode node);
      public boolean isExpressionsBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTExpressionsBasisNode(de.monticore.ast.ASTNode node);
      public boolean isASTStereotype(de.monticore.ast.ASTNode node);
      public boolean isASTStereoValue(de.monticore.ast.ASTNode node);
      public boolean isUMLStereotypeLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTUMLStereotypeNode(de.monticore.ast.ASTNode node);
      public boolean isMCBasicsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCBasicsNode(de.monticore.ast.ASTNode node);
      public boolean isASTLiteral(de.monticore.ast.ASTNode node);
      public boolean isMCLiteralsBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCLiteralsBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDArtifact asASTSDArtifact(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSequenceDiagram asASTSequenceDiagram(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDBody asASTSDBody(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier asASTSDCompleteModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDFreeModifier asASTSDFreeModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDInitialModifier asASTSDInitialModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier asASTSDVisibleModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObject asASTSDObject(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObjectSource asASTSDObjectSource(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObjectTarget asASTSDObjectTarget(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDSendMessage asASTSDSendMessage(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar asASTSDActivityBar(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier asASTSDModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDElement asASTSDElement(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDInteraction asASTSDInteraction(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDSource asASTSDSource(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDTarget asASTSDTarget(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDAction asASTSDAction(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.SDBasisLiterals asSDBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDBasisNode asASTSDBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNullLiteral asASTNullLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral asASTBooleanLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTCharLiteral asASTCharLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTStringLiteral asASTStringLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNatLiteral asASTNatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral asASTSignedNatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral asASTBasicLongLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral asASTSignedBasicLongLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral asASTBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral asASTSignedBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral asASTBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral asASTSignedBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral asASTSignedLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral asASTNumericLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral asASTSignedNumericLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.MCCommonLiteralsLiterals asMCCommonLiteralsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode asASTMCCommonLiteralsNode(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTCallExpression asASTCallExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTFieldAccessExpression asASTFieldAccessExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTPlusPrefixExpression asASTPlusPrefixExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTMinusPrefixExpression asASTMinusPrefixExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTBooleanNotExpression asASTBooleanNotExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTLogicalNotExpression asASTLogicalNotExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTMultExpression asASTMultExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTDivideExpression asASTDivideExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTModuloExpression asASTModuloExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTPlusExpression asASTPlusExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTMinusExpression asASTMinusExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTLessEqualExpression asASTLessEqualExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTGreaterEqualExpression asASTGreaterEqualExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTLessThanExpression asASTLessThanExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTGreaterThanExpression asASTGreaterThanExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTEqualsExpression asASTEqualsExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTNotEqualsExpression asASTNotEqualsExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTBooleanAndOpExpression asASTBooleanAndOpExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTBooleanOrOpExpression asASTBooleanOrOpExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTConditionalExpression asASTConditionalExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTBracketExpression asASTBracketExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTArrayAccessExpression asASTArrayAccessExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTInfixExpression asASTInfixExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.CommonExpressionsLiterals asCommonExpressionsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.commonexpressions._ast.ASTCommonExpressionsNode asASTCommonExpressionsNode(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTOCLVariableDeclaration asASTOCLVariableDeclaration(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTTypeIfExpression asASTTypeIfExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTTypeIfThenExpression asASTTypeIfThenExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTIfThenElseExpression asASTIfThenElseExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTImpliesExpression asASTImpliesExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTEquivalentExpression asASTEquivalentExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTForallExpression asASTForallExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTExistsExpression asASTExistsExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTAnyExpression asASTAnyExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTLetinExpression asASTLetinExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTIterateExpression asASTIterateExpression(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTInDeclaration asASTInDeclaration(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTInDeclarationVariable asASTInDeclarationVariable(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTOCLAtPreQualification asASTOCLAtPreQualification(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTOCLTransitiveQualification asASTOCLTransitiveQualification(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.OCLExpressionsLiterals asOCLExpressionsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.ocl.oclexpressions._ast.ASTOCLExpressionsNode asASTOCLExpressionsNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._ast.ASTOOType asASTOOType(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._ast.ASTField asASTField(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._ast.ASTMethod asASTMethod(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._ast.OOSymbolsLiterals asOOSymbolsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._ast.ASTOOSymbolsNode asASTOOSymbolsNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol asOOType(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.oosymbols._symboltable.FieldSymbol asField(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.oosymbols._symboltable.MethodSymbol asMethod(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName asASTMCQualifiedName(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration asASTMCPackageDeclaration(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement asASTMCImportStatement(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType asASTMCPrimitiveType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType asASTMCQualifiedType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCReturnType asASTMCReturnType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCVoidType asASTMCVoidType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCType asASTMCType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType asASTMCObjectType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.MCBasicTypesLiterals asMCBasicTypesLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode asASTMCBasicTypesNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTDiagram asASTDiagram(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTType asASTType(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTTypeVar asASTTypeVar(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTVariable asASTVariable(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTFunction asASTFunction(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.BasicSymbolsLiterals asBasicSymbolsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode asASTBasicSymbolsNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol asDiagram(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.TypeSymbol asType(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol asTypeVar(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol asVariable(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol asFunction(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.expressions.expressionsbasis._ast.ASTNameExpression asASTNameExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpression asASTLiteralExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments asASTArguments(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression asASTExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ExpressionsBasisLiterals asExpressionsBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode asASTExpressionsBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTStereotype asASTStereotype(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTStereoValue asASTStereoValue(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.UMLStereotypeLiterals asUMLStereotypeLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTUMLStereotypeNode asASTUMLStereotypeNode(de.monticore.ast.ASTNode node);
      public de.monticore.mcbasics._ast.MCBasicsLiterals asMCBasicsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.mcbasics._ast.ASTMCBasicsNode asASTMCBasicsNode(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.ASTLiteral asASTLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.MCLiteralsBasisLiterals asMCLiteralsBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode asASTMCLiteralsBasisNode(de.monticore.ast.ASTNode node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void handle(de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public boolean isIsASTSDCall();
      public void setIsASTSDCall(boolean isASTSDCall);
      public boolean isIsASTSDNew();
      public void setIsASTSDNew(boolean isASTSDNew);
      public boolean isIsASTSDReturn();
      public void setIsASTSDReturn(boolean isASTSDReturn);
      public boolean isIsASTSDThrow();
      public void setIsASTSDThrow(boolean isASTSDThrow);
      public boolean isIsASTSDEndCall();
      public void setIsASTSDEndCall(boolean isASTSDEndCall);
      public boolean isIsASTSDEndCallArrow();
      public void setIsASTSDEndCallArrow(boolean isASTSDEndCallArrow);
      public boolean isIsASTSDIncompleteExpression();
      public void setIsASTSDIncompleteExpression(boolean isASTSDIncompleteExpression);
      public boolean isIsASTSDClass();
      public void setIsASTSDClass(boolean isASTSDClass);
      public boolean isIsASTSDCondition();
      public void setIsASTSDCondition(boolean isASTSDCondition);
      public boolean isIsASTSDVariableDeclaration();
      public void setIsASTSDVariableDeclaration(boolean isASTSDVariableDeclaration);
      public boolean isIsSD4DevelopmentLiterals();
      public void setIsSD4DevelopmentLiterals(boolean isSD4DevelopmentLiterals);
      public boolean isIsASTSD4DevelopmentNode();
      public void setIsASTSD4DevelopmentNode(boolean isASTSD4DevelopmentNode);
      public boolean isIsISD4DevelopmentArtifactScope();
      public void setIsISD4DevelopmentArtifactScope(boolean isISD4DevelopmentArtifactScope);
      public boolean isIsISD4DevelopmentGlobalScope();
      public void setIsISD4DevelopmentGlobalScope(boolean isISD4DevelopmentGlobalScope);
      public boolean isIsISD4DevelopmentScope();
      public void setIsISD4DevelopmentScope(boolean isISD4DevelopmentScope);
      public de.monticore.lang.sd4development._ast.ASTSDCall getOptASTSDCall();
      public boolean isPresentOptASTSDCall();
      public void setOptASTSDCall(de.monticore.lang.sd4development._ast.ASTSDCall optASTSDCall);
      public void setOptASTSDCallAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDNew getOptASTSDNew();
      public boolean isPresentOptASTSDNew();
      public void setOptASTSDNew(de.monticore.lang.sd4development._ast.ASTSDNew optASTSDNew);
      public void setOptASTSDNewAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDReturn getOptASTSDReturn();
      public boolean isPresentOptASTSDReturn();
      public void setOptASTSDReturn(de.monticore.lang.sd4development._ast.ASTSDReturn optASTSDReturn);
      public void setOptASTSDReturnAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDThrow getOptASTSDThrow();
      public boolean isPresentOptASTSDThrow();
      public void setOptASTSDThrow(de.monticore.lang.sd4development._ast.ASTSDThrow optASTSDThrow);
      public void setOptASTSDThrowAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDEndCall getOptASTSDEndCall();
      public boolean isPresentOptASTSDEndCall();
      public void setOptASTSDEndCall(de.monticore.lang.sd4development._ast.ASTSDEndCall optASTSDEndCall);
      public void setOptASTSDEndCallAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDEndCallArrow getOptASTSDEndCallArrow();
      public boolean isPresentOptASTSDEndCallArrow();
      public void setOptASTSDEndCallArrow(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow optASTSDEndCallArrow);
      public void setOptASTSDEndCallArrowAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression getOptASTSDIncompleteExpression();
      public boolean isPresentOptASTSDIncompleteExpression();
      public void setOptASTSDIncompleteExpression(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression optASTSDIncompleteExpression);
      public void setOptASTSDIncompleteExpressionAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDClass getOptASTSDClass();
      public boolean isPresentOptASTSDClass();
      public void setOptASTSDClass(de.monticore.lang.sd4development._ast.ASTSDClass optASTSDClass);
      public void setOptASTSDClassAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDCondition getOptASTSDCondition();
      public boolean isPresentOptASTSDCondition();
      public void setOptASTSDCondition(de.monticore.lang.sd4development._ast.ASTSDCondition optASTSDCondition);
      public void setOptASTSDConditionAbsent();
      public de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration getOptASTSDVariableDeclaration();
      public boolean isPresentOptASTSDVariableDeclaration();
      public void setOptASTSDVariableDeclaration(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration optASTSDVariableDeclaration);
      public void setOptASTSDVariableDeclarationAbsent();
      public de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals getOptSD4DevelopmentLiterals();
      public boolean isPresentOptSD4DevelopmentLiterals();
      public void setOptSD4DevelopmentLiterals(de.monticore.lang.sd4development._ast.SD4DevelopmentLiterals optSD4DevelopmentLiterals);
      public void setOptSD4DevelopmentLiteralsAbsent();
      public de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode getOptASTSD4DevelopmentNode();
      public boolean isPresentOptASTSD4DevelopmentNode();
      public void setOptASTSD4DevelopmentNode(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode optASTSD4DevelopmentNode);
      public void setOptASTSD4DevelopmentNodeAbsent();
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope getOptISD4DevelopmentArtifactScope();
      public boolean isPresentOptISD4DevelopmentArtifactScope();
      public void setOptISD4DevelopmentArtifactScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope optISD4DevelopmentArtifactScope);
      public void setOptISD4DevelopmentArtifactScopeAbsent();
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope getOptISD4DevelopmentGlobalScope();
      public boolean isPresentOptISD4DevelopmentGlobalScope();
      public void setOptISD4DevelopmentGlobalScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope optISD4DevelopmentGlobalScope);
      public void setOptISD4DevelopmentGlobalScopeAbsent();
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getOptISD4DevelopmentScope();
      public boolean isPresentOptISD4DevelopmentScope();
      public void setOptISD4DevelopmentScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope optISD4DevelopmentScope);
      public void setOptISD4DevelopmentScopeAbsent();
    }
  }

  package de.monticore.lang.sd4development._cocos {
    public class SD4DevelopmentCoCoChecker {
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public SD4DevelopmentCoCoChecker();
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public void addChecker(de.monticore.lang.sd4development._cocos.SD4DevelopmentCoCoChecker checker);
      public void checkAll(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDCallCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDNewCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDReturnCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDThrowCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDEndCallCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDEndCallArrowCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDIncompleteExpressionCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDClassCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDConditionCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSDVariableDeclarationCoCo coco);
      public void addCoCo(de.monticore.lang.sd4development._cocos.SD4DevelopmentASTSD4DevelopmentNodeCoCo coco);
      public void addChecker(de.monticore.lang.sdbasis._cocos.SDBasisCoCoChecker checker);
      public void checkAll(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDArtifactCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSequenceDiagramCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDBodyCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDCompleteModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDFreeModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDInitialModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDVisibleModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectSourceCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectTargetCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDSendMessageCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDActivityBarCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDElementCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDInteractionCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDSourceCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDTargetCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDActionCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDBasisNodeCoCo coco);
      public void addChecker(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker);
      public void checkAll(de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco);
      public void addChecker(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsCoCoChecker checker);
      public void checkAll(de.monticore.expressions.commonexpressions._ast.ASTCommonExpressionsNode node);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTCallExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTFieldAccessExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTPlusPrefixExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMinusPrefixExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanNotExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLogicalNotExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMultExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTDivideExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTModuloExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTPlusExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTMinusExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLessEqualExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTGreaterEqualExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTLessThanExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTGreaterThanExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTEqualsExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTNotEqualsExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanAndOpExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBooleanOrOpExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTConditionalExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTBracketExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTArrayAccessExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTInfixExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.commonexpressions._cocos.CommonExpressionsASTCommonExpressionsNodeCoCo coco);
      public void addChecker(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsCoCoChecker checker);
      public void checkAll(de.monticore.ocl.oclexpressions._ast.ASTOCLExpressionsNode node);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLVariableDeclarationCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTTypeIfExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTTypeIfThenExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTIfThenElseExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTImpliesExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTEquivalentExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTForallExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTExistsExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTAnyExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTLetinExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTIterateExpressionCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTInDeclarationCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTInDeclarationVariableCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLAtPreQualificationCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLTransitiveQualificationCoCo coco);
      public void addCoCo(de.monticore.ocl.oclexpressions._cocos.OCLExpressionsASTOCLExpressionsNodeCoCo coco);
      public void addChecker(de.monticore.symbols.oosymbols._cocos.OOSymbolsCoCoChecker checker);
      public void checkAll(de.monticore.symbols.oosymbols._ast.ASTOOSymbolsNode node);
      public void addCoCo(de.monticore.symbols.oosymbols._cocos.OOSymbolsASTOOTypeCoCo coco);
      public void addCoCo(de.monticore.symbols.oosymbols._cocos.OOSymbolsASTFieldCoCo coco);
      public void addCoCo(de.monticore.symbols.oosymbols._cocos.OOSymbolsASTMethodCoCo coco);
      public void addCoCo(de.monticore.symbols.oosymbols._cocos.OOSymbolsASTOOSymbolsNodeCoCo coco);
      public void addChecker(de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker checker);
      public void checkAll(de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedNameCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPackageDeclarationCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCImportStatementCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPrimitiveTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCReturnTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCVoidTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCObjectTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCBasicTypesNodeCoCo coco);
      public void addChecker(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsCoCoChecker checker);
      public void checkAll(de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode node);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTDiagramCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeVarCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTVariableCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTFunctionCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTBasicSymbolsNodeCoCo coco);
      public void addChecker(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisCoCoChecker checker);
      public void checkAll(de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode node);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTNameExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTLiteralExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTArgumentsCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionsBasisNodeCoCo coco);
      public void addChecker(de.monticore.umlstereotype._cocos.UMLStereotypeCoCoChecker checker);
      public void checkAll(de.monticore.umlstereotype._ast.ASTUMLStereotypeNode node);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTStereotypeCoCo coco);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTStereoValueCoCo coco);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTUMLStereotypeNodeCoCo coco);
      public void addChecker(de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker);
      public void checkAll(de.monticore.mcbasics._ast.ASTMCBasicsNode node);
      public void addCoCo(de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco);
      public void addChecker(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker);
      public void checkAll(de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco);
    }
    public interface SD4DevelopmentASTSDCallCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCall node);
    }
    public interface SD4DevelopmentASTSDNewCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDNew node);
    }
    public interface SD4DevelopmentASTSDReturnCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
    }
    public interface SD4DevelopmentASTSDThrowCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
    }
    public interface SD4DevelopmentASTSDEndCallCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
    }
    public interface SD4DevelopmentASTSDEndCallArrowCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
    }
    public interface SD4DevelopmentASTSDIncompleteExpressionCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
    }
    public interface SD4DevelopmentASTSDClassCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDClass node);
    }
    public interface SD4DevelopmentASTSDConditionCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
    }
    public interface SD4DevelopmentASTSDVariableDeclarationCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
    }
    public interface SD4DevelopmentASTSD4DevelopmentNodeCoCo extends de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      public abstract void check(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
    }
  }

  package de.monticore.lang.sd4development._visitor {
    public interface SD4DevelopmentTraverser extends de.monticore.lang.sdbasis._visitor.SDBasisTraverser, de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser, de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser, de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser, de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser {
      public void add4SD4Development(de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 sD4DevelopmentVisitor);
      public List<de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2> getSD4DevelopmentVisitorList();
      public void add4SDBasis(de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor);
      public List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList();
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void add4CommonExpressions(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2 commonExpressionsVisitor);
      public List<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2> getCommonExpressionsVisitorList();
      public void add4OCLExpressions(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2 oCLExpressionsVisitor);
      public List<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2> getOCLExpressionsVisitorList();
      public void add4OOSymbols(de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2 oOSymbolsVisitor);
      public List<de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2> getOOSymbolsVisitorList();
      public void add4MCBasicTypes(de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor);
      public List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList();
      public void add4BasicSymbols(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor);
      public List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList();
      public void add4ExpressionsBasis(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor);
      public List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList();
      public void add4UMLStereotype(de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor);
      public List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void setSD4DevelopmentHandler(de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler sD4DevelopmentHandler);
      public Optional<de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler> getSD4DevelopmentHandler();
      public void setSDBasisHandler(de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler);
      public Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void setCommonExpressionsHandler(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler commonExpressionsHandler);
      public Optional<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler> getCommonExpressionsHandler();
      public void setOCLExpressionsHandler(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler oCLExpressionsHandler);
      public Optional<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler> getOCLExpressionsHandler();
      public void setOOSymbolsHandler(de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler oOSymbolsHandler);
      public Optional<de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler> getOOSymbolsHandler();
      public void setMCBasicTypesHandler(de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler);
      public Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler();
      public void setBasicSymbolsHandler(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler);
      public Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler();
      public void setExpressionsBasisHandler(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler);
      public Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler();
      public void setUMLStereotypeHandler(de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler);
      public Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void visit(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void handle(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
    }
    public class SD4DevelopmentTraverserImplementation implements de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser {
      protected SD4DevelopmentTraverserImplementation realThis;
      protected List<de.monticore.visitor.IVisitor> iVisitorList;
      protected List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> sDBasisVisitorList;
      protected List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> mCCommonLiteralsVisitorList;
      protected List<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2> commonExpressionsVisitorList;
      protected List<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2> oCLExpressionsVisitorList;
      protected List<de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2> oOSymbolsVisitorList;
      protected List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> mCBasicTypesVisitorList;
      protected List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> basicSymbolsVisitorList;
      protected List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> expressionsBasisVisitorList;
      protected List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> uMLStereotypeVisitorList;
      protected List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> mCBasicsVisitorList;
      protected List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> mCLiteralsBasisVisitorList;
      protected List<de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2> sD4DevelopmentVisitorList;
      protected Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> sDBasisHandler;
      protected Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> mCCommonLiteralsHandler;
      protected Optional<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler> commonExpressionsHandler;
      protected Optional<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler> oCLExpressionsHandler;
      protected Optional<de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler> oOSymbolsHandler;
      protected Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> mCBasicTypesHandler;
      protected Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> basicSymbolsHandler;
      protected Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> expressionsBasisHandler;
      protected Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> uMLStereotypeHandler;
      protected Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> mCBasicsHandler;
      protected Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> mCLiteralsBasisHandler;
      protected Optional<de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler> sD4DevelopmentHandler;
      public void add4SDBasis(de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor);
      public List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList();
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void add4CommonExpressions(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2 commonExpressionsVisitor);
      public List<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsVisitor2> getCommonExpressionsVisitorList();
      public void add4OCLExpressions(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2 oCLExpressionsVisitor);
      public List<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsVisitor2> getOCLExpressionsVisitorList();
      public void add4OOSymbols(de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2 oOSymbolsVisitor);
      public List<de.monticore.symbols.oosymbols._visitor.OOSymbolsVisitor2> getOOSymbolsVisitorList();
      public void add4MCBasicTypes(de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor);
      public List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList();
      public void add4BasicSymbols(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor);
      public List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList();
      public void add4ExpressionsBasis(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor);
      public List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList();
      public void add4UMLStereotype(de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor);
      public List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void add4SD4Development(de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 sD4DevelopmentVisitor);
      public List<de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2> getSD4DevelopmentVisitorList();
      public void setSDBasisHandler(de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler);
      public Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void setCommonExpressionsHandler(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler commonExpressionsHandler);
      public Optional<de.monticore.expressions.commonexpressions._visitor.CommonExpressionsHandler> getCommonExpressionsHandler();
      public void setOCLExpressionsHandler(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler oCLExpressionsHandler);
      public Optional<de.monticore.ocl.oclexpressions._visitor.OCLExpressionsHandler> getOCLExpressionsHandler();
      public void setOOSymbolsHandler(de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler oOSymbolsHandler);
      public Optional<de.monticore.symbols.oosymbols._visitor.OOSymbolsHandler> getOOSymbolsHandler();
      public void setMCBasicTypesHandler(de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler);
      public Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler();
      public void setBasicSymbolsHandler(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler);
      public Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler();
      public void setExpressionsBasisHandler(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler);
      public Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler();
      public void setUMLStereotypeHandler(de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler);
      public Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void setSD4DevelopmentHandler(de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler sD4DevelopmentHandler);
      public Optional<de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler> getSD4DevelopmentHandler();
      public void add4IVisitor(de.monticore.visitor.IVisitor iVisitor);
      public List<de.monticore.visitor.IVisitor> getIVisitorList();
      protected Set<Object> traversedElements;
      public Set<Object> getTraversedElements();
      public void setTraversedElements(Set<Object> traversedElements);
    }
    public interface SD4DevelopmentVisitor2 extends de.monticore.visitor.IVisitor {
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
    }
    public interface SD4DevelopmentHandler extends de.monticore.visitor.IHandler {
      public abstract de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public abstract void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void traverse(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void handle(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ICommonSD4DevelopmentSymbol node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
      public void traverse(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
    }
    public class SD4DevelopmentInheritanceHandler implements de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void handle(de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void handle(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope node);
    }
  }

  package de.monticore.lang.sd4development._symboltable {
    public class SD4DevelopmentScope implements de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope {
      public SD4DevelopmentScope();
      public SD4DevelopmentScope(boolean shadowing);
      public SD4DevelopmentScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public SD4DevelopmentScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope, boolean shadowing);
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> unknownSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> oOTypeSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.FieldSymbol> fieldSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.MethodSymbol> methodSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> diagramSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> typeSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> typeVarSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> variableSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> functionSymbols;
      public void add(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public void remove(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> getUnknownSymbols();
      public void add(de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol symbol);
      public void remove(de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> getOOTypeSymbols();
      public void add(de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol);
      public void remove(de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.FieldSymbol> getFieldSymbols();
      public void add(de.monticore.symbols.oosymbols._symboltable.MethodSymbol symbol);
      public void remove(de.monticore.symbols.oosymbols._symboltable.MethodSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.oosymbols._symboltable.MethodSymbol> getMethodSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> getDiagramSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> getTypeSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> getTypeVarSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> getVariableSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> getFunctionSymbols();
      protected boolean unknownSymbolsAlreadyResolved;
      protected boolean oOTypeSymbolsAlreadyResolved;
      protected boolean fieldSymbolsAlreadyResolved;
      protected boolean methodSymbolsAlreadyResolved;
      protected boolean diagramSymbolsAlreadyResolved;
      protected boolean typeSymbolsAlreadyResolved;
      protected boolean typeVarSymbolsAlreadyResolved;
      protected boolean variableSymbolsAlreadyResolved;
      protected boolean functionSymbolsAlreadyResolved;
      public boolean isUnknownSymbolsAlreadyResolved();
      public void setUnknownSymbolsAlreadyResolved(boolean unknownSymbolsAlreadyResolved);
      public boolean isOOTypeSymbolsAlreadyResolved();
      public void setOOTypeSymbolsAlreadyResolved(boolean oOTypeSymbolsAlreadyResolved);
      public boolean isFieldSymbolsAlreadyResolved();
      public void setFieldSymbolsAlreadyResolved(boolean fieldSymbolsAlreadyResolved);
      public boolean isMethodSymbolsAlreadyResolved();
      public void setMethodSymbolsAlreadyResolved(boolean methodSymbolsAlreadyResolved);
      public boolean isDiagramSymbolsAlreadyResolved();
      public void setDiagramSymbolsAlreadyResolved(boolean diagramSymbolsAlreadyResolved);
      public boolean isTypeSymbolsAlreadyResolved();
      public void setTypeSymbolsAlreadyResolved(boolean typeSymbolsAlreadyResolved);
      public boolean isTypeVarSymbolsAlreadyResolved();
      public void setTypeVarSymbolsAlreadyResolved(boolean typeVarSymbolsAlreadyResolved);
      public boolean isVariableSymbolsAlreadyResolved();
      public void setVariableSymbolsAlreadyResolved(boolean variableSymbolsAlreadyResolved);
      public boolean isFunctionSymbolsAlreadyResolved();
      public void setFunctionSymbolsAlreadyResolved(boolean functionSymbolsAlreadyResolved);
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      protected Optional<de.monticore.symboltable.IScopeSpanningSymbol> spanningSymbol;
      public de.monticore.symboltable.IScopeSpanningSymbol getSpanningSymbol();
      public boolean isPresentSpanningSymbol();
      public void setSpanningSymbol(de.monticore.symboltable.IScopeSpanningSymbol spanningSymbol);
      public void setSpanningSymbolAbsent();
      protected boolean shadowing;
      public boolean isShadowing();
      public void setShadowing(boolean shadowing);
      protected boolean exportingSymbols;
      public boolean isExportingSymbols();
      public void setExportingSymbols(boolean exportingSymbols);
      protected boolean ordered;
      public boolean isOrdered();
      public void setOrdered(boolean ordered);
      protected Optional<String> name;
      public String getName();
      public boolean isPresentName();
      public void setName(String name);
      public void setNameAbsent();
      protected Optional<de.monticore.ast.ASTNode> astNode;
      public de.monticore.ast.ASTNode getAstNode();
      public boolean isPresentAstNode();
      public void setAstNode(de.monticore.ast.ASTNode astNode);
      public void setAstNodeAbsent();
      protected List<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> subScopes;
      public void addSubScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope subScope);
      public void removeSubScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope subScope);
      public List<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> getSubScopes();
      public void setSubScopes(List<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> subScopes);
      public void addSubScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope subScope);
      public void removeSubScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope subScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope newEnclosingScope);
      public void addSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void removeSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope newEnclosingScope);
      public void addSubScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope subScope);
      public void removeSubScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope subScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope newEnclosingScope);
      public void addSubScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope subScope);
      public void removeSubScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope subScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope newEnclosingScope);
      public void addSubScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope subScope);
      public void removeSubScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope subScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope newEnclosingScope);
      public void addSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope);
      public void removeSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope newEnclosingScope);
      public void addSubScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope subScope);
      public void removeSubScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope subScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope newEnclosingScope);
      public void addSubScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope subScope);
      public void removeSubScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope subScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope newEnclosingScope);
      public void addSubScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope subScope);
      public void removeSubScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope subScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope newEnclosingScope);
      public void addSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void removeSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope newEnclosingScope);
      public void addSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void removeSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope newEnclosingScope);
      public List<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> resolveOOTypeSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> resolveFieldSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> resolveMethodSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveDiagramSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveTypeSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveTypeVarSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveVariableSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveFunctionSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public interface ISD4DevelopmentScope extends de.monticore.lang.sdbasis._symboltable.ISDBasisScope, de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope, de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope, de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope, de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope {
      public abstract List<? extends ISD4DevelopmentScope> getSubScopes();
      public void addSubScope(ISD4DevelopmentScope subScope);
      public void removeSubScope(ISD4DevelopmentScope subScope);
      public abstract ISD4DevelopmentScope getEnclosingScope();
      public abstract void setEnclosingScope(ISD4DevelopmentScope enclosingScope);
      public abstract void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public int getSymbolsSize();
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public abstract void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public abstract void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SD4DevelopmentSymbols2Json implements de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2 {
      protected de.monticore.symboltable.serialization.IDeSer<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope, de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope, SD4DevelopmentSymbols2JsonTOP> scopeDeSer;
      protected SD4DevelopmentSymbols2Json realThis;
      public SD4DevelopmentSymbols2Json getRealThis();
      public void setRealThis(SD4DevelopmentSymbols2Json realThis);
      protected de.monticore.symboltable.serialization.JsonPrinter printer;
      public de.monticore.symboltable.serialization.JsonPrinter getJsonPrinter();
      public void setJsonPrinter(de.monticore.symboltable.serialization.JsonPrinter printer);
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public String serialize(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope toSerialize);
      public String serialize(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope toSerialize);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope deserialize(String serialized);
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      public SD4DevelopmentSymbols2Json();
      public SD4DevelopmentSymbols2Json(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser, de.monticore.symboltable.serialization.JsonPrinter printer);
      public void init();
      public String getSerializedString();
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope load(java.net.URL url);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope load(java.io.Reader reader);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope load(String model);
      public String store(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope, String fileName);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope node);
      public void visit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
      public void endVisit(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope node);
    }
    public interface ICommonSD4DevelopmentSymbol extends de.monticore.symboltable.ISymbol {
      public abstract void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public abstract de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
    }
    public interface ISD4DevelopmentGlobalScope extends de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope, de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope, de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsGlobalScope, de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsGlobalScope, de.monticore.symbols.oosymbols._symboltable.IOOSymbolsGlobalScope, de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope {
      public List<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> resolveAdaptedOOType(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> resolveAdaptedField(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> resolveAdaptedMethod(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveAdaptedDiagram(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveAdaptedType(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveAdaptedTypeVar(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveAdaptedVariable(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveAdaptedFunction(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> resolveOOTypeMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> predicate);
      public abstract void loadOOType(String name);
      public List<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> resolveFieldMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> predicate);
      public abstract void loadField(String name);
      public List<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> resolveMethodMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> predicate);
      public abstract void loadMethod(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveDiagramMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public abstract void loadDiagram(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveTypeMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public abstract void loadType(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveTypeVarMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public abstract void loadTypeVar(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveVariableMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public abstract void loadVariable(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveFunctionMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public abstract void loadFunction(String name);
      public abstract void loadFileForModelName(String modelName);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public String getName();
      public boolean isPresentName();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public abstract Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void putSymbolDeSer(String key, de.monticore.symboltable.serialization.ISymbolDeSer value);
      public de.monticore.symboltable.serialization.ISymbolDeSer getSymbolDeSer(String key);
      public void putOOTypeSymbolDeSer(String kind);
      public void putFieldSymbolDeSer(String kind);
      public void putMethodSymbolDeSer(String kind);
      public void putDiagramSymbolDeSer(String kind);
      public void putTypeSymbolDeSer(String kind);
      public void putTypeVarSymbolDeSer(String kind);
      public void putVariableSymbolDeSer(String kind);
      public void putFunctionSymbolDeSer(String kind);
      public de.monticore.symboltable.serialization.ISymbolDeSer getOOTypeSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getFieldSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getMethodSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getDiagramSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getTypeSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getTypeVarSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getVariableSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getFunctionSymbolDeSer();
      public abstract ISD4DevelopmentGlobalScope getRealThis();
      public abstract void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public abstract void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public abstract void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public interface ISD4DevelopmentArtifactScope extends de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope, de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsArtifactScope, de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsArtifactScope, de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsArtifactScope, de.monticore.symbols.oosymbols._symboltable.IOOSymbolsArtifactScope, de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope {
      public boolean containsImports(Object element);
      public boolean containsAllImports(Collection<?> collection);
      public boolean isEmptyImports();
      public Iterator<de.monticore.symboltable.ImportStatement> iteratorImports();
      public int sizeImports();
      public de.monticore.symboltable.ImportStatement[] toArrayImports(de.monticore.symboltable.ImportStatement[] array);
      public Object[] toArrayImports();
      public Spliterator<de.monticore.symboltable.ImportStatement> spliteratorImports();
      public Stream<de.monticore.symboltable.ImportStatement> streamImports();
      public Stream<de.monticore.symboltable.ImportStatement> parallelStreamImports();
      public de.monticore.symboltable.ImportStatement getImports(int index);
      public int indexOfImports(Object element);
      public int lastIndexOfImports(Object element);
      public boolean equalsImports(Object o);
      public int hashCodeImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports(int index);
      public List<de.monticore.symboltable.ImportStatement> subListImports(int start, int end);
      public void clearImports();
      public boolean addImports(de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public boolean removeImports(Object element);
      public boolean removeAllImports(Collection<?> collection);
      public boolean retainAllImports(Collection<?> collection);
      public boolean removeIfImports(Predicate<? super de.monticore.symboltable.ImportStatement> filter);
      public void forEachImports(Consumer<? super de.monticore.symboltable.ImportStatement> action);
      public void addImports(int index, de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(int index, Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public de.monticore.symboltable.ImportStatement removeImports(int index);
      public de.monticore.symboltable.ImportStatement setImports(int index, de.monticore.symboltable.ImportStatement element);
      public void replaceAllImports(UnaryOperator<de.monticore.symboltable.ImportStatement> operator);
      public void sortImports(Comparator<? super de.monticore.symboltable.ImportStatement> comparator);
      public abstract List<de.monticore.symboltable.ImportStatement> getImportsList();
      public abstract void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public Optional<de.monticore.symboltable.ISymbol> getTopLevelSymbol();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public List<String> getRemainingNameForResolveDown(String symbolName);
      public String getFullName();
      public List<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> continueOOTypeWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> continueFieldWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.FieldSymbol> predicate);
      public List<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> continueMethodWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.oosymbols._symboltable.MethodSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> continueDiagramWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> continueTypeWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> continueTypeVarWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> continueVariableWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> continueFunctionWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public abstract void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public abstract void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public abstract void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SD4DevelopmentScopesGenitorDelegator {
      public SD4DevelopmentScopesGenitorDelegator();
      protected Deque<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> scopeStack;
      protected final SD4DevelopmentScopesGenitor symbolTable;
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope globalScope;
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope createFromAST(de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode);
    }
    public class SD4DevelopmentArtifactScope extends de.monticore.lang.sd4development._symboltable.SD4DevelopmentScope implements de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope {
      public SD4DevelopmentArtifactScope(String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public SD4DevelopmentArtifactScope(Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> enclosingScope, String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public SD4DevelopmentArtifactScope();
      protected String packageName;
      public String getPackageName();
      public void setPackageName(String packageName);
      protected List<de.monticore.symboltable.ImportStatement> imports;
      public List<de.monticore.symboltable.ImportStatement> getImportsList();
      public void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public boolean isPresentName();
      public String getName();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SD4DevelopmentDeSer implements de.monticore.symboltable.serialization.IDeSer<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope, de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope, de.monticore.lang.sd4development._symboltable.SD4DevelopmentSymbols2Json> {
      public String serialize(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope toSerialize, de.monticore.lang.sd4development._symboltable.SD4DevelopmentSymbols2Json s2j);
      public String serialize(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope toSerialize, de.monticore.lang.sd4development._symboltable.SD4DevelopmentSymbols2Json s2j);
      public void serializeAddons(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope toSerialize, de.monticore.lang.sd4development._symboltable.SD4DevelopmentSymbols2Json s2j);
      public void serializeAddons(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope toSerialize, de.monticore.lang.sd4development._symboltable.SD4DevelopmentSymbols2Json s2j);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope deserializeScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope deserializeArtifactScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      protected void deserializeSymbols(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
    }
    public class SD4DevelopmentGlobalScope extends de.monticore.lang.sd4development._symboltable.SD4DevelopmentScope implements de.monticore.lang.sd4development._symboltable.ISD4DevelopmentGlobalScope {
      public SD4DevelopmentGlobalScope(de.monticore.io.paths.MCPath symbolPath, String fileExt);
      public SD4DevelopmentGlobalScope();
      protected de.monticore.io.paths.MCPath symbolPath;
      public de.monticore.io.paths.MCPath getSymbolPath();
      public void setSymbolPath(de.monticore.io.paths.MCPath symbolPath);
      protected String fileExt;
      public String getFileExt();
      public void setFileExt(String fileExt);
      public de.monticore.symboltable.serialization.IDeSer deSer;
      public de.monticore.symboltable.serialization.IDeSer getDeSer();
      public void setDeSer(de.monticore.symboltable.serialization.IDeSer deSer);
      protected Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers;
      public Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void setSymbolDeSers(Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers);
      protected SD4DevelopmentSymbols2Json symbols2Json;
      public void setSymbols2Json(SD4DevelopmentSymbols2Json symbols2Json);
      public SD4DevelopmentSymbols2Json getSymbols2Json();
      protected Set<String> cache;
      public void addLoadedFile(String name);
      public void clearLoadedFiles();
      public boolean isFileLoaded(String name);
      public void init();
      protected List<de.monticore.symbols.oosymbols._symboltable.IOOTypeSymbolResolver> adaptedOOTypeSymbolResolver;
      protected List<de.monticore.symbols.oosymbols._symboltable.IFieldSymbolResolver> adaptedFieldSymbolResolver;
      protected List<de.monticore.symbols.oosymbols._symboltable.IMethodSymbolResolver> adaptedMethodSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> adaptedDiagramSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> adaptedTypeSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> adaptedTypeVarSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> adaptedVariableSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> adaptedFunctionSymbolResolver;
      public List<de.monticore.symbols.oosymbols._symboltable.IOOTypeSymbolResolver> getAdaptedOOTypeSymbolResolverList();
      public void setAdaptedOOTypeSymbolResolverList(List<de.monticore.symbols.oosymbols._symboltable.IOOTypeSymbolResolver> adaptedOOTypeSymbolResolver);
      public List<de.monticore.symbols.oosymbols._symboltable.IFieldSymbolResolver> getAdaptedFieldSymbolResolverList();
      public void setAdaptedFieldSymbolResolverList(List<de.monticore.symbols.oosymbols._symboltable.IFieldSymbolResolver> adaptedFieldSymbolResolver);
      public List<de.monticore.symbols.oosymbols._symboltable.IMethodSymbolResolver> getAdaptedMethodSymbolResolverList();
      public void setAdaptedMethodSymbolResolverList(List<de.monticore.symbols.oosymbols._symboltable.IMethodSymbolResolver> adaptedMethodSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> getAdaptedDiagramSymbolResolverList();
      public void setAdaptedDiagramSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> adaptedDiagramSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> getAdaptedTypeSymbolResolverList();
      public void setAdaptedTypeSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> adaptedTypeSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> getAdaptedTypeVarSymbolResolverList();
      public void setAdaptedTypeVarSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> adaptedTypeVarSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> getAdaptedVariableSymbolResolverList();
      public void setAdaptedVariableSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> adaptedVariableSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> getAdaptedFunctionSymbolResolverList();
      public void setAdaptedFunctionSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> adaptedFunctionSymbolResolver);
      public void loadOOType(String name);
      public void loadField(String name);
      public void loadMethod(String name);
      public void loadDiagram(String name);
      public void loadType(String name);
      public void loadTypeVar(String name);
      public void loadVariable(String name);
      public void loadFunction(String name);
      public void loadFileForModelName(String modelName);
      public abstract SD4DevelopmentGlobalScope getRealThis();
      public void clear();
      public void putOOTypeSymbolDeSer(String kind);
      public void putFieldSymbolDeSer(String kind);
      public void putMethodSymbolDeSer(String kind);
      public void putDiagramSymbolDeSer(String kind);
      public void putTypeSymbolDeSer(String kind);
      public void putTypeVarSymbolDeSer(String kind);
      public void putVariableSymbolDeSer(String kind);
      public void putFunctionSymbolDeSer(String kind);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SD4DevelopmentScopesGenitor implements de.monticore.lang.sd4development._visitor.SD4DevelopmentVisitor2, de.monticore.lang.sd4development._visitor.SD4DevelopmentHandler {
      public SD4DevelopmentScopesGenitor();
      protected Deque<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> scopeStack;
      protected de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser;
      public de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser traverser);
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope firstCreatedScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getFirstCreatedScope();
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope createFromAST(de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode);
      public void putOnStack(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope);
      public final Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> getCurrentScope();
      public final Optional<de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> removeCurrentScope();
      public void setScopeStack(Deque<? extends de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope> scopeStack);
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope createScope(boolean shadowing);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDNew node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      public void endVisit(de.monticore.lang.sd4development._ast.ASTSDVariableDeclaration node);
      protected void initVariableHP1(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      protected void initVariableHP2(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDReturn node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDThrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCall node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDIncompleteExpression node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDClass node);
      public void visit(de.monticore.lang.sd4development._ast.ASTSDCondition node);
      protected void initScopeHP1(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope);
      protected void initScopeHP2(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope);
      protected void initArtifactScopeHP1(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope);
      protected void initArtifactScopeHP2(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentArtifactScope scope);
      public void addToScopeStack(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope scope);
    }
  }

  package de.monticore.lang.sd4development._ast {
    public class ASTSDCall extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDAction, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDCall();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDCall deepClone();
      public ASTSDCall deepClone(ASTSDCall result);
      <<derived_attribute_name="">> protected String name;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTArguments> arguments;
      <<derived_attribute_name="">> protected boolean trigger;
      <<derived_attribute_name="">> protected boolean r__static;
      public String getName();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public boolean isPresentArguments();
      public boolean isTrigger();
      public boolean isStatic();
      public void setName(String name);
      public void setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public void setArgumentsAbsent();
      public void setTrigger(boolean trigger);
      public void setStatic(boolean r__static);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDCall _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    <<inheritedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> public class ASTSDNew extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDInteraction, de.monticore.symbols.basicsymbols._ast.ASTVariable, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDNew();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDNew deepClone();
      public ASTSDNew deepClone(ASTSDNew result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType declarationType;
      <<astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType initializationType;
      <<derived_attribute_name="", astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> sDActivityBar;
      <<derived_attribute_name="">> protected String name;
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getDeclarationType();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getInitializationType();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar getSDActivityBar();
      public boolean isPresentSDActivityBar();
      public String getName();
      public void setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public void setSDSourceAbsent();
      public void setDeclarationType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType declarationType);
      public void setInitializationType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType initializationType);
      public void setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public void setSDActivityBar(de.monticore.lang.sdbasis._ast.ASTSDActivityBar sDActivityBar);
      public void setSDActivityBarAbsent();
      public void setName(String name);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDNew _construct();
      protected Optional<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> symbol;
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getSymbol();
      public boolean isPresentSymbol();
      public void setSymbol(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void setSymbolAbsent();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDReturn extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDAction, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDReturn();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDReturn deepClone();
      public ASTSDReturn deepClone(ASTSDReturn result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTExpression> expression;
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getExpression();
      public boolean isPresentExpression();
      public void setExpression(de.monticore.expressions.expressionsbasis._ast.ASTExpression expression);
      public void setExpressionAbsent();
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDReturn _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDThrow extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDAction, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDThrow();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDThrow deepClone();
      public ASTSDThrow deepClone(ASTSDThrow result);
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTArguments> arguments;
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public boolean isPresentArguments();
      public void setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public void setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public void setArgumentsAbsent();
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDThrow _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDEndCall extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDInteraction, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDEndCall();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDEndCall deepClone();
      public ASTSDEndCall deepClone(ASTSDEndCall result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> sDTarget;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sd4development._ast.ASTSDEndCallArrow sDEndCallArrow;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDAction sDAction;
      public de.monticore.lang.sdbasis._ast.ASTSDTarget getSDTarget();
      public boolean isPresentSDTarget();
      public de.monticore.lang.sd4development._ast.ASTSDEndCallArrow getSDEndCallArrow();
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.lang.sdbasis._ast.ASTSDAction getSDAction();
      public void setSDTarget(de.monticore.lang.sdbasis._ast.ASTSDTarget sDTarget);
      public void setSDTargetAbsent();
      public void setSDEndCallArrow(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow sDEndCallArrow);
      public void setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public void setSDSourceAbsent();
      public void setSDAction(de.monticore.lang.sdbasis._ast.ASTSDAction sDAction);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDEndCall _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDEndCallArrow extends ASTCNode implements de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDEndCallArrow();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDEndCallArrow deepClone();
      public ASTSDEndCallArrow deepClone(ASTSDEndCallArrow result);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDEndCallArrow _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDIncompleteExpression extends ASTCNode implements de.monticore.expressions.expressionsbasis._ast.ASTExpression, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDIncompleteExpression();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDIncompleteExpression deepClone();
      public ASTSDIncompleteExpression deepClone(ASTSDIncompleteExpression result);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDIncompleteExpression _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDClass extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDSource, de.monticore.lang.sdbasis._ast.ASTSDTarget, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDClass();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDClass deepClone();
      public ASTSDClass deepClone(ASTSDClass result);
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType;
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public void setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDClass _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDCondition extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDElement, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDCondition();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDCondition deepClone();
      public ASTSDCondition deepClone(ASTSDCondition result);
      <<derived_attribute_name="", astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTExpression expression;
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getExpression();
      public void setExpression(de.monticore.expressions.expressionsbasis._ast.ASTExpression expression);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDCondition _construct();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    <<inheritedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> public class ASTSDVariableDeclaration extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDElement, de.monticore.symbols.basicsymbols._ast.ASTVariable, de.monticore.lang.sd4development._ast.ASTSD4DevelopmentNode {
      protected ASTSDVariableDeclaration();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDVariableDeclaration deepClone();
      public ASTSDVariableDeclaration deepClone(ASTSDVariableDeclaration result);
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCType mCType;
      <<astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTExpression assignment;
      <<derived_attribute_name="">> protected String name;
      public de.monticore.types.mcbasictypes._ast.ASTMCType getMCType();
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getAssignment();
      public String getName();
      public void setMCType(de.monticore.types.mcbasictypes._ast.ASTMCType mCType);
      public void setAssignment(de.monticore.expressions.expressionsbasis._ast.ASTExpression assignment);
      public void setName(String name);
      public void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.expressions.commonexpressions._visitor.CommonExpressionsTraverser visitor);
      public void accept(de.monticore.ocl.oclexpressions._visitor.OCLExpressionsTraverser visitor);
      public void accept(de.monticore.symbols.oosymbols._visitor.OOSymbolsTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDVariableDeclaration _construct();
      protected Optional<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> symbol;
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getSymbol();
      public boolean isPresentSymbol();
      public void setSymbol(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void setSymbolAbsent();
      protected de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope;
      public de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sd4development._symboltable.ISD4DevelopmentScope enclosingScope);
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.commonexpressions._symboltable.ICommonExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.ocl.oclexpressions._symboltable.IOCLExpressionsScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.oosymbols._symboltable.IOOSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
    }
    public class ASTSDCallBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDCallBuilder> {
      protected ASTSDCallBuilder realBuilder;
      <<derived_attribute_name="">> protected String name;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTArguments> arguments;
      <<derived_attribute_name="">> protected boolean trigger;
      <<derived_attribute_name="">> protected boolean r__static;
      public ASTSDCallBuilder();
      public ASTSDCall build();
      public boolean isValid();
      public String getName();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public boolean isPresentArguments();
      public boolean isTrigger();
      public boolean isStatic();
      public ASTSDCallBuilder setName(String name);
      public ASTSDCallBuilder setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public ASTSDCallBuilder setArgumentsAbsent();
      public ASTSDCallBuilder setTrigger(boolean trigger);
      public ASTSDCallBuilder setStatic(boolean r__static);
      public ASTSDCallBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDCallBuilder set_SourcePositionEndAbsent();
      public ASTSDCallBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDCallBuilder set_SourcePositionStartAbsent();
      public ASTSDCallBuilder clear_PreComments();
      public ASTSDCallBuilder add_PreComment(Comment precomment);
      public ASTSDCallBuilder add_PreComment(int index, Comment precomment);
      public ASTSDCallBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDCallBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDCallBuilder remove_PreComment(Object element);
      public ASTSDCallBuilder remove_PreComment(int index);
      public ASTSDCallBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDCallBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDCallBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDCallBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDCallBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDCallBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDCallBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDCallBuilder set_PreComment(int index, Comment precomment);
      public ASTSDCallBuilder clear_PostComments();
      public ASTSDCallBuilder add_PostComment(Comment postcomment);
      public ASTSDCallBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDCallBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDCallBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDCallBuilder remove_PostComment(Object element);
      public ASTSDCallBuilder remove_PostComment(int index);
      public ASTSDCallBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDCallBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDCallBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDCallBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDCallBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDCallBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDCallBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDCallBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDCall uncheckedBuild();
    }
    public class ASTSDNewBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDNewBuilder> {
      protected ASTSDNewBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType declarationType;
      <<astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType initializationType;
      <<derived_attribute_name="", astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> sDActivityBar;
      <<derived_attribute_name="">> protected String name;
      public ASTSDNewBuilder();
      public ASTSDNew build();
      public boolean isValid();
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getDeclarationType();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getInitializationType();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar getSDActivityBar();
      public boolean isPresentSDActivityBar();
      public String getName();
      public ASTSDNewBuilder setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public ASTSDNewBuilder setSDSourceAbsent();
      public ASTSDNewBuilder setDeclarationType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType declarationType);
      public ASTSDNewBuilder setInitializationType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType initializationType);
      public ASTSDNewBuilder setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public ASTSDNewBuilder setSDActivityBar(de.monticore.lang.sdbasis._ast.ASTSDActivityBar sDActivityBar);
      public ASTSDNewBuilder setSDActivityBarAbsent();
      public ASTSDNewBuilder setName(String name);
      public ASTSDNewBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDNewBuilder set_SourcePositionEndAbsent();
      public ASTSDNewBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDNewBuilder set_SourcePositionStartAbsent();
      public ASTSDNewBuilder clear_PreComments();
      public ASTSDNewBuilder add_PreComment(Comment precomment);
      public ASTSDNewBuilder add_PreComment(int index, Comment precomment);
      public ASTSDNewBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDNewBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDNewBuilder remove_PreComment(Object element);
      public ASTSDNewBuilder remove_PreComment(int index);
      public ASTSDNewBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDNewBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDNewBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDNewBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDNewBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDNewBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDNewBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDNewBuilder set_PreComment(int index, Comment precomment);
      public ASTSDNewBuilder clear_PostComments();
      public ASTSDNewBuilder add_PostComment(Comment postcomment);
      public ASTSDNewBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDNewBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDNewBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDNewBuilder remove_PostComment(Object element);
      public ASTSDNewBuilder remove_PostComment(int index);
      public ASTSDNewBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDNewBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDNewBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDNewBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDNewBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDNewBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDNewBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDNewBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDNew uncheckedBuild();
    }
    public class ASTSDReturnBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDReturnBuilder> {
      protected ASTSDReturnBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTExpression> expression;
      public ASTSDReturnBuilder();
      public ASTSDReturn build();
      public boolean isValid();
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getExpression();
      public boolean isPresentExpression();
      public ASTSDReturnBuilder setExpression(de.monticore.expressions.expressionsbasis._ast.ASTExpression expression);
      public ASTSDReturnBuilder setExpressionAbsent();
      public ASTSDReturnBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDReturnBuilder set_SourcePositionEndAbsent();
      public ASTSDReturnBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDReturnBuilder set_SourcePositionStartAbsent();
      public ASTSDReturnBuilder clear_PreComments();
      public ASTSDReturnBuilder add_PreComment(Comment precomment);
      public ASTSDReturnBuilder add_PreComment(int index, Comment precomment);
      public ASTSDReturnBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDReturnBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDReturnBuilder remove_PreComment(Object element);
      public ASTSDReturnBuilder remove_PreComment(int index);
      public ASTSDReturnBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDReturnBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDReturnBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDReturnBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDReturnBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDReturnBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDReturnBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDReturnBuilder set_PreComment(int index, Comment precomment);
      public ASTSDReturnBuilder clear_PostComments();
      public ASTSDReturnBuilder add_PostComment(Comment postcomment);
      public ASTSDReturnBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDReturnBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDReturnBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDReturnBuilder remove_PostComment(Object element);
      public ASTSDReturnBuilder remove_PostComment(int index);
      public ASTSDReturnBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDReturnBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDReturnBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDReturnBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDReturnBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDReturnBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDReturnBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDReturnBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDReturn uncheckedBuild();
    }
    public class ASTSDThrowBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDThrowBuilder> {
      protected ASTSDThrowBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.expressions.expressionsbasis._ast.ASTArguments> arguments;
      public ASTSDThrowBuilder();
      public ASTSDThrow build();
      public boolean isValid();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments getArguments();
      public boolean isPresentArguments();
      public ASTSDThrowBuilder setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public ASTSDThrowBuilder setArguments(de.monticore.expressions.expressionsbasis._ast.ASTArguments arguments);
      public ASTSDThrowBuilder setArgumentsAbsent();
      public ASTSDThrowBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDThrowBuilder set_SourcePositionEndAbsent();
      public ASTSDThrowBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDThrowBuilder set_SourcePositionStartAbsent();
      public ASTSDThrowBuilder clear_PreComments();
      public ASTSDThrowBuilder add_PreComment(Comment precomment);
      public ASTSDThrowBuilder add_PreComment(int index, Comment precomment);
      public ASTSDThrowBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDThrowBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDThrowBuilder remove_PreComment(Object element);
      public ASTSDThrowBuilder remove_PreComment(int index);
      public ASTSDThrowBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDThrowBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDThrowBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDThrowBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDThrowBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDThrowBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDThrowBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDThrowBuilder set_PreComment(int index, Comment precomment);
      public ASTSDThrowBuilder clear_PostComments();
      public ASTSDThrowBuilder add_PostComment(Comment postcomment);
      public ASTSDThrowBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDThrowBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDThrowBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDThrowBuilder remove_PostComment(Object element);
      public ASTSDThrowBuilder remove_PostComment(int index);
      public ASTSDThrowBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDThrowBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDThrowBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDThrowBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDThrowBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDThrowBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDThrowBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDThrowBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDThrow uncheckedBuild();
    }
    public class ASTSDEndCallBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDEndCallBuilder> {
      protected ASTSDEndCallBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> sDTarget;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sd4development._ast.ASTSDEndCallArrow sDEndCallArrow;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDAction sDAction;
      public ASTSDEndCallBuilder();
      public ASTSDEndCall build();
      public boolean isValid();
      public de.monticore.lang.sdbasis._ast.ASTSDTarget getSDTarget();
      public boolean isPresentSDTarget();
      public de.monticore.lang.sd4development._ast.ASTSDEndCallArrow getSDEndCallArrow();
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.lang.sdbasis._ast.ASTSDAction getSDAction();
      public ASTSDEndCallBuilder setSDTarget(de.monticore.lang.sdbasis._ast.ASTSDTarget sDTarget);
      public ASTSDEndCallBuilder setSDTargetAbsent();
      public ASTSDEndCallBuilder setSDEndCallArrow(de.monticore.lang.sd4development._ast.ASTSDEndCallArrow sDEndCallArrow);
      public ASTSDEndCallBuilder setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public ASTSDEndCallBuilder setSDSourceAbsent();
      public ASTSDEndCallBuilder setSDAction(de.monticore.lang.sdbasis._ast.ASTSDAction sDAction);
      public ASTSDEndCallBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDEndCallBuilder set_SourcePositionEndAbsent();
      public ASTSDEndCallBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDEndCallBuilder set_SourcePositionStartAbsent();
      public ASTSDEndCallBuilder clear_PreComments();
      public ASTSDEndCallBuilder add_PreComment(Comment precomment);
      public ASTSDEndCallBuilder add_PreComment(int index, Comment precomment);
      public ASTSDEndCallBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDEndCallBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDEndCallBuilder remove_PreComment(Object element);
      public ASTSDEndCallBuilder remove_PreComment(int index);
      public ASTSDEndCallBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDEndCallBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDEndCallBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDEndCallBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDEndCallBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDEndCallBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDEndCallBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDEndCallBuilder set_PreComment(int index, Comment precomment);
      public ASTSDEndCallBuilder clear_PostComments();
      public ASTSDEndCallBuilder add_PostComment(Comment postcomment);
      public ASTSDEndCallBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDEndCallBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDEndCallBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDEndCallBuilder remove_PostComment(Object element);
      public ASTSDEndCallBuilder remove_PostComment(int index);
      public ASTSDEndCallBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDEndCallBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDEndCallBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDEndCallBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDEndCallBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDEndCallBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDEndCallBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDEndCallBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDEndCall uncheckedBuild();
    }
    public class ASTSDEndCallArrowBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDEndCallArrowBuilder> {
      protected ASTSDEndCallArrowBuilder realBuilder;
      public ASTSDEndCallArrowBuilder();
      public ASTSDEndCallArrow build();
      public boolean isValid();
      public ASTSDEndCallArrowBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDEndCallArrowBuilder set_SourcePositionEndAbsent();
      public ASTSDEndCallArrowBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDEndCallArrowBuilder set_SourcePositionStartAbsent();
      public ASTSDEndCallArrowBuilder clear_PreComments();
      public ASTSDEndCallArrowBuilder add_PreComment(Comment precomment);
      public ASTSDEndCallArrowBuilder add_PreComment(int index, Comment precomment);
      public ASTSDEndCallArrowBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDEndCallArrowBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDEndCallArrowBuilder remove_PreComment(Object element);
      public ASTSDEndCallArrowBuilder remove_PreComment(int index);
      public ASTSDEndCallArrowBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDEndCallArrowBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDEndCallArrowBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDEndCallArrowBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDEndCallArrowBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDEndCallArrowBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDEndCallArrowBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDEndCallArrowBuilder set_PreComment(int index, Comment precomment);
      public ASTSDEndCallArrowBuilder clear_PostComments();
      public ASTSDEndCallArrowBuilder add_PostComment(Comment postcomment);
      public ASTSDEndCallArrowBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDEndCallArrowBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDEndCallArrowBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDEndCallArrowBuilder remove_PostComment(Object element);
      public ASTSDEndCallArrowBuilder remove_PostComment(int index);
      public ASTSDEndCallArrowBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDEndCallArrowBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDEndCallArrowBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDEndCallArrowBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDEndCallArrowBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDEndCallArrowBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDEndCallArrowBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDEndCallArrowBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDEndCallArrow uncheckedBuild();
    }
    public class ASTSDIncompleteExpressionBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDIncompleteExpressionBuilder> {
      protected ASTSDIncompleteExpressionBuilder realBuilder;
      public ASTSDIncompleteExpressionBuilder();
      public ASTSDIncompleteExpression build();
      public boolean isValid();
      public ASTSDIncompleteExpressionBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDIncompleteExpressionBuilder set_SourcePositionEndAbsent();
      public ASTSDIncompleteExpressionBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDIncompleteExpressionBuilder set_SourcePositionStartAbsent();
      public ASTSDIncompleteExpressionBuilder clear_PreComments();
      public ASTSDIncompleteExpressionBuilder add_PreComment(Comment precomment);
      public ASTSDIncompleteExpressionBuilder add_PreComment(int index, Comment precomment);
      public ASTSDIncompleteExpressionBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDIncompleteExpressionBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDIncompleteExpressionBuilder remove_PreComment(Object element);
      public ASTSDIncompleteExpressionBuilder remove_PreComment(int index);
      public ASTSDIncompleteExpressionBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDIncompleteExpressionBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDIncompleteExpressionBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDIncompleteExpressionBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDIncompleteExpressionBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDIncompleteExpressionBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDIncompleteExpressionBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDIncompleteExpressionBuilder set_PreComment(int index, Comment precomment);
      public ASTSDIncompleteExpressionBuilder clear_PostComments();
      public ASTSDIncompleteExpressionBuilder add_PostComment(Comment postcomment);
      public ASTSDIncompleteExpressionBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDIncompleteExpressionBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDIncompleteExpressionBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDIncompleteExpressionBuilder remove_PostComment(Object element);
      public ASTSDIncompleteExpressionBuilder remove_PostComment(int index);
      public ASTSDIncompleteExpressionBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDIncompleteExpressionBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDIncompleteExpressionBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDIncompleteExpressionBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDIncompleteExpressionBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDIncompleteExpressionBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDIncompleteExpressionBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDIncompleteExpressionBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDIncompleteExpression uncheckedBuild();
    }
    public class ASTSDClassBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDClassBuilder> {
      protected ASTSDClassBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType;
      public ASTSDClassBuilder();
      public ASTSDClass build();
      public boolean isValid();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public ASTSDClassBuilder setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public ASTSDClassBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDClassBuilder set_SourcePositionEndAbsent();
      public ASTSDClassBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDClassBuilder set_SourcePositionStartAbsent();
      public ASTSDClassBuilder clear_PreComments();
      public ASTSDClassBuilder add_PreComment(Comment precomment);
      public ASTSDClassBuilder add_PreComment(int index, Comment precomment);
      public ASTSDClassBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDClassBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDClassBuilder remove_PreComment(Object element);
      public ASTSDClassBuilder remove_PreComment(int index);
      public ASTSDClassBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDClassBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDClassBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDClassBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDClassBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDClassBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDClassBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDClassBuilder set_PreComment(int index, Comment precomment);
      public ASTSDClassBuilder clear_PostComments();
      public ASTSDClassBuilder add_PostComment(Comment postcomment);
      public ASTSDClassBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDClassBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDClassBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDClassBuilder remove_PostComment(Object element);
      public ASTSDClassBuilder remove_PostComment(int index);
      public ASTSDClassBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDClassBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDClassBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDClassBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDClassBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDClassBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDClassBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDClassBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDClass uncheckedBuild();
    }
    public class ASTSDConditionBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDConditionBuilder> {
      protected ASTSDConditionBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTExpression expression;
      public ASTSDConditionBuilder();
      public ASTSDCondition build();
      public boolean isValid();
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getExpression();
      public ASTSDConditionBuilder setExpression(de.monticore.expressions.expressionsbasis._ast.ASTExpression expression);
      public ASTSDConditionBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDConditionBuilder set_SourcePositionEndAbsent();
      public ASTSDConditionBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDConditionBuilder set_SourcePositionStartAbsent();
      public ASTSDConditionBuilder clear_PreComments();
      public ASTSDConditionBuilder add_PreComment(Comment precomment);
      public ASTSDConditionBuilder add_PreComment(int index, Comment precomment);
      public ASTSDConditionBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDConditionBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDConditionBuilder remove_PreComment(Object element);
      public ASTSDConditionBuilder remove_PreComment(int index);
      public ASTSDConditionBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDConditionBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDConditionBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDConditionBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDConditionBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDConditionBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDConditionBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDConditionBuilder set_PreComment(int index, Comment precomment);
      public ASTSDConditionBuilder clear_PostComments();
      public ASTSDConditionBuilder add_PostComment(Comment postcomment);
      public ASTSDConditionBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDConditionBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDConditionBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDConditionBuilder remove_PostComment(Object element);
      public ASTSDConditionBuilder remove_PostComment(int index);
      public ASTSDConditionBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDConditionBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDConditionBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDConditionBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDConditionBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDConditionBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDConditionBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDConditionBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDCondition uncheckedBuild();
    }
    public class ASTSDVariableDeclarationBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDVariableDeclarationBuilder> {
      protected ASTSDVariableDeclarationBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected de.monticore.types.mcbasictypes._ast.ASTMCType mCType;
      <<astType="">> protected de.monticore.expressions.expressionsbasis._ast.ASTExpression assignment;
      <<derived_attribute_name="">> protected String name;
      public ASTSDVariableDeclarationBuilder();
      public ASTSDVariableDeclaration build();
      public boolean isValid();
      public de.monticore.types.mcbasictypes._ast.ASTMCType getMCType();
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression getAssignment();
      public String getName();
      public ASTSDVariableDeclarationBuilder setMCType(de.monticore.types.mcbasictypes._ast.ASTMCType mCType);
      public ASTSDVariableDeclarationBuilder setAssignment(de.monticore.expressions.expressionsbasis._ast.ASTExpression assignment);
      public ASTSDVariableDeclarationBuilder setName(String name);
      public ASTSDVariableDeclarationBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDVariableDeclarationBuilder set_SourcePositionEndAbsent();
      public ASTSDVariableDeclarationBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDVariableDeclarationBuilder set_SourcePositionStartAbsent();
      public ASTSDVariableDeclarationBuilder clear_PreComments();
      public ASTSDVariableDeclarationBuilder add_PreComment(Comment precomment);
      public ASTSDVariableDeclarationBuilder add_PreComment(int index, Comment precomment);
      public ASTSDVariableDeclarationBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDVariableDeclarationBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDVariableDeclarationBuilder remove_PreComment(Object element);
      public ASTSDVariableDeclarationBuilder remove_PreComment(int index);
      public ASTSDVariableDeclarationBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDVariableDeclarationBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDVariableDeclarationBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDVariableDeclarationBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDVariableDeclarationBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDVariableDeclarationBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDVariableDeclarationBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDVariableDeclarationBuilder set_PreComment(int index, Comment precomment);
      public ASTSDVariableDeclarationBuilder clear_PostComments();
      public ASTSDVariableDeclarationBuilder add_PostComment(Comment postcomment);
      public ASTSDVariableDeclarationBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDVariableDeclarationBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDVariableDeclarationBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDVariableDeclarationBuilder remove_PostComment(Object element);
      public ASTSDVariableDeclarationBuilder remove_PostComment(int index);
      public ASTSDVariableDeclarationBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDVariableDeclarationBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDVariableDeclarationBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDVariableDeclarationBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDVariableDeclarationBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDVariableDeclarationBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDVariableDeclarationBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDVariableDeclarationBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDVariableDeclaration uncheckedBuild();
    }
    public class ASTConstantsSD4Development {
      public final static String LANGUAGE;
      public final static int DEFAULT;
      public final static int STATIC;
      public final static int TRIGGER;
      public static String[] superGrammars;
      public ASTConstantsSD4Development();
      public static Collection<String> getAllLanguages();
    }
    public interface ASTSD4DevelopmentNode extends ASTNode {
      public abstract void accept(de.monticore.lang.sd4development._visitor.SD4DevelopmentTraverser visitor);
    }
    <<deprecated>> public enum SD4DevelopmentLiterals {
      STATIC(de.monticore.lang.sd4development._ast.ASTConstantsSD4Development.STATIC),
      TRIGGER(de.monticore.lang.sd4development._ast.ASTConstantsSD4Development.TRIGGER);
      private SD4DevelopmentLiterals(int intValue);
      protected int intValue;
      public int getIntValue();
    }
  }

}
