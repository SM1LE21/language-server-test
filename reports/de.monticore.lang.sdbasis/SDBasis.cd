package de.monticore.lang;

classdiagram SDBasis {
  package de.monticore.lang.sdbasis._auxiliary {
    public class MCBasicTypesMillForSDBasis extends de.monticore.types.mcbasictypes.MCBasicTypesMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser _traverser();
      protected de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class BasicSymbolsMillForSDBasis extends de.monticore.symbols.basicsymbols.BasicSymbolsMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser _traverser();
      protected de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class ExpressionsBasisMillForSDBasis extends de.monticore.expressions.expressionsbasis.ExpressionsBasisMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser _traverser();
      protected de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class UMLStereotypeMillForSDBasis extends de.monticore.umlstereotype.UMLStereotypeMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.umlstereotype._visitor.UMLStereotypeTraverser _traverser();
      protected de.monticore.umlstereotype._visitor.UMLStereotypeTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCBasicsMillForSDBasis extends de.monticore.mcbasics.MCBasicsMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _traverser();
      protected de.monticore.mcbasics._visitor.MCBasicsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCLiteralsBasisMillForSDBasis extends de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _traverser();
      protected de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
    public class MCCommonLiteralsMillForSDBasis extends de.monticore.literals.mccommonliterals.MCCommonLiteralsMill {
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _traverser();
      protected de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser _inheritanceTraverser();
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
    }
  }

  package de.monticore.lang.sdbasis {
    public class SDBasisMill {
      protected static SDBasisMill mill;
      protected SDBasisMill();
      public static SDBasisMill getMill();
      public static void init();
      protected static SDBasisMill millASTSDArtifactBuilder;
      protected static SDBasisMill millASTSequenceDiagramBuilder;
      protected static SDBasisMill millASTSDBodyBuilder;
      protected static SDBasisMill millASTSDCompleteModifierBuilder;
      protected static SDBasisMill millASTSDFreeModifierBuilder;
      protected static SDBasisMill millASTSDInitialModifierBuilder;
      protected static SDBasisMill millASTSDVisibleModifierBuilder;
      protected static SDBasisMill millASTSDObjectBuilder;
      protected static SDBasisMill millASTSDObjectSourceBuilder;
      protected static SDBasisMill millASTSDObjectTargetBuilder;
      protected static SDBasisMill millASTSDSendMessageBuilder;
      protected static SDBasisMill millASTSDActivityBarBuilder;
      public static de.monticore.lang.sdbasis._ast.ASTSDArtifactBuilder sDArtifactBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDArtifactBuilder _sDArtifactBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSequenceDiagramBuilder sequenceDiagramBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSequenceDiagramBuilder _sequenceDiagramBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDBodyBuilder sDBodyBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDBodyBuilder _sDBodyBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDCompleteModifierBuilder sDCompleteModifierBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDCompleteModifierBuilder _sDCompleteModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDFreeModifierBuilder sDFreeModifierBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDFreeModifierBuilder _sDFreeModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDInitialModifierBuilder sDInitialModifierBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDInitialModifierBuilder _sDInitialModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDVisibleModifierBuilder sDVisibleModifierBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDVisibleModifierBuilder _sDVisibleModifierBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectBuilder sDObjectBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDObjectBuilder _sDObjectBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectSourceBuilder sDObjectSourceBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDObjectSourceBuilder _sDObjectSourceBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDObjectTargetBuilder sDObjectTargetBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDObjectTargetBuilder _sDObjectTargetBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDSendMessageBuilder sDSendMessageBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDSendMessageBuilder _sDSendMessageBuilder();
      public static de.monticore.lang.sdbasis._ast.ASTSDActivityBarBuilder sDActivityBarBuilder();
      protected de.monticore.lang.sdbasis._ast.ASTSDActivityBarBuilder _sDActivityBarBuilder();
      protected static SDBasisMill millSDBasisTraverserImplementation;
      protected static SDBasisMill millSDBasisInheritanceHandler;
      protected static SDBasisMill millSDBasisScope;
      protected static SDBasisMill millSDBasisScopesGenitorDelegator;
      protected static SDBasisMill millSDBasisArtifactScope;
      protected static SDBasisMill millSDBasisGlobalScope;
      protected static SDBasisMill millSDBasisScopesGenitor;
      protected static SDBasisMill millSDBasisFullPrettyPrinter;
      public static String prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
      protected String _prettyPrint(de.monticore.ast.ASTNode node, boolean printComments);
      protected de.monticore.lang.sdbasis._prettyprint.SDBasisFullPrettyPrinter fullPrettyPrinter;
      protected static SDBasisMill millSDBasisTypeDispatcher;
      protected de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher typeDispatcher;
      public static de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher typeDispatcher();
      protected de.monticore.lang.sdbasis._util.SDBasisTypeDispatcher _typeDispatcher();
      public static de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser _traverser();
      public static de.monticore.lang.sdbasis._visitor.SDBasisTraverser inheritanceTraverser();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser _inheritanceTraverser();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope sDBasisGlobalScope;
      public static de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope globalScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope _globalScope();
      public static de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope artifactScope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope _artifactScope();
      public static de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope _scope();
      public static de.monticore.lang.sdbasis._symboltable.SDBasisScopesGenitor scopesGenitor();
      protected de.monticore.lang.sdbasis._symboltable.SDBasisScopesGenitor _scopesGenitor();
      public static de.monticore.lang.sdbasis._symboltable.SDBasisScopesGenitorDelegator scopesGenitorDelegator();
      protected de.monticore.lang.sdbasis._symboltable.SDBasisScopesGenitorDelegator _scopesGenitorDelegator();
      public static de.monticore.types.mcbasictypes._ast.ASTMCQualifiedNameBuilder mCQualifiedNameBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclarationBuilder mCPackageDeclarationBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCImportStatementBuilder mCImportStatementBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveTypeBuilder mCPrimitiveTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCQualifiedTypeBuilder mCQualifiedTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCReturnTypeBuilder mCReturnTypeBuilder();
      public static de.monticore.types.mcbasictypes._ast.ASTMCVoidTypeBuilder mCVoidTypeBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.DiagramSymbolBuilder diagramSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.DiagramSymbolSurrogateBuilder diagramSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeSymbolBuilder typeSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeSymbolSurrogateBuilder typeSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbolBuilder typeVarSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbolSurrogateBuilder typeVarSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.VariableSymbolBuilder variableSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.VariableSymbolSurrogateBuilder variableSymbolSurrogateBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.FunctionSymbolBuilder functionSymbolBuilder();
      public static de.monticore.symbols.basicsymbols._symboltable.FunctionSymbolSurrogateBuilder functionSymbolSurrogateBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTNameExpressionBuilder nameExpressionBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpressionBuilder literalExpressionBuilder();
      public static de.monticore.expressions.expressionsbasis._ast.ASTArgumentsBuilder argumentsBuilder();
      public static de.monticore.umlstereotype._ast.ASTStereotypeBuilder stereotypeBuilder();
      public static de.monticore.umlstereotype._ast.ASTStereoValueBuilder stereoValueBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder nullLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder booleanLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder charLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder stringLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder natLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder signedNatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder basicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder signedBasicLongLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder basicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder signedBasicFloatLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder basicDoubleLiteralBuilder();
      public static de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder signedBasicDoubleLiteralBuilder();
      public static void initMe(SDBasisMill a);
      public static void reset();
    }
  }

  package de.monticore.lang.sdbasis._prettyprint {
    public class SDBasisPrettyPrinter implements de.monticore.lang.sdbasis._visitor.SDBasisHandler, de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      protected de.monticore.prettyprint.IndentPrinter printer;
      public de.monticore.prettyprint.IndentPrinter getPrinter();
      protected boolean printComments;
      public boolean isPrintComments();
      public void setPrintComments(boolean printComments);
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public SDBasisPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer, boolean printComments);
    }
    public class SDBasisFullPrettyPrinter {
      protected de.monticore.prettyprint.IndentPrinter printer;
      public de.monticore.prettyprint.IndentPrinter getPrinter();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public SDBasisFullPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer, boolean printComments);
      public SDBasisFullPrettyPrinter(de.monticore.prettyprint.IndentPrinter printer);
      protected void initializeTraverser(boolean printComments);
      public void setPrintComments(boolean printComments);
      public String prettyprint(de.monticore.ast.ASTNode node);
    }
  }

  package de.monticore.lang.sdbasis._od {
    public class SDBasis2OD implements de.monticore.lang.sdbasis._visitor.SDBasisVisitor2, de.monticore.lang.sdbasis._visitor.SDBasisHandler {
      public SDBasis2OD(de.monticore.prettyprint.IndentPrinter printer, de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting);
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      protected de.monticore.prettyprint.IndentPrinter pp;
      protected de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting;
      protected boolean printEmptyOptional;
      protected boolean printEmptyList;
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      protected void printAttribute(String name, String value);
      protected void printObject(String objName, String objType);
      public String printObjectDiagram(String modelName, de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public boolean isPrintEmptyOptional();
      public void setPrintEmptyOptional(boolean printEmptyOptional);
      public boolean isPrintEmptyList();
      public void setPrintEmptyList(boolean printEmptyList);
    }
  }

  package de.monticore.lang.sdbasis._util {
    public class SDBasisTypeDispatcher implements de.monticore.lang.sdbasis._visitor.SDBasisHandler {
      protected de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher mCBasicTypesTypeDispatcher;
      protected de.monticore.symbols.basicsymbols._util.BasicSymbolsTypeDispatcher basicSymbolsTypeDispatcher;
      protected de.monticore.expressions.expressionsbasis._util.ExpressionsBasisTypeDispatcher expressionsBasisTypeDispatcher;
      protected de.monticore.umlstereotype._util.UMLStereotypeTypeDispatcher uMLStereotypeTypeDispatcher;
      protected de.monticore.mcbasics._util.MCBasicsTypeDispatcher mCBasicsTypeDispatcher;
      protected de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher mCLiteralsBasisTypeDispatcher;
      protected de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher mCCommonLiteralsTypeDispatcher;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDArtifact> optASTSDArtifact;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSequenceDiagram> optASTSequenceDiagram;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDBody> optASTSDBody;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier> optASTSDCompleteModifier;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDFreeModifier> optASTSDFreeModifier;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDInitialModifier> optASTSDInitialModifier;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier> optASTSDVisibleModifier;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDObject> optASTSDObject;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDObjectSource> optASTSDObjectSource;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDObjectTarget> optASTSDObjectTarget;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSendMessage> optASTSDSendMessage;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> optASTSDActivityBar;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDModifier> optASTSDModifier;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDElement> optASTSDElement;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDInteraction> optASTSDInteraction;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> optASTSDSource;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> optASTSDTarget;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDAction> optASTSDAction;
      protected Optional<de.monticore.lang.sdbasis._ast.SDBasisLiterals> optSDBasisLiterals;
      protected Optional<de.monticore.lang.sdbasis._ast.ASTSDBasisNode> optASTSDBasisNode;
      protected boolean isASTSDArtifact;
      protected boolean isASTSequenceDiagram;
      protected boolean isASTSDBody;
      protected boolean isASTSDCompleteModifier;
      protected boolean isASTSDFreeModifier;
      protected boolean isASTSDInitialModifier;
      protected boolean isASTSDVisibleModifier;
      protected boolean isASTSDObject;
      protected boolean isASTSDObjectSource;
      protected boolean isASTSDObjectTarget;
      protected boolean isASTSDSendMessage;
      protected boolean isASTSDActivityBar;
      protected boolean isASTSDModifier;
      protected boolean isASTSDElement;
      protected boolean isASTSDInteraction;
      protected boolean isASTSDSource;
      protected boolean isASTSDTarget;
      protected boolean isASTSDAction;
      protected boolean isSDBasisLiterals;
      protected boolean isASTSDBasisNode;
      protected Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope> optISDBasisArtifactScope;
      protected Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope> optISDBasisGlobalScope;
      protected Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> optISDBasisScope;
      protected boolean isISDBasisArtifactScope;
      protected boolean isISDBasisGlobalScope;
      protected boolean isISDBasisScope;
      public SDBasisTypeDispatcher();
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public void reset();
      public boolean isASTSDArtifact(de.monticore.ast.ASTNode node);
      public boolean isASTSequenceDiagram(de.monticore.ast.ASTNode node);
      public boolean isASTSDBody(de.monticore.ast.ASTNode node);
      public boolean isASTSDCompleteModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDFreeModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDInitialModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDVisibleModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDObject(de.monticore.ast.ASTNode node);
      public boolean isASTSDObjectSource(de.monticore.ast.ASTNode node);
      public boolean isASTSDObjectTarget(de.monticore.ast.ASTNode node);
      public boolean isASTSDSendMessage(de.monticore.ast.ASTNode node);
      public boolean isASTSDActivityBar(de.monticore.ast.ASTNode node);
      public boolean isASTSDModifier(de.monticore.ast.ASTNode node);
      public boolean isASTSDElement(de.monticore.ast.ASTNode node);
      public boolean isASTSDInteraction(de.monticore.ast.ASTNode node);
      public boolean isASTSDSource(de.monticore.ast.ASTNode node);
      public boolean isASTSDTarget(de.monticore.ast.ASTNode node);
      public boolean isASTSDAction(de.monticore.ast.ASTNode node);
      public boolean isSDBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTSDBasisNode(de.monticore.ast.ASTNode node);
      public boolean isISDBasisArtifactScope(de.monticore.symboltable.IScope scope);
      public boolean isISDBasisGlobalScope(de.monticore.symboltable.IScope scope);
      public boolean isISDBasisScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sdbasis._ast.ASTSDArtifact asASTSDArtifact(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSequenceDiagram asASTSequenceDiagram(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDBody asASTSDBody(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier asASTSDCompleteModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDFreeModifier asASTSDFreeModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDInitialModifier asASTSDInitialModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier asASTSDVisibleModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObject asASTSDObject(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObjectSource asASTSDObjectSource(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDObjectTarget asASTSDObjectTarget(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDSendMessage asASTSDSendMessage(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar asASTSDActivityBar(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier asASTSDModifier(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDElement asASTSDElement(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDInteraction asASTSDInteraction(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDSource asASTSDSource(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDTarget asASTSDTarget(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDAction asASTSDAction(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.SDBasisLiterals asSDBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._ast.ASTSDBasisNode asASTSDBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope asISDBasisArtifactScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope asISDBasisGlobalScope(de.monticore.symboltable.IScope scope);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope asISDBasisScope(de.monticore.symboltable.IScope scope);
      public boolean isASTMCQualifiedName(de.monticore.ast.ASTNode node);
      public boolean isASTMCPackageDeclaration(de.monticore.ast.ASTNode node);
      public boolean isASTMCImportStatement(de.monticore.ast.ASTNode node);
      public boolean isASTMCPrimitiveType(de.monticore.ast.ASTNode node);
      public boolean isASTMCQualifiedType(de.monticore.ast.ASTNode node);
      public boolean isASTMCReturnType(de.monticore.ast.ASTNode node);
      public boolean isASTMCVoidType(de.monticore.ast.ASTNode node);
      public boolean isASTMCType(de.monticore.ast.ASTNode node);
      public boolean isASTMCObjectType(de.monticore.ast.ASTNode node);
      public boolean isMCBasicTypesLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCBasicTypesNode(de.monticore.ast.ASTNode node);
      public boolean isASTDiagram(de.monticore.ast.ASTNode node);
      public boolean isASTType(de.monticore.ast.ASTNode node);
      public boolean isASTTypeVar(de.monticore.ast.ASTNode node);
      public boolean isASTVariable(de.monticore.ast.ASTNode node);
      public boolean isASTFunction(de.monticore.ast.ASTNode node);
      public boolean isBasicSymbolsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTBasicSymbolsNode(de.monticore.ast.ASTNode node);
      public boolean isDiagram(de.monticore.symboltable.ISymbol symbol);
      public boolean isType(de.monticore.symboltable.ISymbol symbol);
      public boolean isTypeVar(de.monticore.symboltable.ISymbol symbol);
      public boolean isVariable(de.monticore.symboltable.ISymbol symbol);
      public boolean isFunction(de.monticore.symboltable.ISymbol symbol);
      public boolean isASTNameExpression(de.monticore.ast.ASTNode node);
      public boolean isASTLiteralExpression(de.monticore.ast.ASTNode node);
      public boolean isASTArguments(de.monticore.ast.ASTNode node);
      public boolean isASTExpression(de.monticore.ast.ASTNode node);
      public boolean isExpressionsBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTExpressionsBasisNode(de.monticore.ast.ASTNode node);
      public boolean isASTStereotype(de.monticore.ast.ASTNode node);
      public boolean isASTStereoValue(de.monticore.ast.ASTNode node);
      public boolean isUMLStereotypeLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTUMLStereotypeNode(de.monticore.ast.ASTNode node);
      public boolean isMCBasicsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCBasicsNode(de.monticore.ast.ASTNode node);
      public boolean isASTLiteral(de.monticore.ast.ASTNode node);
      public boolean isMCLiteralsBasisLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCLiteralsBasisNode(de.monticore.ast.ASTNode node);
      public boolean isASTNullLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBooleanLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTCharLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTStringLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTNatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedNatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicLongLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicLongLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTNumericLiteral(de.monticore.ast.ASTNode node);
      public boolean isASTSignedNumericLiteral(de.monticore.ast.ASTNode node);
      public boolean isMCCommonLiteralsLiterals(de.monticore.ast.ASTNode node);
      public boolean isASTMCCommonLiteralsNode(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName asASTMCQualifiedName(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration asASTMCPackageDeclaration(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement asASTMCImportStatement(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType asASTMCPrimitiveType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType asASTMCQualifiedType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCReturnType asASTMCReturnType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCVoidType asASTMCVoidType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCType asASTMCType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType asASTMCObjectType(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.MCBasicTypesLiterals asMCBasicTypesLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode asASTMCBasicTypesNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTDiagram asASTDiagram(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTType asASTType(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTTypeVar asASTTypeVar(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTVariable asASTVariable(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTFunction asASTFunction(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.BasicSymbolsLiterals asBasicSymbolsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode asASTBasicSymbolsNode(de.monticore.ast.ASTNode node);
      public de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol asDiagram(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.TypeSymbol asType(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol asTypeVar(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol asVariable(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol asFunction(de.monticore.symboltable.ISymbol symbol);
      public de.monticore.expressions.expressionsbasis._ast.ASTNameExpression asASTNameExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTLiteralExpression asASTLiteralExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTArguments asASTArguments(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTExpression asASTExpression(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ExpressionsBasisLiterals asExpressionsBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode asASTExpressionsBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTStereotype asASTStereotype(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTStereoValue asASTStereoValue(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.UMLStereotypeLiterals asUMLStereotypeLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.umlstereotype._ast.ASTUMLStereotypeNode asASTUMLStereotypeNode(de.monticore.ast.ASTNode node);
      public de.monticore.mcbasics._ast.MCBasicsLiterals asMCBasicsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.mcbasics._ast.ASTMCBasicsNode asASTMCBasicsNode(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.ASTLiteral asASTLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.MCLiteralsBasisLiterals asMCLiteralsBasisLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode asASTMCLiteralsBasisNode(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNullLiteral asASTNullLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral asASTBooleanLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTCharLiteral asASTCharLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTStringLiteral asASTStringLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNatLiteral asASTNatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral asASTSignedNatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral asASTBasicLongLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral asASTSignedBasicLongLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral asASTBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral asASTSignedBasicFloatLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral asASTBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral asASTSignedBasicDoubleLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral asASTSignedLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral asASTNumericLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral asASTSignedNumericLiteral(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.MCCommonLiteralsLiterals asMCCommonLiteralsLiterals(de.monticore.ast.ASTNode node);
      public de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode asASTMCCommonLiteralsNode(de.monticore.ast.ASTNode node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void handle(de.monticore.lang.sdbasis._ast.SDBasisLiterals node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public boolean isIsASTSDArtifact();
      public void setIsASTSDArtifact(boolean isASTSDArtifact);
      public boolean isIsASTSequenceDiagram();
      public void setIsASTSequenceDiagram(boolean isASTSequenceDiagram);
      public boolean isIsASTSDBody();
      public void setIsASTSDBody(boolean isASTSDBody);
      public boolean isIsASTSDCompleteModifier();
      public void setIsASTSDCompleteModifier(boolean isASTSDCompleteModifier);
      public boolean isIsASTSDFreeModifier();
      public void setIsASTSDFreeModifier(boolean isASTSDFreeModifier);
      public boolean isIsASTSDInitialModifier();
      public void setIsASTSDInitialModifier(boolean isASTSDInitialModifier);
      public boolean isIsASTSDVisibleModifier();
      public void setIsASTSDVisibleModifier(boolean isASTSDVisibleModifier);
      public boolean isIsASTSDObject();
      public void setIsASTSDObject(boolean isASTSDObject);
      public boolean isIsASTSDObjectSource();
      public void setIsASTSDObjectSource(boolean isASTSDObjectSource);
      public boolean isIsASTSDObjectTarget();
      public void setIsASTSDObjectTarget(boolean isASTSDObjectTarget);
      public boolean isIsASTSDSendMessage();
      public void setIsASTSDSendMessage(boolean isASTSDSendMessage);
      public boolean isIsASTSDActivityBar();
      public void setIsASTSDActivityBar(boolean isASTSDActivityBar);
      public boolean isIsASTSDModifier();
      public void setIsASTSDModifier(boolean isASTSDModifier);
      public boolean isIsASTSDElement();
      public void setIsASTSDElement(boolean isASTSDElement);
      public boolean isIsASTSDInteraction();
      public void setIsASTSDInteraction(boolean isASTSDInteraction);
      public boolean isIsASTSDSource();
      public void setIsASTSDSource(boolean isASTSDSource);
      public boolean isIsASTSDTarget();
      public void setIsASTSDTarget(boolean isASTSDTarget);
      public boolean isIsASTSDAction();
      public void setIsASTSDAction(boolean isASTSDAction);
      public boolean isIsSDBasisLiterals();
      public void setIsSDBasisLiterals(boolean isSDBasisLiterals);
      public boolean isIsASTSDBasisNode();
      public void setIsASTSDBasisNode(boolean isASTSDBasisNode);
      public boolean isIsISDBasisArtifactScope();
      public void setIsISDBasisArtifactScope(boolean isISDBasisArtifactScope);
      public boolean isIsISDBasisGlobalScope();
      public void setIsISDBasisGlobalScope(boolean isISDBasisGlobalScope);
      public boolean isIsISDBasisScope();
      public void setIsISDBasisScope(boolean isISDBasisScope);
      public de.monticore.lang.sdbasis._ast.ASTSDArtifact getOptASTSDArtifact();
      public boolean isPresentOptASTSDArtifact();
      public void setOptASTSDArtifact(de.monticore.lang.sdbasis._ast.ASTSDArtifact optASTSDArtifact);
      public void setOptASTSDArtifactAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSequenceDiagram getOptASTSequenceDiagram();
      public boolean isPresentOptASTSequenceDiagram();
      public void setOptASTSequenceDiagram(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram optASTSequenceDiagram);
      public void setOptASTSequenceDiagramAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDBody getOptASTSDBody();
      public boolean isPresentOptASTSDBody();
      public void setOptASTSDBody(de.monticore.lang.sdbasis._ast.ASTSDBody optASTSDBody);
      public void setOptASTSDBodyAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier getOptASTSDCompleteModifier();
      public boolean isPresentOptASTSDCompleteModifier();
      public void setOptASTSDCompleteModifier(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier optASTSDCompleteModifier);
      public void setOptASTSDCompleteModifierAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDFreeModifier getOptASTSDFreeModifier();
      public boolean isPresentOptASTSDFreeModifier();
      public void setOptASTSDFreeModifier(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier optASTSDFreeModifier);
      public void setOptASTSDFreeModifierAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDInitialModifier getOptASTSDInitialModifier();
      public boolean isPresentOptASTSDInitialModifier();
      public void setOptASTSDInitialModifier(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier optASTSDInitialModifier);
      public void setOptASTSDInitialModifierAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier getOptASTSDVisibleModifier();
      public boolean isPresentOptASTSDVisibleModifier();
      public void setOptASTSDVisibleModifier(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier optASTSDVisibleModifier);
      public void setOptASTSDVisibleModifierAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDObject getOptASTSDObject();
      public boolean isPresentOptASTSDObject();
      public void setOptASTSDObject(de.monticore.lang.sdbasis._ast.ASTSDObject optASTSDObject);
      public void setOptASTSDObjectAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDObjectSource getOptASTSDObjectSource();
      public boolean isPresentOptASTSDObjectSource();
      public void setOptASTSDObjectSource(de.monticore.lang.sdbasis._ast.ASTSDObjectSource optASTSDObjectSource);
      public void setOptASTSDObjectSourceAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDObjectTarget getOptASTSDObjectTarget();
      public boolean isPresentOptASTSDObjectTarget();
      public void setOptASTSDObjectTarget(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget optASTSDObjectTarget);
      public void setOptASTSDObjectTargetAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDSendMessage getOptASTSDSendMessage();
      public boolean isPresentOptASTSDSendMessage();
      public void setOptASTSDSendMessage(de.monticore.lang.sdbasis._ast.ASTSDSendMessage optASTSDSendMessage);
      public void setOptASTSDSendMessageAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar getOptASTSDActivityBar();
      public boolean isPresentOptASTSDActivityBar();
      public void setOptASTSDActivityBar(de.monticore.lang.sdbasis._ast.ASTSDActivityBar optASTSDActivityBar);
      public void setOptASTSDActivityBarAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier getOptASTSDModifier();
      public boolean isPresentOptASTSDModifier();
      public void setOptASTSDModifier(de.monticore.lang.sdbasis._ast.ASTSDModifier optASTSDModifier);
      public void setOptASTSDModifierAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDElement getOptASTSDElement();
      public boolean isPresentOptASTSDElement();
      public void setOptASTSDElement(de.monticore.lang.sdbasis._ast.ASTSDElement optASTSDElement);
      public void setOptASTSDElementAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDInteraction getOptASTSDInteraction();
      public boolean isPresentOptASTSDInteraction();
      public void setOptASTSDInteraction(de.monticore.lang.sdbasis._ast.ASTSDInteraction optASTSDInteraction);
      public void setOptASTSDInteractionAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDSource getOptASTSDSource();
      public boolean isPresentOptASTSDSource();
      public void setOptASTSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource optASTSDSource);
      public void setOptASTSDSourceAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDTarget getOptASTSDTarget();
      public boolean isPresentOptASTSDTarget();
      public void setOptASTSDTarget(de.monticore.lang.sdbasis._ast.ASTSDTarget optASTSDTarget);
      public void setOptASTSDTargetAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDAction getOptASTSDAction();
      public boolean isPresentOptASTSDAction();
      public void setOptASTSDAction(de.monticore.lang.sdbasis._ast.ASTSDAction optASTSDAction);
      public void setOptASTSDActionAbsent();
      public de.monticore.lang.sdbasis._ast.SDBasisLiterals getOptSDBasisLiterals();
      public boolean isPresentOptSDBasisLiterals();
      public void setOptSDBasisLiterals(de.monticore.lang.sdbasis._ast.SDBasisLiterals optSDBasisLiterals);
      public void setOptSDBasisLiteralsAbsent();
      public de.monticore.lang.sdbasis._ast.ASTSDBasisNode getOptASTSDBasisNode();
      public boolean isPresentOptASTSDBasisNode();
      public void setOptASTSDBasisNode(de.monticore.lang.sdbasis._ast.ASTSDBasisNode optASTSDBasisNode);
      public void setOptASTSDBasisNodeAbsent();
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope getOptISDBasisArtifactScope();
      public boolean isPresentOptISDBasisArtifactScope();
      public void setOptISDBasisArtifactScope(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope optISDBasisArtifactScope);
      public void setOptISDBasisArtifactScopeAbsent();
      public de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope getOptISDBasisGlobalScope();
      public boolean isPresentOptISDBasisGlobalScope();
      public void setOptISDBasisGlobalScope(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope optISDBasisGlobalScope);
      public void setOptISDBasisGlobalScopeAbsent();
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getOptISDBasisScope();
      public boolean isPresentOptISDBasisScope();
      public void setOptISDBasisScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope optISDBasisScope);
      public void setOptISDBasisScopeAbsent();
    }
  }

  package de.monticore.lang.sdbasis._cocos {
    public class SDBasisCoCoChecker {
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public SDBasisCoCoChecker();
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public void addChecker(de.monticore.lang.sdbasis._cocos.SDBasisCoCoChecker checker);
      public void checkAll(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDArtifactCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSequenceDiagramCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDBodyCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDCompleteModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDFreeModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDInitialModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDVisibleModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectSourceCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDObjectTargetCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDSendMessageCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDActivityBarCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDModifierCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDElementCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDInteractionCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDSourceCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDTargetCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDActionCoCo coco);
      public void addCoCo(de.monticore.lang.sdbasis._cocos.SDBasisASTSDBasisNodeCoCo coco);
      public void addChecker(de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker checker);
      public void checkAll(de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedNameCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPackageDeclarationCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCImportStatementCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPrimitiveTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCReturnTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCVoidTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCObjectTypeCoCo coco);
      public void addCoCo(de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCBasicTypesNodeCoCo coco);
      public void addChecker(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsCoCoChecker checker);
      public void checkAll(de.monticore.symbols.basicsymbols._ast.ASTBasicSymbolsNode node);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTDiagramCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTTypeVarCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTVariableCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTFunctionCoCo coco);
      public void addCoCo(de.monticore.symbols.basicsymbols._cocos.BasicSymbolsASTBasicSymbolsNodeCoCo coco);
      public void addChecker(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisCoCoChecker checker);
      public void checkAll(de.monticore.expressions.expressionsbasis._ast.ASTExpressionsBasisNode node);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTNameExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTLiteralExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTArgumentsCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionCoCo coco);
      public void addCoCo(de.monticore.expressions.expressionsbasis._cocos.ExpressionsBasisASTExpressionsBasisNodeCoCo coco);
      public void addChecker(de.monticore.umlstereotype._cocos.UMLStereotypeCoCoChecker checker);
      public void checkAll(de.monticore.umlstereotype._ast.ASTUMLStereotypeNode node);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTStereotypeCoCo coco);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTStereoValueCoCo coco);
      public void addCoCo(de.monticore.umlstereotype._cocos.UMLStereotypeASTUMLStereotypeNodeCoCo coco);
      public void addChecker(de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker);
      public void checkAll(de.monticore.mcbasics._ast.ASTMCBasicsNode node);
      public void addCoCo(de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco);
      public void addChecker(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker);
      public void checkAll(de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco);
      public void addChecker(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker);
      public void checkAll(de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco);
      public void addCoCo(de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco);
    }
    public interface SDBasisASTSDArtifactCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
    }
    public interface SDBasisASTSequenceDiagramCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
    }
    public interface SDBasisASTSDBodyCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
    }
    public interface SDBasisASTSDCompleteModifierCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
    }
    public interface SDBasisASTSDFreeModifierCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
    }
    public interface SDBasisASTSDInitialModifierCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
    }
    public interface SDBasisASTSDVisibleModifierCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
    }
    public interface SDBasisASTSDObjectCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
    }
    public interface SDBasisASTSDObjectSourceCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
    }
    public interface SDBasisASTSDObjectTargetCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
    }
    public interface SDBasisASTSDSendMessageCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
    }
    public interface SDBasisASTSDActivityBarCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
    }
    public interface SDBasisASTSDModifierCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
    }
    public interface SDBasisASTSDElementCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDElement node);
    }
    public interface SDBasisASTSDInteractionCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
    }
    public interface SDBasisASTSDSourceCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSource node);
    }
    public interface SDBasisASTSDTargetCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
    }
    public interface SDBasisASTSDActionCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDAction node);
    }
    public interface SDBasisASTSDBasisNodeCoCo extends de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      public abstract void check(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
    }
  }

  package de.monticore.lang.sdbasis._visitor {
    public interface SDBasisTraverser extends de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser, de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser, de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser, de.monticore.umlstereotype._visitor.UMLStereotypeTraverser {
      public void add4SDBasis(de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor);
      public List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList();
      public void add4MCBasicTypes(de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor);
      public List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList();
      public void add4BasicSymbols(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor);
      public List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList();
      public void add4ExpressionsBasis(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor);
      public List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList();
      public void add4UMLStereotype(de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor);
      public List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void setSDBasisHandler(de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler);
      public Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler();
      public void setMCBasicTypesHandler(de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler);
      public Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler();
      public void setBasicSymbolsHandler(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler);
      public Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler();
      public void setExpressionsBasisHandler(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler);
      public Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler();
      public void setUMLStereotypeHandler(de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler);
      public Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
    }
    public class SDBasisTraverserImplementation implements de.monticore.lang.sdbasis._visitor.SDBasisTraverser {
      protected SDBasisTraverserImplementation realThis;
      protected List<de.monticore.visitor.IVisitor> iVisitorList;
      protected List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> mCBasicTypesVisitorList;
      protected List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> basicSymbolsVisitorList;
      protected List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> expressionsBasisVisitorList;
      protected List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> uMLStereotypeVisitorList;
      protected List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> mCBasicsVisitorList;
      protected List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> mCLiteralsBasisVisitorList;
      protected List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> mCCommonLiteralsVisitorList;
      protected List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> sDBasisVisitorList;
      protected Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> mCBasicTypesHandler;
      protected Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> basicSymbolsHandler;
      protected Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> expressionsBasisHandler;
      protected Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> uMLStereotypeHandler;
      protected Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> mCBasicsHandler;
      protected Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> mCLiteralsBasisHandler;
      protected Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> mCCommonLiteralsHandler;
      protected Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> sDBasisHandler;
      public void add4MCBasicTypes(de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor);
      public List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList();
      public void add4BasicSymbols(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2 basicSymbolsVisitor);
      public List<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsVisitor2> getBasicSymbolsVisitorList();
      public void add4ExpressionsBasis(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2 expressionsBasisVisitor);
      public List<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisVisitor2> getExpressionsBasisVisitorList();
      public void add4UMLStereotype(de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2 uMLStereotypeVisitor);
      public List<de.monticore.umlstereotype._visitor.UMLStereotypeVisitor2> getUMLStereotypeVisitorList();
      public void add4MCBasics(de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor);
      public List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList();
      public void add4MCLiteralsBasis(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor);
      public List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList();
      public void add4MCCommonLiterals(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor);
      public List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList();
      public void add4SDBasis(de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 sDBasisVisitor);
      public List<de.monticore.lang.sdbasis._visitor.SDBasisVisitor2> getSDBasisVisitorList();
      public void setMCBasicTypesHandler(de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler);
      public Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler();
      public void setBasicSymbolsHandler(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler basicSymbolsHandler);
      public Optional<de.monticore.symbols.basicsymbols._visitor.BasicSymbolsHandler> getBasicSymbolsHandler();
      public void setExpressionsBasisHandler(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler expressionsBasisHandler);
      public Optional<de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisHandler> getExpressionsBasisHandler();
      public void setUMLStereotypeHandler(de.monticore.umlstereotype._visitor.UMLStereotypeHandler uMLStereotypeHandler);
      public Optional<de.monticore.umlstereotype._visitor.UMLStereotypeHandler> getUMLStereotypeHandler();
      public void setMCBasicsHandler(de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler);
      public Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler();
      public void setMCLiteralsBasisHandler(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler);
      public Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler();
      public void setMCCommonLiteralsHandler(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler);
      public Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler();
      public void setSDBasisHandler(de.monticore.lang.sdbasis._visitor.SDBasisHandler sDBasisHandler);
      public Optional<de.monticore.lang.sdbasis._visitor.SDBasisHandler> getSDBasisHandler();
      public void add4IVisitor(de.monticore.visitor.IVisitor iVisitor);
      public List<de.monticore.visitor.IVisitor> getIVisitorList();
      protected Set<Object> traversedElements;
      public Set<Object> getTraversedElements();
      public void setTraversedElements(Set<Object> traversedElements);
    }
    public interface SDBasisVisitor2 extends de.monticore.visitor.IVisitor {
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
    }
    public interface SDBasisHandler extends de.monticore.visitor.IHandler {
      public abstract de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public abstract void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void traverse(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ICommonSDBasisSymbol node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
      public void traverse(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
    }
    public class SDBasisInheritanceHandler implements de.monticore.lang.sdbasis._visitor.SDBasisHandler {
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDModifier node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDElement node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDInteraction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDSource node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDTarget node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDAction node);
      public void handle(de.monticore.lang.sdbasis._ast.ASTSDBasisNode node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void handle(de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope node);
    }
  }

  package de.monticore.lang.sdbasis._symboltable {
    public class SDBasisScope implements de.monticore.lang.sdbasis._symboltable.ISDBasisScope {
      public SDBasisScope();
      public SDBasisScope(boolean shadowing);
      public SDBasisScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public SDBasisScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope, boolean shadowing);
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> unknownSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> diagramSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> typeSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> typeVarSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> variableSymbols;
      protected com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> functionSymbols;
      public void add(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public void remove(de.monticore.symboltable.SymbolWithScopeOfUnknownKind symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symboltable.SymbolWithScopeOfUnknownKind> getUnknownSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> getDiagramSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> getTypeSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> getTypeVarSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> getVariableSymbols();
      public void add(de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol);
      public void remove(de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol);
      public com.google.common.collect.LinkedListMultimap<String,de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> getFunctionSymbols();
      protected boolean unknownSymbolsAlreadyResolved;
      protected boolean diagramSymbolsAlreadyResolved;
      protected boolean typeSymbolsAlreadyResolved;
      protected boolean typeVarSymbolsAlreadyResolved;
      protected boolean variableSymbolsAlreadyResolved;
      protected boolean functionSymbolsAlreadyResolved;
      public boolean isUnknownSymbolsAlreadyResolved();
      public void setUnknownSymbolsAlreadyResolved(boolean unknownSymbolsAlreadyResolved);
      public boolean isDiagramSymbolsAlreadyResolved();
      public void setDiagramSymbolsAlreadyResolved(boolean diagramSymbolsAlreadyResolved);
      public boolean isTypeSymbolsAlreadyResolved();
      public void setTypeSymbolsAlreadyResolved(boolean typeSymbolsAlreadyResolved);
      public boolean isTypeVarSymbolsAlreadyResolved();
      public void setTypeVarSymbolsAlreadyResolved(boolean typeVarSymbolsAlreadyResolved);
      public boolean isVariableSymbolsAlreadyResolved();
      public void setVariableSymbolsAlreadyResolved(boolean variableSymbolsAlreadyResolved);
      public boolean isFunctionSymbolsAlreadyResolved();
      public void setFunctionSymbolsAlreadyResolved(boolean functionSymbolsAlreadyResolved);
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      protected Optional<de.monticore.symboltable.IScopeSpanningSymbol> spanningSymbol;
      public de.monticore.symboltable.IScopeSpanningSymbol getSpanningSymbol();
      public boolean isPresentSpanningSymbol();
      public void setSpanningSymbol(de.monticore.symboltable.IScopeSpanningSymbol spanningSymbol);
      public void setSpanningSymbolAbsent();
      protected boolean shadowing;
      public boolean isShadowing();
      public void setShadowing(boolean shadowing);
      protected boolean exportingSymbols;
      public boolean isExportingSymbols();
      public void setExportingSymbols(boolean exportingSymbols);
      protected boolean ordered;
      public boolean isOrdered();
      public void setOrdered(boolean ordered);
      protected Optional<String> name;
      public String getName();
      public boolean isPresentName();
      public void setName(String name);
      public void setNameAbsent();
      protected Optional<de.monticore.ast.ASTNode> astNode;
      public de.monticore.ast.ASTNode getAstNode();
      public boolean isPresentAstNode();
      public void setAstNode(de.monticore.ast.ASTNode astNode);
      public void setAstNodeAbsent();
      protected List<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> subScopes;
      public void addSubScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope subScope);
      public void removeSubScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope subScope);
      public List<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> getSubScopes();
      public void setSubScopes(List<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> subScopes);
      public void addSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope);
      public void removeSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope newEnclosingScope);
      public void addSubScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope subScope);
      public void removeSubScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope subScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope newEnclosingScope);
      public void addSubScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope subScope);
      public void removeSubScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope subScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope newEnclosingScope);
      public void addSubScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope subScope);
      public void removeSubScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope subScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope newEnclosingScope);
      public void addSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void removeSubScope(de.monticore.mcbasics._symboltable.IMCBasicsScope subScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope newEnclosingScope);
      public void addSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void removeSubScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope newEnclosingScope);
      public void addSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void removeSubScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope newEnclosingScope);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveDiagramSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveTypeSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveTypeVarSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveVariableSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveFunctionSubKinds(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public interface ISDBasisScope extends de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope, de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope, de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope, de.monticore.umlstereotype._symboltable.IUMLStereotypeScope {
      public abstract List<? extends ISDBasisScope> getSubScopes();
      public void addSubScope(ISDBasisScope subScope);
      public void removeSubScope(ISDBasisScope subScope);
      public abstract ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(ISDBasisScope enclosingScope);
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public int getSymbolsSize();
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SDBasisSymbols2Json implements de.monticore.lang.sdbasis._visitor.SDBasisVisitor2 {
      protected de.monticore.symboltable.serialization.IDeSer<de.monticore.lang.sdbasis._symboltable.ISDBasisScope, de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope, SDBasisSymbols2Json> scopeDeSer;
      protected SDBasisSymbols2Json realThis;
      public SDBasisSymbols2Json getRealThis();
      public void setRealThis(SDBasisSymbols2Json realThis);
      protected de.monticore.symboltable.serialization.JsonPrinter printer;
      public de.monticore.symboltable.serialization.JsonPrinter getJsonPrinter();
      public void setJsonPrinter(de.monticore.symboltable.serialization.JsonPrinter printer);
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public String serialize(de.monticore.lang.sdbasis._symboltable.ISDBasisScope toSerialize);
      public String serialize(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope toSerialize);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope deserialize(String serialized);
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      public SDBasisSymbols2Json();
      public SDBasisSymbols2Json(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser, de.monticore.symboltable.serialization.JsonPrinter printer);
      public void init();
      public String getSerializedString();
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load(java.net.URL url);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load(java.io.Reader reader);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope load(String model);
      public String store(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope scope, String fileName);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisScope node);
      public void visit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
      public void endVisit(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope node);
    }
    public interface ICommonSDBasisSymbol extends de.monticore.symboltable.ISymbol {
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
    }
    public interface ISDBasisGlobalScope extends de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesGlobalScope, de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsGlobalScope, de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisGlobalScope, de.monticore.umlstereotype._symboltable.IUMLStereotypeGlobalScope, de.monticore.lang.sdbasis._symboltable.ISDBasisScope {
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveAdaptedDiagram(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveAdaptedType(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveAdaptedTypeVar(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveAdaptedVariable(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveAdaptedFunction(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> resolveDiagramMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public abstract void loadDiagram(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> resolveTypeMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public abstract void loadType(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> resolveTypeVarMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public abstract void loadTypeVar(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> resolveVariableMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public abstract void loadVariable(String name);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> resolveFunctionMany(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public abstract void loadFunction(String name);
      public abstract void loadFileForModelName(String modelName);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public String getName();
      public boolean isPresentName();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public abstract Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void putSymbolDeSer(String key, de.monticore.symboltable.serialization.ISymbolDeSer value);
      public de.monticore.symboltable.serialization.ISymbolDeSer getSymbolDeSer(String key);
      public void putDiagramSymbolDeSer(String kind);
      public void putTypeSymbolDeSer(String kind);
      public void putTypeVarSymbolDeSer(String kind);
      public void putVariableSymbolDeSer(String kind);
      public void putFunctionSymbolDeSer(String kind);
      public de.monticore.symboltable.serialization.ISymbolDeSer getDiagramSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getTypeSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getTypeVarSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getVariableSymbolDeSer();
      public de.monticore.symboltable.serialization.ISymbolDeSer getFunctionSymbolDeSer();
      public abstract ISDBasisGlobalScope getRealThis();
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public interface ISDBasisArtifactScope extends de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesArtifactScope, de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsArtifactScope, de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisArtifactScope, de.monticore.umlstereotype._symboltable.IUMLStereotypeArtifactScope, de.monticore.lang.sdbasis._symboltable.ISDBasisScope {
      public boolean containsImports(Object element);
      public boolean containsAllImports(Collection<?> collection);
      public boolean isEmptyImports();
      public Iterator<de.monticore.symboltable.ImportStatement> iteratorImports();
      public int sizeImports();
      public de.monticore.symboltable.ImportStatement[] toArrayImports(de.monticore.symboltable.ImportStatement[] array);
      public Object[] toArrayImports();
      public Spliterator<de.monticore.symboltable.ImportStatement> spliteratorImports();
      public Stream<de.monticore.symboltable.ImportStatement> streamImports();
      public Stream<de.monticore.symboltable.ImportStatement> parallelStreamImports();
      public de.monticore.symboltable.ImportStatement getImports(int index);
      public int indexOfImports(Object element);
      public int lastIndexOfImports(Object element);
      public boolean equalsImports(Object o);
      public int hashCodeImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports();
      public ListIterator<de.monticore.symboltable.ImportStatement> listIteratorImports(int index);
      public List<de.monticore.symboltable.ImportStatement> subListImports(int start, int end);
      public void clearImports();
      public boolean addImports(de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public boolean removeImports(Object element);
      public boolean removeAllImports(Collection<?> collection);
      public boolean retainAllImports(Collection<?> collection);
      public boolean removeIfImports(Predicate<? super de.monticore.symboltable.ImportStatement> filter);
      public void forEachImports(Consumer<? super de.monticore.symboltable.ImportStatement> action);
      public void addImports(int index, de.monticore.symboltable.ImportStatement element);
      public boolean addAllImports(int index, Collection<? extends de.monticore.symboltable.ImportStatement> collection);
      public de.monticore.symboltable.ImportStatement removeImports(int index);
      public de.monticore.symboltable.ImportStatement setImports(int index, de.monticore.symboltable.ImportStatement element);
      public void replaceAllImports(UnaryOperator<de.monticore.symboltable.ImportStatement> operator);
      public void sortImports(Comparator<? super de.monticore.symboltable.ImportStatement> comparator);
      public abstract List<de.monticore.symboltable.ImportStatement> getImportsList();
      public abstract void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public Optional<de.monticore.symboltable.ISymbol> getTopLevelSymbol();
      public boolean checkIfContinueAsSubScope(String symbolName);
      public List<String> getRemainingNameForResolveDown(String symbolName);
      public String getFullName();
      public List<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> continueDiagramWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> continueTypeWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> continueTypeVarWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> continueVariableWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> predicate);
      public List<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> continueFunctionWithEnclosingScope(boolean foundSymbols, String name, de.monticore.symboltable.modifiers.AccessModifier modifier, java.util.function.Predicate<de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol> predicate);
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public abstract void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public abstract void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public abstract void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public abstract void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public abstract void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public abstract void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public abstract void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public abstract void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SDBasisScopesGenitorDelegator {
      public SDBasisScopesGenitorDelegator();
      protected Deque<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> scopeStack;
      protected final SDBasisScopesGenitor symbolTable;
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope globalScope;
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope createFromAST(de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode);
    }
    public class SDBasisArtifactScope extends de.monticore.lang.sdbasis._symboltable.SDBasisScope implements de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope {
      public SDBasisArtifactScope(String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public SDBasisArtifactScope(Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> enclosingScope, String packageName, List<de.monticore.symboltable.ImportStatement> imports);
      public SDBasisArtifactScope();
      protected String packageName;
      public String getPackageName();
      public void setPackageName(String packageName);
      protected List<de.monticore.symboltable.ImportStatement> imports;
      public List<de.monticore.symboltable.ImportStatement> getImportsList();
      public void setImportsList(List<de.monticore.symboltable.ImportStatement> imports);
      public boolean isPresentName();
      public String getName();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SDBasisDeSer implements de.monticore.symboltable.serialization.IDeSer<de.monticore.lang.sdbasis._symboltable.ISDBasisScope, de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope, de.monticore.lang.sdbasis._symboltable.SDBasisSymbols2Json> {
      public String serialize(de.monticore.lang.sdbasis._symboltable.ISDBasisScope toSerialize, de.monticore.lang.sdbasis._symboltable.SDBasisSymbols2Json s2j);
      public String serialize(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope toSerialize, de.monticore.lang.sdbasis._symboltable.SDBasisSymbols2Json s2j);
      public void serializeAddons(de.monticore.lang.sdbasis._symboltable.ISDBasisScope toSerialize, de.monticore.lang.sdbasis._symboltable.SDBasisSymbols2Json s2j);
      public void serializeAddons(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope toSerialize, de.monticore.lang.sdbasis._symboltable.SDBasisSymbols2Json s2j);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope deserializeScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope deserializeArtifactScope(de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      protected void deserializeSymbols(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
      public void deserializeAddons(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope scope, de.monticore.symboltable.serialization.json.JsonObject scopeJson);
    }
    public class SDBasisGlobalScope extends de.monticore.lang.sdbasis._symboltable.SDBasisScope implements de.monticore.lang.sdbasis._symboltable.ISDBasisGlobalScope {
      public SDBasisGlobalScope(de.monticore.io.paths.MCPath symbolPath, String fileExt);
      public SDBasisGlobalScope();
      protected de.monticore.io.paths.MCPath symbolPath;
      public de.monticore.io.paths.MCPath getSymbolPath();
      public void setSymbolPath(de.monticore.io.paths.MCPath symbolPath);
      protected String fileExt;
      public String getFileExt();
      public void setFileExt(String fileExt);
      public de.monticore.symboltable.serialization.IDeSer deSer;
      public de.monticore.symboltable.serialization.IDeSer getDeSer();
      public void setDeSer(de.monticore.symboltable.serialization.IDeSer deSer);
      protected Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers;
      public Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> getSymbolDeSers();
      public void setSymbolDeSers(Map<String,de.monticore.symboltable.serialization.ISymbolDeSer> symbolDeSers);
      protected SDBasisSymbols2Json symbols2Json;
      public void setSymbols2Json(SDBasisSymbols2Json symbols2Json);
      public SDBasisSymbols2Json getSymbols2Json();
      protected Set<String> cache;
      public void addLoadedFile(String name);
      public void clearLoadedFiles();
      public boolean isFileLoaded(String name);
      public void init();
      protected List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> adaptedDiagramSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> adaptedTypeSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> adaptedTypeVarSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> adaptedVariableSymbolResolver;
      protected List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> adaptedFunctionSymbolResolver;
      public List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> getAdaptedDiagramSymbolResolverList();
      public void setAdaptedDiagramSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IDiagramSymbolResolver> adaptedDiagramSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> getAdaptedTypeSymbolResolverList();
      public void setAdaptedTypeSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.ITypeSymbolResolver> adaptedTypeSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> getAdaptedTypeVarSymbolResolverList();
      public void setAdaptedTypeVarSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.ITypeVarSymbolResolver> adaptedTypeVarSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> getAdaptedVariableSymbolResolverList();
      public void setAdaptedVariableSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IVariableSymbolResolver> adaptedVariableSymbolResolver);
      public List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> getAdaptedFunctionSymbolResolverList();
      public void setAdaptedFunctionSymbolResolverList(List<de.monticore.symbols.basicsymbols._symboltable.IFunctionSymbolResolver> adaptedFunctionSymbolResolver);
      public void loadDiagram(String name);
      public void loadType(String name);
      public void loadTypeVar(String name);
      public void loadVariable(String name);
      public void loadFunction(String name);
      public void loadFileForModelName(String modelName);
      public SDBasisGlobalScope getRealThis();
      public void clear();
      public void putDiagramSymbolDeSer(String kind);
      public void putTypeSymbolDeSer(String kind);
      public void putTypeVarSymbolDeSer(String kind);
      public void putVariableSymbolDeSer(String kind);
      public void putFunctionSymbolDeSer(String kind);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
    }
    public class SDBasisScopesGenitor implements de.monticore.lang.sdbasis._visitor.SDBasisVisitor2, de.monticore.lang.sdbasis._visitor.SDBasisHandler {
      public SDBasisScopesGenitor();
      protected Deque<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> scopeStack;
      protected de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser;
      public de.monticore.lang.sdbasis._visitor.SDBasisTraverser getTraverser();
      public void setTraverser(de.monticore.lang.sdbasis._visitor.SDBasisTraverser traverser);
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope firstCreatedScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getFirstCreatedScope();
      public de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope createFromAST(de.monticore.lang.sdbasis._ast.ASTSDArtifact rootNode);
      public void putOnStack(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope);
      public final Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> getCurrentScope();
      public final Optional<de.monticore.lang.sdbasis._symboltable.ISDBasisScope> removeCurrentScope();
      public void setScopeStack(Deque<? extends de.monticore.lang.sdbasis._symboltable.ISDBasisScope> scopeStack);
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope createScope(boolean shadowing);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDObject node);
      protected void initDiagramHP1(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      protected void initDiagramHP2(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      protected void initVariableHP1(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      protected void initVariableHP2(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDArtifact node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDCompleteModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDFreeModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDInitialModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDVisibleModifier node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectSource node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDObjectTarget node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDSendMessage node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDActivityBar node);
      public void visit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      public void endVisit(de.monticore.lang.sdbasis._ast.ASTSDBody node);
      protected void initScopeHP1(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope);
      protected void initScopeHP2(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope);
      protected void initArtifactScopeHP1(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope scope);
      protected void initArtifactScopeHP2(de.monticore.lang.sdbasis._symboltable.ISDBasisArtifactScope scope);
      public void addToScopeStack(de.monticore.lang.sdbasis._symboltable.ISDBasisScope scope);
    }
  }

  package de.monticore.lang.sdbasis._ast {
    <<startProd>> public class ASTSDArtifact extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDArtifact();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDArtifact deepClone();
      public ASTSDArtifact deepClone(ASTSDArtifact result);
      <<astType="">> protected Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> packageDeclaration;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> mCImportStatements;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSequenceDiagram sequenceDiagram;
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName getPackageDeclaration();
      public boolean isPresentPackageDeclaration();
      public boolean containsMCImportStatement(Object element);
      public boolean containsAllMCImportStatements(Collection<?> collection);
      public boolean isEmptyMCImportStatements();
      public Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iteratorMCImportStatements();
      public int sizeMCImportStatements();
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement[] toArrayMCImportStatements(de.monticore.types.mcbasictypes._ast.ASTMCImportStatement[] array);
      public Object[] toArrayMCImportStatements();
      public Spliterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> spliteratorMCImportStatements();
      public Stream<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> streamMCImportStatements();
      public Stream<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> parallelStreamMCImportStatements();
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement getMCImportStatement(int index);
      public int indexOfMCImportStatement(Object element);
      public int lastIndexOfMCImportStatement(Object element);
      public boolean equalsMCImportStatements(Object o);
      public int hashCodeMCImportStatements();
      public ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> listIteratorMCImportStatements();
      public ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> listIteratorMCImportStatements(int index);
      public List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> subListMCImportStatements(int start, int end);
      public List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> getMCImportStatementList();
      public de.monticore.lang.sdbasis._ast.ASTSequenceDiagram getSequenceDiagram();
      public void setPackageDeclaration(de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName packageDeclaration);
      public void setPackageDeclarationAbsent();
      public void clearMCImportStatements();
      public boolean addMCImportStatement(de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public boolean addAllMCImportStatements(Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> collection);
      public boolean removeMCImportStatement(Object element);
      public boolean removeAllMCImportStatements(Collection<?> collection);
      public boolean retainAllMCImportStatements(Collection<?> collection);
      public boolean removeIfMCImportStatement(Predicate<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> filter);
      public void forEachMCImportStatements(Consumer<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> action);
      public void addMCImportStatement(int index, de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public boolean addAllMCImportStatements(int index, Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> collection);
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement removeMCImportStatement(int index);
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement setMCImportStatement(int index, de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public void replaceAllMCImportStatements(UnaryOperator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> operator);
      public void sortMCImportStatements(Comparator<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> comparator);
      public void setMCImportStatementList(List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> mCImportStatements);
      public void setSequenceDiagram(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram sequenceDiagram);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDArtifact _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    <<inheritedSymbol="de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol">> public class ASTSequenceDiagram extends ASTCNode implements de.monticore.symbols.basicsymbols._ast.ASTDiagram, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSequenceDiagram();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSequenceDiagram deepClone();
      public ASTSequenceDiagram deepClone(ASTSequenceDiagram result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.umlstereotype._ast.ASTStereotype> stereotype;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDObject> sDObjects;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDBody sDBody;
      <<derived_attribute_name="">> protected String name;
      public de.monticore.umlstereotype._ast.ASTStereotype getStereotype();
      public boolean isPresentStereotype();
      public boolean containsSDModifier(Object element);
      public boolean containsAllSDModifiers(Collection<?> collection);
      public boolean isEmptySDModifiers();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iteratorSDModifiers();
      public int sizeSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier[] toArraySDModifiers(de.monticore.lang.sdbasis._ast.ASTSDModifier[] array);
      public Object[] toArraySDModifiers();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> spliteratorSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> streamSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> parallelStreamSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier getSDModifier(int index);
      public int indexOfSDModifier(Object element);
      public int lastIndexOfSDModifier(Object element);
      public boolean equalsSDModifiers(Object o);
      public int hashCodeSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> subListSDModifiers(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> getSDModifierList();
      public boolean containsSDObject(Object element);
      public boolean containsAllSDObjects(Collection<?> collection);
      public boolean isEmptySDObjects();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDObject> iteratorSDObjects();
      public int sizeSDObjects();
      public de.monticore.lang.sdbasis._ast.ASTSDObject[] toArraySDObjects(de.monticore.lang.sdbasis._ast.ASTSDObject[] array);
      public Object[] toArraySDObjects();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDObject> spliteratorSDObjects();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDObject> streamSDObjects();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDObject> parallelStreamSDObjects();
      public de.monticore.lang.sdbasis._ast.ASTSDObject getSDObject(int index);
      public int indexOfSDObject(Object element);
      public int lastIndexOfSDObject(Object element);
      public boolean equalsSDObjects(Object o);
      public int hashCodeSDObjects();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDObject> listIteratorSDObjects();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDObject> listIteratorSDObjects(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDObject> subListSDObjects(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDObject> getSDObjectList();
      public de.monticore.lang.sdbasis._ast.ASTSDBody getSDBody();
      public String getName();
      public void setStereotype(de.monticore.umlstereotype._ast.ASTStereotype stereotype);
      public void setStereotypeAbsent();
      public void clearSDModifiers();
      public boolean addSDModifier(de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public boolean addAllSDModifiers(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public boolean removeSDModifier(Object element);
      public boolean removeAllSDModifiers(Collection<?> collection);
      public boolean retainAllSDModifiers(Collection<?> collection);
      public boolean removeIfSDModifier(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> filter);
      public void forEachSDModifiers(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> action);
      public void addSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public boolean addAllSDModifiers(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier removeSDModifier(int index);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier setSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public void replaceAllSDModifiers(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDModifier> operator);
      public void sortSDModifiers(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> comparator);
      public void setSDModifierList(List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers);
      public void clearSDObjects();
      public boolean addSDObject(de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public boolean addAllSDObjects(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDObject> collection);
      public boolean removeSDObject(Object element);
      public boolean removeAllSDObjects(Collection<?> collection);
      public boolean retainAllSDObjects(Collection<?> collection);
      public boolean removeIfSDObject(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDObject> filter);
      public void forEachSDObjects(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDObject> action);
      public void addSDObject(int index, de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public boolean addAllSDObjects(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDObject> collection);
      public de.monticore.lang.sdbasis._ast.ASTSDObject removeSDObject(int index);
      public de.monticore.lang.sdbasis._ast.ASTSDObject setSDObject(int index, de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public void replaceAllSDObjects(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDObject> operator);
      public void sortSDObjects(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDObject> comparator);
      public void setSDObjectList(List<de.monticore.lang.sdbasis._ast.ASTSDObject> sDObjects);
      public void setSDBody(de.monticore.lang.sdbasis._ast.ASTSDBody sDBody);
      public void setName(String name);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSequenceDiagram _construct();
      protected Optional<de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol> symbol;
      public de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol getSymbol();
      public boolean isPresentSymbol();
      public void setSymbol(de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol);
      public void setSymbolAbsent();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    <<scope>> public class ASTSDBody extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDBody();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDBody deepClone();
      public ASTSDBody deepClone(ASTSDBody result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements;
      public boolean containsSDElement(Object element);
      public boolean containsAllSDElements(Collection<?> collection);
      public boolean isEmptySDElements();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iteratorSDElements();
      public int sizeSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement[] toArraySDElements(de.monticore.lang.sdbasis._ast.ASTSDElement[] array);
      public Object[] toArraySDElements();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDElement> spliteratorSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> streamSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> parallelStreamSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement getSDElement(int index);
      public int indexOfSDElement(Object element);
      public int lastIndexOfSDElement(Object element);
      public boolean equalsSDElements(Object o);
      public int hashCodeSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> subListSDElements(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> getSDElementList();
      public void clearSDElements();
      public boolean addSDElement(de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public boolean addAllSDElements(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public boolean removeSDElement(Object element);
      public boolean removeAllSDElements(Collection<?> collection);
      public boolean retainAllSDElements(Collection<?> collection);
      public boolean removeIfSDElement(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDElement> filter);
      public void forEachSDElements(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDElement> action);
      public void addSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public boolean addAllSDElements(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public de.monticore.lang.sdbasis._ast.ASTSDElement removeSDElement(int index);
      public de.monticore.lang.sdbasis._ast.ASTSDElement setSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public void replaceAllSDElements(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDElement> operator);
      public void sortSDElements(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDElement> comparator);
      public void setSDElementList(List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDBody _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope spannedScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getSpannedScope();
      public void setSpannedScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope spannedScope);
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDCompleteModifier extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDModifier, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDCompleteModifier();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDCompleteModifier deepClone();
      public ASTSDCompleteModifier deepClone(ASTSDCompleteModifier result);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDCompleteModifier _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDFreeModifier extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDModifier, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDFreeModifier();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDFreeModifier deepClone();
      public ASTSDFreeModifier deepClone(ASTSDFreeModifier result);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDFreeModifier _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDInitialModifier extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDModifier, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDInitialModifier();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDInitialModifier deepClone();
      public ASTSDInitialModifier deepClone(ASTSDInitialModifier result);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDInitialModifier _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDVisibleModifier extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDModifier, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDVisibleModifier();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDVisibleModifier deepClone();
      public ASTSDVisibleModifier deepClone(ASTSDVisibleModifier result);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDVisibleModifier _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    <<inheritedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> public class ASTSDObject extends ASTCNode implements de.monticore.symbols.basicsymbols._ast.ASTVariable, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDObject();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDObject deepClone();
      public ASTSDObject deepClone(ASTSDObject result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.umlstereotype._ast.ASTStereotype> stereotype;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> mCObjectType;
      <<derived_attribute_name="">> protected String name;
      public de.monticore.umlstereotype._ast.ASTStereotype getStereotype();
      public boolean isPresentStereotype();
      public boolean containsSDModifier(Object element);
      public boolean containsAllSDModifiers(Collection<?> collection);
      public boolean isEmptySDModifiers();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iteratorSDModifiers();
      public int sizeSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier[] toArraySDModifiers(de.monticore.lang.sdbasis._ast.ASTSDModifier[] array);
      public Object[] toArraySDModifiers();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> spliteratorSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> streamSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> parallelStreamSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier getSDModifier(int index);
      public int indexOfSDModifier(Object element);
      public int lastIndexOfSDModifier(Object element);
      public boolean equalsSDModifiers(Object o);
      public int hashCodeSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> subListSDModifiers(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> getSDModifierList();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public boolean isPresentMCObjectType();
      public String getName();
      public void setStereotype(de.monticore.umlstereotype._ast.ASTStereotype stereotype);
      public void setStereotypeAbsent();
      public void clearSDModifiers();
      public boolean addSDModifier(de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public boolean addAllSDModifiers(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public boolean removeSDModifier(Object element);
      public boolean removeAllSDModifiers(Collection<?> collection);
      public boolean retainAllSDModifiers(Collection<?> collection);
      public boolean removeIfSDModifier(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> filter);
      public void forEachSDModifiers(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> action);
      public void addSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public boolean addAllSDModifiers(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier removeSDModifier(int index);
      public de.monticore.lang.sdbasis._ast.ASTSDModifier setSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public void replaceAllSDModifiers(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDModifier> operator);
      public void sortSDModifiers(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> comparator);
      public void setSDModifierList(List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers);
      public void setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public void setMCObjectTypeAbsent();
      public void setName(String name);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDObject _construct();
      protected Optional<de.monticore.symbols.basicsymbols._symboltable.VariableSymbol> symbol;
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getSymbol();
      public boolean isPresentSymbol();
      public void setSymbol(de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol);
      public void setSymbolAbsent();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDObjectSource extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDSource, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDObjectSource();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDObjectSource deepClone();
      public ASTSDObjectSource deepClone(ASTSDObjectSource result);
      <<derived_attribute_name="", referencedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> protected String name;
      public String getName();
      public void setName(String name);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDObjectSource _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getNameSymbol();
      public boolean isPresentNameSymbol();
      protected void updateNameSymbol();
      <<referencedSymbolAttribute>> protected de.monticore.symbols.basicsymbols._symboltable.VariableSymbol nameSymbol;
      public de.monticore.symbols.basicsymbols._ast.ASTVariable getNameDefinition();
      public boolean isPresentNameDefinition();
    }
    public class ASTSDObjectTarget extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDTarget, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDObjectTarget();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDObjectTarget deepClone();
      public ASTSDObjectTarget deepClone(ASTSDObjectTarget result);
      <<derived_attribute_name="", referencedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> protected String name;
      public String getName();
      public void setName(String name);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDObjectTarget _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
      public de.monticore.symbols.basicsymbols._symboltable.VariableSymbol getNameSymbol();
      public boolean isPresentNameSymbol();
      protected void updateNameSymbol();
      <<referencedSymbolAttribute>> protected de.monticore.symbols.basicsymbols._symboltable.VariableSymbol nameSymbol;
      public de.monticore.symbols.basicsymbols._ast.ASTVariable getNameDefinition();
      public boolean isPresentNameDefinition();
    }
    public class ASTSDSendMessage extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDInteraction, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDSendMessage();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDSendMessage deepClone();
      public ASTSDSendMessage deepClone(ASTSDSendMessage result);
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> sDTarget;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDAction sDAction;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> sDActivityBar;
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.lang.sdbasis._ast.ASTSDTarget getSDTarget();
      public boolean isPresentSDTarget();
      public de.monticore.lang.sdbasis._ast.ASTSDAction getSDAction();
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar getSDActivityBar();
      public boolean isPresentSDActivityBar();
      public void setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public void setSDSourceAbsent();
      public void setSDTarget(de.monticore.lang.sdbasis._ast.ASTSDTarget sDTarget);
      public void setSDTargetAbsent();
      public void setSDAction(de.monticore.lang.sdbasis._ast.ASTSDAction sDAction);
      public void setSDActivityBar(de.monticore.lang.sdbasis._ast.ASTSDActivityBar sDActivityBar);
      public void setSDActivityBarAbsent();
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDSendMessage _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDActivityBar extends ASTCNode implements de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      protected ASTSDActivityBar();
      public boolean deepEquals(Object o);
      public boolean deepEquals(Object o, boolean forceSameOrder);
      public boolean deepEqualsWithComments(Object o);
      public boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public boolean equalAttributes(Object o);
      public boolean equalsWithComments(Object o);
      public ASTSDActivityBar deepClone();
      public ASTSDActivityBar deepClone(ASTSDActivityBar result);
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements;
      public boolean containsSDElement(Object element);
      public boolean containsAllSDElements(Collection<?> collection);
      public boolean isEmptySDElements();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iteratorSDElements();
      public int sizeSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement[] toArraySDElements(de.monticore.lang.sdbasis._ast.ASTSDElement[] array);
      public Object[] toArraySDElements();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDElement> spliteratorSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> streamSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> parallelStreamSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement getSDElement(int index);
      public int indexOfSDElement(Object element);
      public int lastIndexOfSDElement(Object element);
      public boolean equalsSDElements(Object o);
      public int hashCodeSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> subListSDElements(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> getSDElementList();
      public void clearSDElements();
      public boolean addSDElement(de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public boolean addAllSDElements(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public boolean removeSDElement(Object element);
      public boolean removeAllSDElements(Collection<?> collection);
      public boolean retainAllSDElements(Collection<?> collection);
      public boolean removeIfSDElement(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDElement> filter);
      public void forEachSDElements(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDElement> action);
      public void addSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public boolean addAllSDElements(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public de.monticore.lang.sdbasis._ast.ASTSDElement removeSDElement(int index);
      public de.monticore.lang.sdbasis._ast.ASTSDElement setSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public void replaceAllSDElements(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDElement> operator);
      public void sortSDElements(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDElement> comparator);
      public void setSDElementList(List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements);
      public void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
      public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor);
      public void accept(de.monticore.symbols.basicsymbols._visitor.BasicSymbolsTraverser visitor);
      public void accept(de.monticore.expressions.expressionsbasis._visitor.ExpressionsBasisTraverser visitor);
      public void accept(de.monticore.umlstereotype._visitor.UMLStereotypeTraverser visitor);
      public void accept(de.monticore.mcbasics._visitor.MCBasicsTraverser visitor);
      public void accept(de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor);
      public void accept(de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor);
      public void accept(de.monticore.visitor.ITraverser visitor);
      protected ASTSDActivityBar _construct();
      protected de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope;
      public de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public class ASTSDArtifactBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDArtifactBuilder> {
      protected ASTSDArtifactBuilder realBuilder;
      <<astType="">> protected Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> packageDeclaration;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> mCImportStatements;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSequenceDiagram sequenceDiagram;
      public ASTSDArtifactBuilder();
      public ASTSDArtifact build();
      public boolean isValid();
      public de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName getPackageDeclaration();
      public boolean isPresentPackageDeclaration();
      public boolean containsMCImportStatement(Object element);
      public boolean containsAllMCImportStatements(Collection<?> collection);
      public boolean isEmptyMCImportStatements();
      public Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iteratorMCImportStatements();
      public int sizeMCImportStatements();
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement[] toArrayMCImportStatements(de.monticore.types.mcbasictypes._ast.ASTMCImportStatement[] array);
      public Object[] toArrayMCImportStatements();
      public Spliterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> spliteratorMCImportStatements();
      public Stream<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> streamMCImportStatements();
      public Stream<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> parallelStreamMCImportStatements();
      public de.monticore.types.mcbasictypes._ast.ASTMCImportStatement getMCImportStatement(int index);
      public int indexOfMCImportStatement(Object element);
      public int lastIndexOfMCImportStatement(Object element);
      public boolean equalsMCImportStatements(Object o);
      public int hashCodeMCImportStatements();
      public ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> listIteratorMCImportStatements();
      public ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> listIteratorMCImportStatements(int index);
      public List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> subListMCImportStatements(int start, int end);
      public List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> getMCImportStatementList();
      public de.monticore.lang.sdbasis._ast.ASTSequenceDiagram getSequenceDiagram();
      public ASTSDArtifactBuilder setPackageDeclaration(de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName packageDeclaration);
      public ASTSDArtifactBuilder setPackageDeclarationAbsent();
      public ASTSDArtifactBuilder clearMCImportStatements();
      public ASTSDArtifactBuilder addMCImportStatement(de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public ASTSDArtifactBuilder addAllMCImportStatements(Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> collection);
      public ASTSDArtifactBuilder removeMCImportStatement(Object element);
      public ASTSDArtifactBuilder removeAllMCImportStatements(Collection<?> collection);
      public ASTSDArtifactBuilder retainAllMCImportStatements(Collection<?> collection);
      public ASTSDArtifactBuilder removeIfMCImportStatement(Predicate<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> filter);
      public ASTSDArtifactBuilder forEachMCImportStatements(Consumer<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> action);
      public ASTSDArtifactBuilder addMCImportStatement(int index, de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public ASTSDArtifactBuilder addAllMCImportStatements(int index, Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> collection);
      public ASTSDArtifactBuilder removeMCImportStatement(int index);
      public ASTSDArtifactBuilder setMCImportStatement(int index, de.monticore.types.mcbasictypes._ast.ASTMCImportStatement element);
      public ASTSDArtifactBuilder replaceAllMCImportStatements(UnaryOperator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> operator);
      public ASTSDArtifactBuilder sortMCImportStatements(Comparator<? super de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> comparator);
      public ASTSDArtifactBuilder setMCImportStatementsList(List<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> mCImportStatements);
      public ASTSDArtifactBuilder setSequenceDiagram(de.monticore.lang.sdbasis._ast.ASTSequenceDiagram sequenceDiagram);
      public ASTSDArtifactBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDArtifactBuilder set_SourcePositionEndAbsent();
      public ASTSDArtifactBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDArtifactBuilder set_SourcePositionStartAbsent();
      public ASTSDArtifactBuilder clear_PreComments();
      public ASTSDArtifactBuilder add_PreComment(Comment precomment);
      public ASTSDArtifactBuilder add_PreComment(int index, Comment precomment);
      public ASTSDArtifactBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDArtifactBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDArtifactBuilder remove_PreComment(Object element);
      public ASTSDArtifactBuilder remove_PreComment(int index);
      public ASTSDArtifactBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDArtifactBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDArtifactBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDArtifactBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDArtifactBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDArtifactBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDArtifactBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDArtifactBuilder set_PreComment(int index, Comment precomment);
      public ASTSDArtifactBuilder clear_PostComments();
      public ASTSDArtifactBuilder add_PostComment(Comment postcomment);
      public ASTSDArtifactBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDArtifactBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDArtifactBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDArtifactBuilder remove_PostComment(Object element);
      public ASTSDArtifactBuilder remove_PostComment(int index);
      public ASTSDArtifactBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDArtifactBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDArtifactBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDArtifactBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDArtifactBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDArtifactBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDArtifactBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDArtifactBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDArtifact uncheckedBuild();
    }
    public class ASTSequenceDiagramBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSequenceDiagramBuilder> {
      protected ASTSequenceDiagramBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.umlstereotype._ast.ASTStereotype> stereotype;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDObject> sDObjects;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDBody sDBody;
      <<derived_attribute_name="">> protected String name;
      public ASTSequenceDiagramBuilder();
      public ASTSequenceDiagram build();
      public boolean isValid();
      public de.monticore.umlstereotype._ast.ASTStereotype getStereotype();
      public boolean isPresentStereotype();
      public boolean containsSDModifier(Object element);
      public boolean containsAllSDModifiers(Collection<?> collection);
      public boolean isEmptySDModifiers();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iteratorSDModifiers();
      public int sizeSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier[] toArraySDModifiers(de.monticore.lang.sdbasis._ast.ASTSDModifier[] array);
      public Object[] toArraySDModifiers();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> spliteratorSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> streamSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> parallelStreamSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier getSDModifier(int index);
      public int indexOfSDModifier(Object element);
      public int lastIndexOfSDModifier(Object element);
      public boolean equalsSDModifiers(Object o);
      public int hashCodeSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> subListSDModifiers(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> getSDModifierList();
      public boolean containsSDObject(Object element);
      public boolean containsAllSDObjects(Collection<?> collection);
      public boolean isEmptySDObjects();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDObject> iteratorSDObjects();
      public int sizeSDObjects();
      public de.monticore.lang.sdbasis._ast.ASTSDObject[] toArraySDObjects(de.monticore.lang.sdbasis._ast.ASTSDObject[] array);
      public Object[] toArraySDObjects();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDObject> spliteratorSDObjects();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDObject> streamSDObjects();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDObject> parallelStreamSDObjects();
      public de.monticore.lang.sdbasis._ast.ASTSDObject getSDObject(int index);
      public int indexOfSDObject(Object element);
      public int lastIndexOfSDObject(Object element);
      public boolean equalsSDObjects(Object o);
      public int hashCodeSDObjects();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDObject> listIteratorSDObjects();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDObject> listIteratorSDObjects(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDObject> subListSDObjects(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDObject> getSDObjectList();
      public de.monticore.lang.sdbasis._ast.ASTSDBody getSDBody();
      public String getName();
      public ASTSequenceDiagramBuilder setStereotype(de.monticore.umlstereotype._ast.ASTStereotype stereotype);
      public ASTSequenceDiagramBuilder setStereotypeAbsent();
      public ASTSequenceDiagramBuilder clearSDModifiers();
      public ASTSequenceDiagramBuilder addSDModifier(de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSequenceDiagramBuilder addAllSDModifiers(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public ASTSequenceDiagramBuilder removeSDModifier(Object element);
      public ASTSequenceDiagramBuilder removeAllSDModifiers(Collection<?> collection);
      public ASTSequenceDiagramBuilder retainAllSDModifiers(Collection<?> collection);
      public ASTSequenceDiagramBuilder removeIfSDModifier(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> filter);
      public ASTSequenceDiagramBuilder forEachSDModifiers(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> action);
      public ASTSequenceDiagramBuilder addSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSequenceDiagramBuilder addAllSDModifiers(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public ASTSequenceDiagramBuilder removeSDModifier(int index);
      public ASTSequenceDiagramBuilder setSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSequenceDiagramBuilder replaceAllSDModifiers(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDModifier> operator);
      public ASTSequenceDiagramBuilder sortSDModifiers(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> comparator);
      public ASTSequenceDiagramBuilder setSDModifiersList(List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers);
      public ASTSequenceDiagramBuilder clearSDObjects();
      public ASTSequenceDiagramBuilder addSDObject(de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public ASTSequenceDiagramBuilder addAllSDObjects(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDObject> collection);
      public ASTSequenceDiagramBuilder removeSDObject(Object element);
      public ASTSequenceDiagramBuilder removeAllSDObjects(Collection<?> collection);
      public ASTSequenceDiagramBuilder retainAllSDObjects(Collection<?> collection);
      public ASTSequenceDiagramBuilder removeIfSDObject(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDObject> filter);
      public ASTSequenceDiagramBuilder forEachSDObjects(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDObject> action);
      public ASTSequenceDiagramBuilder addSDObject(int index, de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public ASTSequenceDiagramBuilder addAllSDObjects(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDObject> collection);
      public ASTSequenceDiagramBuilder removeSDObject(int index);
      public ASTSequenceDiagramBuilder setSDObject(int index, de.monticore.lang.sdbasis._ast.ASTSDObject element);
      public ASTSequenceDiagramBuilder replaceAllSDObjects(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDObject> operator);
      public ASTSequenceDiagramBuilder sortSDObjects(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDObject> comparator);
      public ASTSequenceDiagramBuilder setSDObjectsList(List<de.monticore.lang.sdbasis._ast.ASTSDObject> sDObjects);
      public ASTSequenceDiagramBuilder setSDBody(de.monticore.lang.sdbasis._ast.ASTSDBody sDBody);
      public ASTSequenceDiagramBuilder setName(String name);
      public ASTSequenceDiagramBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSequenceDiagramBuilder set_SourcePositionEndAbsent();
      public ASTSequenceDiagramBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSequenceDiagramBuilder set_SourcePositionStartAbsent();
      public ASTSequenceDiagramBuilder clear_PreComments();
      public ASTSequenceDiagramBuilder add_PreComment(Comment precomment);
      public ASTSequenceDiagramBuilder add_PreComment(int index, Comment precomment);
      public ASTSequenceDiagramBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSequenceDiagramBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSequenceDiagramBuilder remove_PreComment(Object element);
      public ASTSequenceDiagramBuilder remove_PreComment(int index);
      public ASTSequenceDiagramBuilder removeAll_PreComments(Collection<?> element);
      public ASTSequenceDiagramBuilder retainAll_PreComments(Collection<?> element);
      public ASTSequenceDiagramBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSequenceDiagramBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSequenceDiagramBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSequenceDiagramBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSequenceDiagramBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSequenceDiagramBuilder set_PreComment(int index, Comment precomment);
      public ASTSequenceDiagramBuilder clear_PostComments();
      public ASTSequenceDiagramBuilder add_PostComment(Comment postcomment);
      public ASTSequenceDiagramBuilder add_PostComment(int index, Comment postcomment);
      public ASTSequenceDiagramBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSequenceDiagramBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSequenceDiagramBuilder remove_PostComment(Object element);
      public ASTSequenceDiagramBuilder remove_PostComment(int index);
      public ASTSequenceDiagramBuilder removeAll_PostComments(Collection<?> element);
      public ASTSequenceDiagramBuilder retainAll_PostComments(Collection<?> element);
      public ASTSequenceDiagramBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSequenceDiagramBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSequenceDiagramBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSequenceDiagramBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSequenceDiagramBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSequenceDiagramBuilder set_PostComment(int index, Comment postcomment);
      public ASTSequenceDiagram uncheckedBuild();
    }
    public class ASTSDBodyBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDBodyBuilder> {
      protected ASTSDBodyBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements;
      public ASTSDBodyBuilder();
      public ASTSDBody build();
      public boolean isValid();
      public boolean containsSDElement(Object element);
      public boolean containsAllSDElements(Collection<?> collection);
      public boolean isEmptySDElements();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iteratorSDElements();
      public int sizeSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement[] toArraySDElements(de.monticore.lang.sdbasis._ast.ASTSDElement[] array);
      public Object[] toArraySDElements();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDElement> spliteratorSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> streamSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> parallelStreamSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement getSDElement(int index);
      public int indexOfSDElement(Object element);
      public int lastIndexOfSDElement(Object element);
      public boolean equalsSDElements(Object o);
      public int hashCodeSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> subListSDElements(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> getSDElementList();
      public ASTSDBodyBuilder clearSDElements();
      public ASTSDBodyBuilder addSDElement(de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDBodyBuilder addAllSDElements(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public ASTSDBodyBuilder removeSDElement(Object element);
      public ASTSDBodyBuilder removeAllSDElements(Collection<?> collection);
      public ASTSDBodyBuilder retainAllSDElements(Collection<?> collection);
      public ASTSDBodyBuilder removeIfSDElement(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDElement> filter);
      public ASTSDBodyBuilder forEachSDElements(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDElement> action);
      public ASTSDBodyBuilder addSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDBodyBuilder addAllSDElements(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public ASTSDBodyBuilder removeSDElement(int index);
      public ASTSDBodyBuilder setSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDBodyBuilder replaceAllSDElements(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDElement> operator);
      public ASTSDBodyBuilder sortSDElements(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDElement> comparator);
      public ASTSDBodyBuilder setSDElementsList(List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements);
      public ASTSDBodyBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDBodyBuilder set_SourcePositionEndAbsent();
      public ASTSDBodyBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDBodyBuilder set_SourcePositionStartAbsent();
      public ASTSDBodyBuilder clear_PreComments();
      public ASTSDBodyBuilder add_PreComment(Comment precomment);
      public ASTSDBodyBuilder add_PreComment(int index, Comment precomment);
      public ASTSDBodyBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDBodyBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDBodyBuilder remove_PreComment(Object element);
      public ASTSDBodyBuilder remove_PreComment(int index);
      public ASTSDBodyBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDBodyBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDBodyBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDBodyBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDBodyBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDBodyBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDBodyBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDBodyBuilder set_PreComment(int index, Comment precomment);
      public ASTSDBodyBuilder clear_PostComments();
      public ASTSDBodyBuilder add_PostComment(Comment postcomment);
      public ASTSDBodyBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDBodyBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDBodyBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDBodyBuilder remove_PostComment(Object element);
      public ASTSDBodyBuilder remove_PostComment(int index);
      public ASTSDBodyBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDBodyBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDBodyBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDBodyBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDBodyBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDBodyBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDBodyBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDBodyBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDBody uncheckedBuild();
    }
    public class ASTSDCompleteModifierBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDCompleteModifierBuilder> {
      protected ASTSDCompleteModifierBuilder realBuilder;
      public ASTSDCompleteModifierBuilder();
      public ASTSDCompleteModifier build();
      public boolean isValid();
      public ASTSDCompleteModifierBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDCompleteModifierBuilder set_SourcePositionEndAbsent();
      public ASTSDCompleteModifierBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDCompleteModifierBuilder set_SourcePositionStartAbsent();
      public ASTSDCompleteModifierBuilder clear_PreComments();
      public ASTSDCompleteModifierBuilder add_PreComment(Comment precomment);
      public ASTSDCompleteModifierBuilder add_PreComment(int index, Comment precomment);
      public ASTSDCompleteModifierBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDCompleteModifierBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDCompleteModifierBuilder remove_PreComment(Object element);
      public ASTSDCompleteModifierBuilder remove_PreComment(int index);
      public ASTSDCompleteModifierBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDCompleteModifierBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDCompleteModifierBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDCompleteModifierBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDCompleteModifierBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDCompleteModifierBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDCompleteModifierBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDCompleteModifierBuilder set_PreComment(int index, Comment precomment);
      public ASTSDCompleteModifierBuilder clear_PostComments();
      public ASTSDCompleteModifierBuilder add_PostComment(Comment postcomment);
      public ASTSDCompleteModifierBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDCompleteModifierBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDCompleteModifierBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDCompleteModifierBuilder remove_PostComment(Object element);
      public ASTSDCompleteModifierBuilder remove_PostComment(int index);
      public ASTSDCompleteModifierBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDCompleteModifierBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDCompleteModifierBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDCompleteModifierBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDCompleteModifierBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDCompleteModifierBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDCompleteModifierBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDCompleteModifierBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDCompleteModifier uncheckedBuild();
    }
    public class ASTSDFreeModifierBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDFreeModifierBuilder> {
      protected ASTSDFreeModifierBuilder realBuilder;
      public ASTSDFreeModifierBuilder();
      public ASTSDFreeModifier build();
      public boolean isValid();
      public ASTSDFreeModifierBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDFreeModifierBuilder set_SourcePositionEndAbsent();
      public ASTSDFreeModifierBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDFreeModifierBuilder set_SourcePositionStartAbsent();
      public ASTSDFreeModifierBuilder clear_PreComments();
      public ASTSDFreeModifierBuilder add_PreComment(Comment precomment);
      public ASTSDFreeModifierBuilder add_PreComment(int index, Comment precomment);
      public ASTSDFreeModifierBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDFreeModifierBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDFreeModifierBuilder remove_PreComment(Object element);
      public ASTSDFreeModifierBuilder remove_PreComment(int index);
      public ASTSDFreeModifierBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDFreeModifierBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDFreeModifierBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDFreeModifierBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDFreeModifierBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDFreeModifierBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDFreeModifierBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDFreeModifierBuilder set_PreComment(int index, Comment precomment);
      public ASTSDFreeModifierBuilder clear_PostComments();
      public ASTSDFreeModifierBuilder add_PostComment(Comment postcomment);
      public ASTSDFreeModifierBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDFreeModifierBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDFreeModifierBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDFreeModifierBuilder remove_PostComment(Object element);
      public ASTSDFreeModifierBuilder remove_PostComment(int index);
      public ASTSDFreeModifierBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDFreeModifierBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDFreeModifierBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDFreeModifierBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDFreeModifierBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDFreeModifierBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDFreeModifierBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDFreeModifierBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDFreeModifier uncheckedBuild();
    }
    public class ASTSDInitialModifierBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDInitialModifierBuilder> {
      protected ASTSDInitialModifierBuilder realBuilder;
      public ASTSDInitialModifierBuilder();
      public ASTSDInitialModifier build();
      public boolean isValid();
      public ASTSDInitialModifierBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDInitialModifierBuilder set_SourcePositionEndAbsent();
      public ASTSDInitialModifierBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDInitialModifierBuilder set_SourcePositionStartAbsent();
      public ASTSDInitialModifierBuilder clear_PreComments();
      public ASTSDInitialModifierBuilder add_PreComment(Comment precomment);
      public ASTSDInitialModifierBuilder add_PreComment(int index, Comment precomment);
      public ASTSDInitialModifierBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDInitialModifierBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDInitialModifierBuilder remove_PreComment(Object element);
      public ASTSDInitialModifierBuilder remove_PreComment(int index);
      public ASTSDInitialModifierBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDInitialModifierBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDInitialModifierBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDInitialModifierBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDInitialModifierBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDInitialModifierBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDInitialModifierBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDInitialModifierBuilder set_PreComment(int index, Comment precomment);
      public ASTSDInitialModifierBuilder clear_PostComments();
      public ASTSDInitialModifierBuilder add_PostComment(Comment postcomment);
      public ASTSDInitialModifierBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDInitialModifierBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDInitialModifierBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDInitialModifierBuilder remove_PostComment(Object element);
      public ASTSDInitialModifierBuilder remove_PostComment(int index);
      public ASTSDInitialModifierBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDInitialModifierBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDInitialModifierBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDInitialModifierBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDInitialModifierBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDInitialModifierBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDInitialModifierBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDInitialModifierBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDInitialModifier uncheckedBuild();
    }
    public class ASTSDVisibleModifierBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDVisibleModifierBuilder> {
      protected ASTSDVisibleModifierBuilder realBuilder;
      public ASTSDVisibleModifierBuilder();
      public ASTSDVisibleModifier build();
      public boolean isValid();
      public ASTSDVisibleModifierBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDVisibleModifierBuilder set_SourcePositionEndAbsent();
      public ASTSDVisibleModifierBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDVisibleModifierBuilder set_SourcePositionStartAbsent();
      public ASTSDVisibleModifierBuilder clear_PreComments();
      public ASTSDVisibleModifierBuilder add_PreComment(Comment precomment);
      public ASTSDVisibleModifierBuilder add_PreComment(int index, Comment precomment);
      public ASTSDVisibleModifierBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDVisibleModifierBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDVisibleModifierBuilder remove_PreComment(Object element);
      public ASTSDVisibleModifierBuilder remove_PreComment(int index);
      public ASTSDVisibleModifierBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDVisibleModifierBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDVisibleModifierBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDVisibleModifierBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDVisibleModifierBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDVisibleModifierBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDVisibleModifierBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDVisibleModifierBuilder set_PreComment(int index, Comment precomment);
      public ASTSDVisibleModifierBuilder clear_PostComments();
      public ASTSDVisibleModifierBuilder add_PostComment(Comment postcomment);
      public ASTSDVisibleModifierBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDVisibleModifierBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDVisibleModifierBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDVisibleModifierBuilder remove_PostComment(Object element);
      public ASTSDVisibleModifierBuilder remove_PostComment(int index);
      public ASTSDVisibleModifierBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDVisibleModifierBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDVisibleModifierBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDVisibleModifierBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDVisibleModifierBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDVisibleModifierBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDVisibleModifierBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDVisibleModifierBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDVisibleModifier uncheckedBuild();
    }
    public class ASTSDObjectBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDObjectBuilder> {
      protected ASTSDObjectBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.umlstereotype._ast.ASTStereotype> stereotype;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> mCObjectType;
      <<derived_attribute_name="">> protected String name;
      public ASTSDObjectBuilder();
      public ASTSDObject build();
      public boolean isValid();
      public de.monticore.umlstereotype._ast.ASTStereotype getStereotype();
      public boolean isPresentStereotype();
      public boolean containsSDModifier(Object element);
      public boolean containsAllSDModifiers(Collection<?> collection);
      public boolean isEmptySDModifiers();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> iteratorSDModifiers();
      public int sizeSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier[] toArraySDModifiers(de.monticore.lang.sdbasis._ast.ASTSDModifier[] array);
      public Object[] toArraySDModifiers();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> spliteratorSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> streamSDModifiers();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDModifier> parallelStreamSDModifiers();
      public de.monticore.lang.sdbasis._ast.ASTSDModifier getSDModifier(int index);
      public int indexOfSDModifier(Object element);
      public int lastIndexOfSDModifier(Object element);
      public boolean equalsSDModifiers(Object o);
      public int hashCodeSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDModifier> listIteratorSDModifiers(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> subListSDModifiers(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDModifier> getSDModifierList();
      public de.monticore.types.mcbasictypes._ast.ASTMCObjectType getMCObjectType();
      public boolean isPresentMCObjectType();
      public String getName();
      public ASTSDObjectBuilder setStereotype(de.monticore.umlstereotype._ast.ASTStereotype stereotype);
      public ASTSDObjectBuilder setStereotypeAbsent();
      public ASTSDObjectBuilder clearSDModifiers();
      public ASTSDObjectBuilder addSDModifier(de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSDObjectBuilder addAllSDModifiers(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public ASTSDObjectBuilder removeSDModifier(Object element);
      public ASTSDObjectBuilder removeAllSDModifiers(Collection<?> collection);
      public ASTSDObjectBuilder retainAllSDModifiers(Collection<?> collection);
      public ASTSDObjectBuilder removeIfSDModifier(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> filter);
      public ASTSDObjectBuilder forEachSDModifiers(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> action);
      public ASTSDObjectBuilder addSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSDObjectBuilder addAllSDModifiers(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDModifier> collection);
      public ASTSDObjectBuilder removeSDModifier(int index);
      public ASTSDObjectBuilder setSDModifier(int index, de.monticore.lang.sdbasis._ast.ASTSDModifier element);
      public ASTSDObjectBuilder replaceAllSDModifiers(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDModifier> operator);
      public ASTSDObjectBuilder sortSDModifiers(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDModifier> comparator);
      public ASTSDObjectBuilder setSDModifiersList(List<de.monticore.lang.sdbasis._ast.ASTSDModifier> sDModifiers);
      public ASTSDObjectBuilder setMCObjectType(de.monticore.types.mcbasictypes._ast.ASTMCObjectType mCObjectType);
      public ASTSDObjectBuilder setMCObjectTypeAbsent();
      public ASTSDObjectBuilder setName(String name);
      public ASTSDObjectBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDObjectBuilder set_SourcePositionEndAbsent();
      public ASTSDObjectBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDObjectBuilder set_SourcePositionStartAbsent();
      public ASTSDObjectBuilder clear_PreComments();
      public ASTSDObjectBuilder add_PreComment(Comment precomment);
      public ASTSDObjectBuilder add_PreComment(int index, Comment precomment);
      public ASTSDObjectBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDObjectBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDObjectBuilder remove_PreComment(Object element);
      public ASTSDObjectBuilder remove_PreComment(int index);
      public ASTSDObjectBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDObjectBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDObjectBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDObjectBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDObjectBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDObjectBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDObjectBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDObjectBuilder set_PreComment(int index, Comment precomment);
      public ASTSDObjectBuilder clear_PostComments();
      public ASTSDObjectBuilder add_PostComment(Comment postcomment);
      public ASTSDObjectBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDObjectBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDObjectBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDObjectBuilder remove_PostComment(Object element);
      public ASTSDObjectBuilder remove_PostComment(int index);
      public ASTSDObjectBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDObjectBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDObjectBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDObjectBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDObjectBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDObjectBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDObjectBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDObjectBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDObject uncheckedBuild();
    }
    public class ASTSDObjectSourceBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDObjectSourceBuilder> {
      protected ASTSDObjectSourceBuilder realBuilder;
      <<derived_attribute_name="", referencedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> protected String name;
      public ASTSDObjectSourceBuilder();
      public ASTSDObjectSource build();
      public boolean isValid();
      public String getName();
      public ASTSDObjectSourceBuilder setName(String name);
      public ASTSDObjectSourceBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDObjectSourceBuilder set_SourcePositionEndAbsent();
      public ASTSDObjectSourceBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDObjectSourceBuilder set_SourcePositionStartAbsent();
      public ASTSDObjectSourceBuilder clear_PreComments();
      public ASTSDObjectSourceBuilder add_PreComment(Comment precomment);
      public ASTSDObjectSourceBuilder add_PreComment(int index, Comment precomment);
      public ASTSDObjectSourceBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDObjectSourceBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDObjectSourceBuilder remove_PreComment(Object element);
      public ASTSDObjectSourceBuilder remove_PreComment(int index);
      public ASTSDObjectSourceBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDObjectSourceBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDObjectSourceBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDObjectSourceBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDObjectSourceBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDObjectSourceBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDObjectSourceBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDObjectSourceBuilder set_PreComment(int index, Comment precomment);
      public ASTSDObjectSourceBuilder clear_PostComments();
      public ASTSDObjectSourceBuilder add_PostComment(Comment postcomment);
      public ASTSDObjectSourceBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDObjectSourceBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDObjectSourceBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDObjectSourceBuilder remove_PostComment(Object element);
      public ASTSDObjectSourceBuilder remove_PostComment(int index);
      public ASTSDObjectSourceBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDObjectSourceBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDObjectSourceBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDObjectSourceBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDObjectSourceBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDObjectSourceBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDObjectSourceBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDObjectSourceBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDObjectSource uncheckedBuild();
    }
    public class ASTSDObjectTargetBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDObjectTargetBuilder> {
      protected ASTSDObjectTargetBuilder realBuilder;
      <<derived_attribute_name="", referencedSymbol="de.monticore.symbols.basicsymbols._symboltable.VariableSymbol">> protected String name;
      public ASTSDObjectTargetBuilder();
      public ASTSDObjectTarget build();
      public boolean isValid();
      public String getName();
      public ASTSDObjectTargetBuilder setName(String name);
      public ASTSDObjectTargetBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDObjectTargetBuilder set_SourcePositionEndAbsent();
      public ASTSDObjectTargetBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDObjectTargetBuilder set_SourcePositionStartAbsent();
      public ASTSDObjectTargetBuilder clear_PreComments();
      public ASTSDObjectTargetBuilder add_PreComment(Comment precomment);
      public ASTSDObjectTargetBuilder add_PreComment(int index, Comment precomment);
      public ASTSDObjectTargetBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDObjectTargetBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDObjectTargetBuilder remove_PreComment(Object element);
      public ASTSDObjectTargetBuilder remove_PreComment(int index);
      public ASTSDObjectTargetBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDObjectTargetBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDObjectTargetBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDObjectTargetBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDObjectTargetBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDObjectTargetBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDObjectTargetBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDObjectTargetBuilder set_PreComment(int index, Comment precomment);
      public ASTSDObjectTargetBuilder clear_PostComments();
      public ASTSDObjectTargetBuilder add_PostComment(Comment postcomment);
      public ASTSDObjectTargetBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDObjectTargetBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDObjectTargetBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDObjectTargetBuilder remove_PostComment(Object element);
      public ASTSDObjectTargetBuilder remove_PostComment(int index);
      public ASTSDObjectTargetBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDObjectTargetBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDObjectTargetBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDObjectTargetBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDObjectTargetBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDObjectTargetBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDObjectTargetBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDObjectTargetBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDObjectTarget uncheckedBuild();
    }
    public class ASTSDSendMessageBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDSendMessageBuilder> {
      protected ASTSDSendMessageBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDSource> sDSource;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDTarget> sDTarget;
      <<derived_attribute_name="", astType="">> protected de.monticore.lang.sdbasis._ast.ASTSDAction sDAction;
      <<derived_attribute_name="", astType="">> protected Optional<de.monticore.lang.sdbasis._ast.ASTSDActivityBar> sDActivityBar;
      public ASTSDSendMessageBuilder();
      public ASTSDSendMessage build();
      public boolean isValid();
      public de.monticore.lang.sdbasis._ast.ASTSDSource getSDSource();
      public boolean isPresentSDSource();
      public de.monticore.lang.sdbasis._ast.ASTSDTarget getSDTarget();
      public boolean isPresentSDTarget();
      public de.monticore.lang.sdbasis._ast.ASTSDAction getSDAction();
      public de.monticore.lang.sdbasis._ast.ASTSDActivityBar getSDActivityBar();
      public boolean isPresentSDActivityBar();
      public ASTSDSendMessageBuilder setSDSource(de.monticore.lang.sdbasis._ast.ASTSDSource sDSource);
      public ASTSDSendMessageBuilder setSDSourceAbsent();
      public ASTSDSendMessageBuilder setSDTarget(de.monticore.lang.sdbasis._ast.ASTSDTarget sDTarget);
      public ASTSDSendMessageBuilder setSDTargetAbsent();
      public ASTSDSendMessageBuilder setSDAction(de.monticore.lang.sdbasis._ast.ASTSDAction sDAction);
      public ASTSDSendMessageBuilder setSDActivityBar(de.monticore.lang.sdbasis._ast.ASTSDActivityBar sDActivityBar);
      public ASTSDSendMessageBuilder setSDActivityBarAbsent();
      public ASTSDSendMessageBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDSendMessageBuilder set_SourcePositionEndAbsent();
      public ASTSDSendMessageBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDSendMessageBuilder set_SourcePositionStartAbsent();
      public ASTSDSendMessageBuilder clear_PreComments();
      public ASTSDSendMessageBuilder add_PreComment(Comment precomment);
      public ASTSDSendMessageBuilder add_PreComment(int index, Comment precomment);
      public ASTSDSendMessageBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDSendMessageBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDSendMessageBuilder remove_PreComment(Object element);
      public ASTSDSendMessageBuilder remove_PreComment(int index);
      public ASTSDSendMessageBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDSendMessageBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDSendMessageBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDSendMessageBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDSendMessageBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDSendMessageBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDSendMessageBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDSendMessageBuilder set_PreComment(int index, Comment precomment);
      public ASTSDSendMessageBuilder clear_PostComments();
      public ASTSDSendMessageBuilder add_PostComment(Comment postcomment);
      public ASTSDSendMessageBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDSendMessageBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDSendMessageBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDSendMessageBuilder remove_PostComment(Object element);
      public ASTSDSendMessageBuilder remove_PostComment(int index);
      public ASTSDSendMessageBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDSendMessageBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDSendMessageBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDSendMessageBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDSendMessageBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDSendMessageBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDSendMessageBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDSendMessageBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDSendMessage uncheckedBuild();
    }
    public class ASTSDActivityBarBuilder extends de.monticore.ast.ASTNodeBuilder<ASTSDActivityBarBuilder> {
      protected ASTSDActivityBarBuilder realBuilder;
      <<derived_attribute_name="", astType="">> protected java.util.List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements;
      public ASTSDActivityBarBuilder();
      public ASTSDActivityBar build();
      public boolean isValid();
      public boolean containsSDElement(Object element);
      public boolean containsAllSDElements(Collection<?> collection);
      public boolean isEmptySDElements();
      public Iterator<de.monticore.lang.sdbasis._ast.ASTSDElement> iteratorSDElements();
      public int sizeSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement[] toArraySDElements(de.monticore.lang.sdbasis._ast.ASTSDElement[] array);
      public Object[] toArraySDElements();
      public Spliterator<de.monticore.lang.sdbasis._ast.ASTSDElement> spliteratorSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> streamSDElements();
      public Stream<de.monticore.lang.sdbasis._ast.ASTSDElement> parallelStreamSDElements();
      public de.monticore.lang.sdbasis._ast.ASTSDElement getSDElement(int index);
      public int indexOfSDElement(Object element);
      public int lastIndexOfSDElement(Object element);
      public boolean equalsSDElements(Object o);
      public int hashCodeSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements();
      public ListIterator<de.monticore.lang.sdbasis._ast.ASTSDElement> listIteratorSDElements(int index);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> subListSDElements(int start, int end);
      public List<de.monticore.lang.sdbasis._ast.ASTSDElement> getSDElementList();
      public ASTSDActivityBarBuilder clearSDElements();
      public ASTSDActivityBarBuilder addSDElement(de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDActivityBarBuilder addAllSDElements(Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public ASTSDActivityBarBuilder removeSDElement(Object element);
      public ASTSDActivityBarBuilder removeAllSDElements(Collection<?> collection);
      public ASTSDActivityBarBuilder retainAllSDElements(Collection<?> collection);
      public ASTSDActivityBarBuilder removeIfSDElement(Predicate<? super de.monticore.lang.sdbasis._ast.ASTSDElement> filter);
      public ASTSDActivityBarBuilder forEachSDElements(Consumer<? super de.monticore.lang.sdbasis._ast.ASTSDElement> action);
      public ASTSDActivityBarBuilder addSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDActivityBarBuilder addAllSDElements(int index, Collection<? extends de.monticore.lang.sdbasis._ast.ASTSDElement> collection);
      public ASTSDActivityBarBuilder removeSDElement(int index);
      public ASTSDActivityBarBuilder setSDElement(int index, de.monticore.lang.sdbasis._ast.ASTSDElement element);
      public ASTSDActivityBarBuilder replaceAllSDElements(UnaryOperator<de.monticore.lang.sdbasis._ast.ASTSDElement> operator);
      public ASTSDActivityBarBuilder sortSDElements(Comparator<? super de.monticore.lang.sdbasis._ast.ASTSDElement> comparator);
      public ASTSDActivityBarBuilder setSDElementsList(List<de.monticore.lang.sdbasis._ast.ASTSDElement> sDElements);
      public ASTSDActivityBarBuilder set_SourcePositionEnd(SourcePosition end);
      public ASTSDActivityBarBuilder set_SourcePositionEndAbsent();
      public ASTSDActivityBarBuilder set_SourcePositionStart(SourcePosition start);
      public ASTSDActivityBarBuilder set_SourcePositionStartAbsent();
      public ASTSDActivityBarBuilder clear_PreComments();
      public ASTSDActivityBarBuilder add_PreComment(Comment precomment);
      public ASTSDActivityBarBuilder add_PreComment(int index, Comment precomment);
      public ASTSDActivityBarBuilder addAll_PreComments(Collection<Comment> precomments);
      public ASTSDActivityBarBuilder addAll_PreComments(int index, Collection<Comment> precomments);
      public ASTSDActivityBarBuilder remove_PreComment(Object element);
      public ASTSDActivityBarBuilder remove_PreComment(int index);
      public ASTSDActivityBarBuilder removeAll_PreComments(Collection<?> element);
      public ASTSDActivityBarBuilder retainAll_PreComments(Collection<?> element);
      public ASTSDActivityBarBuilder removeIf_PreComment(Predicate<? super Comment> filter);
      public ASTSDActivityBarBuilder forEach_PreComments(Consumer<? super Comment> action);
      public ASTSDActivityBarBuilder replaceAll_PreComments(UnaryOperator<Comment> operator);
      public ASTSDActivityBarBuilder sort_PreComments(Comparator<? super Comment> comparator);
      public ASTSDActivityBarBuilder set_PreCommentList(List<Comment> preComments);
      public ASTSDActivityBarBuilder set_PreComment(int index, Comment precomment);
      public ASTSDActivityBarBuilder clear_PostComments();
      public ASTSDActivityBarBuilder add_PostComment(Comment postcomment);
      public ASTSDActivityBarBuilder add_PostComment(int index, Comment postcomment);
      public ASTSDActivityBarBuilder addAll_PostComments(Collection<Comment> postcomments);
      public ASTSDActivityBarBuilder addAll_PostComments(int index, Collection<Comment> postcomments);
      public ASTSDActivityBarBuilder remove_PostComment(Object element);
      public ASTSDActivityBarBuilder remove_PostComment(int index);
      public ASTSDActivityBarBuilder removeAll_PostComments(Collection<?> element);
      public ASTSDActivityBarBuilder retainAll_PostComments(Collection<?> element);
      public ASTSDActivityBarBuilder removeIf_PostComment(Predicate<? super Comment> filter);
      public ASTSDActivityBarBuilder forEach_PostComments(Consumer<? super Comment> action);
      public ASTSDActivityBarBuilder replaceAll_PostComments(UnaryOperator<Comment> operator);
      public ASTSDActivityBarBuilder sort_PostComments(Comparator<? super Comment> comparator);
      public ASTSDActivityBarBuilder set_PostCommentList(List<Comment> postComments);
      public ASTSDActivityBarBuilder set_PostComment(int index, Comment postcomment);
      public ASTSDActivityBar uncheckedBuild();
    }
    public class ASTConstantsSDBasis {
      public final static String LANGUAGE;
      public final static int DEFAULT;
      public static String[] superGrammars;
      public ASTConstantsSDBasis();
      public static Collection<String> getAllLanguages();
    }
    public interface ASTSDModifier extends de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDModifier deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDElement extends de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDElement deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDInteraction extends de.monticore.lang.sdbasis._ast.ASTSDElement, de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDInteraction deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDSource extends de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDSource deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDTarget extends de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDTarget deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDAction extends de.monticore.ast.ASTNode, de.monticore.lang.sdbasis._ast.ASTSDBasisNode {
      public abstract boolean deepEquals(Object o);
      public abstract boolean deepEquals(Object o, boolean forceSameOrder);
      public abstract boolean deepEqualsWithComments(Object o);
      public abstract boolean deepEqualsWithComments(Object o, boolean forceSameOrder);
      public abstract boolean equalAttributes(Object o);
      public abstract boolean equalsWithComments(Object o);
      public abstract ASTSDAction deepClone();
      public abstract de.monticore.lang.sdbasis._symboltable.ISDBasisScope getEnclosingScope();
      public abstract void setEnclosingScope(de.monticore.lang.sdbasis._symboltable.ISDBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.symbols.basicsymbols._symboltable.IBasicSymbolsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.expressions.expressionsbasis._symboltable.IExpressionsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.umlstereotype._symboltable.IUMLStereotypeScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope);
      public abstract void setEnclosingScope(de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope);
    }
    public interface ASTSDBasisNode extends ASTNode {
      public abstract void accept(de.monticore.lang.sdbasis._visitor.SDBasisTraverser visitor);
    }
    <<deprecated>> public enum SDBasisLiterals {
      ;
      private SDBasisLiterals(int intValue);
      protected int intValue;
      public int getIntValue();
    }
  }

}
